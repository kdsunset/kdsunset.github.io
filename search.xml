<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ubuntu 下编译goldfish内核并使用模拟器运行</title>
      <link href="/zd6207fq/"/>
      <url>/zd6207fq/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-下编译goldfish内核并使用模拟器运行"><a href="#Ubuntu-下编译goldfish内核并使用模拟器运行" class="headerlink" title="Ubuntu 下编译goldfish内核并使用模拟器运行"></a>Ubuntu 下编译goldfish内核并使用模拟器运行</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要学习Android Framework开发，通常需要下载AOSP（Android Open Source Project）项目。AOSP包含了Android操作系统的全部源代码，但并不包含内核部分。若需进一步学习驱动开发，则需另行下载内核源码。</p><p>需要特别说明的是，Android系统使用的内核并非原生Linux Kernel，而是基于Linux内核进行了深度定制，加入了进程间通信（Binder）、低内存管理等Android专属特性。内核有很多版本，我们可以选择谷歌官方维护的Android通用内核（Android Common Kernel, <a href="https://source.android.com/docs/core/architecture/kernel/android-common?hl=zh-cn">ACK</a>），也可根据实际设备情况选用厂商开源的内核（需注意部分设备可能要求解锁Bootloader）。</p><p>简单起见，本文选用goldfish内核作为学习对象。该内核是Android模拟器专用版本，特别适合在虚拟环境中进行驱动开发测试。</p><p>值得注意的是，虽然Android基于Linux内核构建，但是AOSP是不需要和内核编译到一起的，而是在设备启动时，Bootloader 负责选择并加载内核，然后再启动 AOSP。<br><strong>本文所用环境</strong></p><ul><li>VMware + Ubuntu 22.04 </li><li>Android ndk 16</li></ul><h2 id="1-下载及编译"><a href="#1-下载及编译" class="headerlink" title="1 下载及编译"></a>1 下载及编译</h2><h3 id="1-1-内核下载"><a href="#1-1-内核下载" class="headerlink" title="1.1 内核下载"></a>1.1 内核下载</h3><p>AOSP项目比较大，我们这里只获取 Goldfish 内核，而不下载整个 AOSP，clone完成需要手动checkout 出源码分支。<br>Android模拟器内核更新的比较慢，通常用的都是相对稳定、较老的内核：</p><ul><li>3.18：长期使用的老版本（早期 AOSP）</li><li>4.4 &#x2F; 4.9：主流 LTS 支持版本（支持 Android 9&#x2F;10）</li><li>4.14：进入 Android 10&#x2F;11 时期</li><li>5.4：对应 Android 12&#x2F;13（只维护了一个分支）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://android.googlesource.com/kernel/goldfish</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不支持科学上网，可以使用国内的源</span></span><br><span class="line">git <span class="built_in">clone</span> https://aosp.tuna.tsinghua.edu.cn/android/kernel/goldfish.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到其中一个分支</span></span><br><span class="line">git checkout android-goldfish-4.14-gchips </span><br></pre></td></tr></table></figure><h3 id="1-2-环境配置"><a href="#1-2-环境配置" class="headerlink" title="1.2 环境配置"></a>1.2 环境配置</h3><p><strong>安装gcc</strong><br>内核构建过程分为两个部分，ndk中的交叉编译工具链（x86_64-linux-android-gcc）负责内核本体的教程编译，同时内核构建脚本还需要一个本地主机的 gcc 来编译 host 工具（如 fixdep 等），因此需要安装gcc。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure><p><strong>下载交叉编译器</strong><br>goldfish内核默认使用 GCC 编译，较高的版本才支持clang编译，可以通过<code>goldfish/Documentation/process/changes.rst</code>查看要求编译器的最低版本。</p><p>这里我们使用Android ndk提供的编译器来编译，打开Android studio 下载ndk，由于<br>goldfish 默认使用gcc编译器，而自 NDK r18 版本起，Android 官方推荐使用 Clang 作为默认的编译器，gcc被移除，因此我们选择下载r18以下的旧版本。</p><h3 id="1-3编译"><a href="#1-3编译" class="headerlink" title="1.3编译"></a>1.3编译</h3><p><strong>配置编译脚本</strong><br>使用<code>touch</code>命令新建<code>build.sh</code>配置编译脚本文件，输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置目标架构为 x86_64（模拟器内核一般是 x86 或 x86_64）</span></span><br><span class="line"><span class="built_in">export</span> ARCH=x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置子架构，通常与 ARCH 一致</span></span><br><span class="line"><span class="built_in">export</span> SUBARCH=x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置交叉编译工具链前缀（这是 Android NDK 中的编译器前缀）</span></span><br><span class="line"><span class="built_in">export</span> CROSS_COMPILE=x86_64-linux-android-</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置你的 NDK 路径，这个路径需要根据你的实际 NDK 安装位置修改</span></span><br><span class="line"><span class="built_in">export</span> NDK_PATH=/home/zhg/Workplace/Android/Sdk/ndk/16.1.4479499</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 NDK 工具链的 bin 目录，里面包含交叉编译器等工具</span></span><br><span class="line"><span class="built_in">export</span> TOOLCHAIN=<span class="variable">$NDK_PATH</span>/toolchains/x86_64-4.9/prebuilt/linux-x86_64/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把工具链路径加入系统环境变量 PATH，方便在命令行中直接调用编译器</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$TOOLCHAIN</span>:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用默认配置文件 x86_64_ranchu_defconfig 生成 .config 文件</span></span><br><span class="line"><span class="comment"># ranchu 是 Android Emulator 使用的虚拟平台（QEMU 后端）</span></span><br><span class="line">make x86_64_ranchu_defconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始编译内核，-j$(nproc) 会使用所有可用 CPU 核心进行并行编译，加快速度</span></span><br><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>开始编译</strong><br>执行 <code>sh build.sh</code> 开始编译。编译过程比较简单，以下是一些可能出现的报错</p><p><strong>secclass_map 需要更新</strong><br>错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In file included from scripts/selinux/mdp/mdp.c:49:</span><br><span class="line">./security/selinux/include/classmap.h:247:2: error: <span class="comment">#error New address family defined, please update secclass_map.</span></span><br><span class="line">  247 | <span class="comment">#error New address family defined, please update secclass_map.</span></span><br><span class="line">      |  ^~~~~</span><br><span class="line">In file included from scripts/selinux/genheaders/genheaders.c:18:</span><br><span class="line">./security/selinux/include/classmap.h:247:2: error: <span class="comment">#error New address family defined, please update secclass_map.</span></span><br><span class="line">  247 | <span class="comment">#error New address family defined, please update secclass_map.</span></span><br><span class="line">      |  ^~~~~</span><br><span class="line">make[3]: *** [scripts/Makefile.host:102：scripts/selinux/mdp/mdp] 错误 1</span><br><span class="line">make[2]: *** [scripts/Makefile.build:671：scripts/selinux/mdp] 错误 2</span><br><span class="line">make[2]: *** 正在等待未完成的任务....</span><br></pre></td></tr></table></figure><p>解决方法：打开<code>security/selinux/include/classmap.h </code>在<code>secclass_map</code>结构体增加 添加新的地址族对应项。<br>或者临时解决：执行 <code>grep -r &quot;PF_MAX&quot; /usr/include/</code>查找PF_MAX的值，修改if语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">undef</span> PF_MAX</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PF_MAX 44</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> PF_MAX &gt; 44</span></span><br><span class="line"><span class="meta">#<span class="keyword">error</span> New address family defined, please update secclass_map.</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>报错 multiple definition of ‘yylloc’重复定义</strong><br>错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ld: scripts/dtc/dtc-parser.tab.o:(.bss+0x10): multiple definition of yylloc<span class="string">&#x27;; scripts/dtc/dtc-lexer.lex.o:(.bss+0x0): first defined here</span></span><br><span class="line"><span class="string">collect2: error: ld returned 1 exit status</span></span><br></pre></td></tr></table></figure><p>解决方法：使用<code>grep -rw &quot;YYLTYPE yylloc;&quot;</code>命令搜索这个变量，找出到除了dtc-lexer.lex.c 外的(<code>scripts/dtc/dtc-lexer.l</code>、<code>dtc-lexer.lex.c_shipped</code>)所有<code>YYLTYPE yylloc</code>改成<code>extern YYLTYPE yylloc</code></p><p><strong>完成</strong><br>当终端输出以下信息代表内核映像 bzImage 已成功构建。表示bzImage已经生成，位于arch&#x2F;x86&#x2F;boot&#x2F;bzImage。bzImage 是经过压缩的内核映像文件，用于启动系统。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Kernel: <span class="built_in">arch</span>/x86/boot/bzImage is ready  (<span class="comment">#1)</span></span><br></pre></td></tr></table></figure><h2 id="2-使用avd启动加载内核"><a href="#2-使用avd启动加载内核" class="headerlink" title="2 使用avd启动加载内核"></a>2 使用avd启动加载内核</h2><p>启动内核映像通常依赖于使用模拟器或在物理硬件。以上编译的goldfish内核镜像bzImage可以用模拟器（ Android Emulator）来运行。</p><p><strong>创建模拟器</strong><br>运行Android stuido并打开<code>Virtual Device Manager</code>创建一个模拟器，由于我们编译的Goldfish 内核是针对 x86_64 架构的，因此模拟器镜像也选择x86_64的，Android版本也要与内核版本兼容，我们前面选择的是内核版本 4.14，与之对应的是Android10（android-29）</p><p>如果提示<code>Your CPU does not support required features (VT-x or SVM).</code>，需要启用虚拟化技术，则打开打开VMware的虚拟化的设置：</p><ol><li>关闭当前虚拟机，依次选择虚拟机-&gt;设置-&gt;硬件tab下的处理器选项，勾选右侧的<code>虚拟化Intel VT-x/EPT或AMD-V/RVI</code>。</li><li>如果仍然报错：关闭有冲突的windows虚拟化功能，打开Windows主机的“启用或关闭windows功能”，关闭所有有关的功能：包括Hyper-V、Windows虚拟机监控程序平台、适用于Linux的Windows子系统、虚拟机平台等。</li></ol><p><strong>使用命令运行模拟器</strong><br>为了能在终端使用模拟器的命令，需要配置Android sdk环境变量:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=//home/zhg/Workplace/Android/Sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$ANDROID_HOME</span>/emulator:<span class="variable">$ANDROID_HOME</span>/platform-tools:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>启动 AVD，<code>&lt;avd_name&gt;</code>是上面在Android studio中创建avd时的名称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 -kernel 命令行参数指定内核</span></span><br><span class="line">emulator -avd &lt;avd_name&gt; -kernel /path/to/your/bzImage -verbose</span><br></pre></td></tr></table></figure><p>执行命令后，可能会出现在虚拟机上运行模拟器（禁止套娃）导致性能下降之类的风险提示，可以忽略。</p><p><strong>查看模拟器内核版本</strong><br>等模拟器运行起来后，在模拟器的设置-&gt;关于模拟器页面-&gt;<code>Android版本</code>中可以看到内核版本信息，也可以使用命令<code>adb shell uname -a</code>查看，根据版本号和时间可以确定运行的是我们刚才编译的内核。</p><p><strong>查看内核日志</strong><br>查看内核控件日志，logcat只能查看用户空间的日志，dmesg可以查看全部日志。<br> Android 8.0（Oreo）及以上版本，访问 dmesg需要root权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb root  <span class="comment"># 获取 root 权限</span></span><br><span class="line">adb shell dmesg</span><br><span class="line"><span class="comment"># adb shell dmesg | grep xxx</span></span><br></pre></td></tr></table></figure><p>以上就是关于goldfish内核的编译及运行，下一篇我们将使用goldfish内核来编写一个简单的驱动来学习相关知识。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://juejin.cn/post/7235309338097123388">学习 Binder 的预备知识3 —— linux 驱动开发入门</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> goldfish </tag>
            
            <tag> Linux内核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用apktool实现一个apk修改和打包脚本</title>
      <link href="/u8wwtapk/"/>
      <url>/u8wwtapk/</url>
      
        <content type="html"><![CDATA[<h1 id="使用apktool实现一个apk修改和打包脚本"><a href="#使用apktool实现一个apk修改和打包脚本" class="headerlink" title="使用apktool实现一个apk修改和打包脚本"></a>使用apktool实现一个apk修改和打包脚本</h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h2><p>最近接到一个需求，app有多个服务器环境，上传发布时可以根据所处环境生成对应的配置参数以供app初始化时使用，我们选择的方法是在服务器对上传的apk进行解包插入配置文件并重新打包及签名，再发布。主要用到apktool及签名工具apksigner的相关知识，顺便了解一下如将java代码打包成可执行程序及脚本的使用。</p><h2 id="2-用到的工具"><a href="#2-用到的工具" class="headerlink" title="2 用到的工具"></a>2 用到的工具</h2><h3 id="2-1-apktool"><a href="#2-1-apktool" class="headerlink" title="2.1 apktool"></a>2.1 apktool</h3><p>Apktool 是一个开源的逆向工程工具，用于 反编译（解包）和回编译（重新打包）Android APK 文件，这里会用到其中的解包<br>和打包命令 。<br><strong>安装方式</strong></p><ol><li>从<a href="https://apktool.org/">apktool官网</a>下载最新版的<a href="https://bitbucket.org/iBotPeaches/apktool/downloads/">jar文件</a>，重命名为<code>apktool.jar</code></li><li>下载Apktool的启动脚本（右键保存），其作用是简化运行 Apktool 的命令行调用。不同平台的脚本不同，window上是<a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat"><code>apktool.bat</code></a>，linux则是不带后缀的<a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool"><code>apktool</code></a>。</li><li>将jar文件和脚本文件保存至自定义的目录，然后将该路径添加到配置环境变量Path中，也可以复制到Path默认的目录，windows是<code> C://Windows</code>，Linux则是<code> /usr/local/bin</code>。</li><li>对于Linux，如果脚本文件是新建、下载或者复制建立的，还需要执行<code>chmod + x</code>命令来赋予文件可执行权限 ，之后即可使用终端来运行Apktool。</li></ol><p><strong>示例用法</strong></p><ul><li>解包 APK：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 myapp.apk 解包到 myapp_source 目录。</span></span><br><span class="line">apktool d myapp.apk -o myapp_source</span><br></pre></td></tr></table></figure></li><li>重新打包 APK</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将 myapp_source 目录中的文件重新打包成 myapp_modified.apk。</span><br><span class="line">apktool b myapp_source -o myapp_modified.apk</span><br></pre></td></tr></table></figure><h3 id="2-2-对齐工具zipalign"><a href="#2-2-对齐工具zipalign" class="headerlink" title="2.2 对齐工具zipalign"></a>2.2 对齐工具zipalign</h3><p>对齐是一种内存优化手段，zipalign 工具会让 APK 中的资源（特别是 .so、图片、XML等）在 4 字节对齐的边界上存储，可以提高内存访问效率和节省内存。由于对齐会改变文件，破坏签名，因此应该先对齐再签名。<br><strong>命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将infile.apk 对齐，保存为 outfile.apk</span></span><br><span class="line">zipalign -P 16 -f -v 4 infile.apk outfile.apk</span><br></pre></td></tr></table></figure><p>如果APK 包含共享库（.so 个文件），请使用 -P 16 以确保它们与适合 mmap(2) 的 16KiB 页面边界对齐 在 16KiB 和 4KiB 设备中。对于其他文件，其对齐方式由 zipalign 的强制性对齐参数，应按 4 个字节对齐 在 32 位和 64 位系统上运行，注意-P是Android sdk 35 或以上新增的参数</p><h3 id="2-3-签名工具apksigner"><a href="#2-3-签名工具apksigner" class="headerlink" title="2.3 签名工具apksigner"></a>2.3 签名工具apksigner</h3><p>Android apk有专门的签名工具apksigner，apksigner会校验文件，确保 APK 完整性（防篡改），验证 APK 开发者身份。<br><strong>为 APK 签名</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 apksigner 对 APK 进行签名</span></span><br><span class="line"><span class="comment"># &lt;keystore.jks&gt;： 签名文件（.jks 格式）</span></span><br><span class="line"><span class="comment"># &lt;keyAlias&gt; ：keystore 中的 key 别名（alias）</span></span><br><span class="line"><span class="comment"># &lt;storePassword&gt;： keystore 的密码（使用 pass: 前缀表示明文）</span></span><br><span class="line"><span class="comment"># &lt;keyPassword&gt; ：私钥的密码（一般和 keystore 密码相同）</span></span><br><span class="line">apksigner sign --ks &lt;keystore.jks&gt; --ks-key-alias &lt;keyAlias&gt; --ks-pass pass:<span class="string">&quot;&lt;storePassword&gt;&quot;</span> --key-pass pass:<span class="string">&quot;&lt;keyPassword&gt;&quot;</span> --out signed_app.apk app-name.apk</span><br></pre></td></tr></table></figure><p><strong>验证 APK 签名</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确认 APK 签名是否成功</span></span><br><span class="line">apksigner verify signed.apk</span><br></pre></td></tr></table></figure><p><strong>获取签名信息</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印证书相关信息和详细的签名</span></span><br><span class="line">apksigner verify --verbose --print-certs your_app.apk</span><br></pre></td></tr></table></figure><h3 id="2-4-在linux下安装和运行apksigner和zipalign"><a href="#2-4-在linux下安装和运行apksigner和zipalign" class="headerlink" title="2.4 在linux下安装和运行apksigner和zipalign"></a>2.4 在linux下安装和运行apksigner和zipalign</h3><p>有以下两种方式：</p><ul><li>方式一：使用官方SDK中附带的工具</li></ul><p>Android Sdk中的 build-tools文件夹，其中就包含了 apksigner 和 zipalign。</p><ol><li>下载和解压 Android SDK<br>从 Android Studio 官方网站 下载 Android Studio ，然后从菜单中下载</li><li>设置 Android SDK环境变量<br>解压下载的 SDK 包，并将 build-tools 目录添加到你的 PATH 环境变量中：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ANDROID_HOME=~/path/to/your/android-sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/build-tools/&lt;version&gt;:<span class="variable">$ANDROID_HOME</span>/platform-tools</span><br></pre></td></tr></table></figure>也可以使用SDK 管理工具安装适当版本的 build-tools，<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sdkmanager <span class="string">&quot;build-tools;&lt;version&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>方式二：安装 Ubuntu 包管理器的 apksigner<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装  apk 签名工具</span></span><br><span class="line">sudo apt install apksigner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 apk 对齐工具</span></span><br><span class="line">sudo apt install zipalign</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3 代码实现"></a>3 代码实现</h2><p>我们要实现的流程是APK 反编译（解包） → 修改 → 打包 → 签名，对于apktool命令的封装可以使用Bash、Java，Python等语言，这里使用java语言。<br><strong>1. 解包</strong><br>新建java类，解包用到apktool的d (decode) 命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApkProcessor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打包apk</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sourceDir   解包后生成的目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> apkFileName 重新打包生成的 APK 文件路径，如xx.apk</span></span><br><span class="line"><span class="comment">     * created by ZHG on 2024/8/21</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">buildApk</span><span class="params">(String sourceDir, String apkFileName)</span> &#123;</span><br><span class="line">        <span class="comment">// 补上后缀</span></span><br><span class="line">        apkFileName = apkFileName.endsWith(<span class="string">&quot;.apk&quot;</span>) ? apkFileName : apkFileName + <span class="string">&quot;.apk&quot;</span>;</span><br><span class="line">        <span class="comment">// 打包命令</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> String.format(<span class="string">&quot;apktool b %s -o %s&quot;</span>, sourceDir, apkFileName);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> executeJavaCommand(command);</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">executeJavaCommand</span><span class="params">(String command)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] cmdArray = command.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(cmdArray);</span><br><span class="line">            <span class="comment">// 如果你希望输出显示在控制台上</span></span><br><span class="line">            processBuilder.inheritIO();</span><br><span class="line">            <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> processBuilder.start();</span><br><span class="line">            <span class="type">int</span> <span class="variable">exitCode</span> <span class="operator">=</span> process.waitFor();</span><br><span class="line">            success = exitCode == <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2. 修改</strong><br>使用File api将指定的文件配置文件复制到解包后的apk目录的中<code>assets</code>目录下，即app的原生资源目录下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将文件从源路径复制到目标路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> source 源文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dest   目标文件路径</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">copyFile</span><span class="params">(String source, String dest)</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">File</span> <span class="variable">sourceFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(source);</span><br><span class="line">    <span class="keyword">if</span> (!sourceFile.exists()) &#123;</span><br><span class="line">        log(<span class="string">&quot;copyFile：&quot;</span> + source + <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log(<span class="string">&quot;复制文件：&quot;</span> + source + <span class="string">&quot; -&gt; &quot;</span> + dest);</span><br><span class="line">            Files.copy(<span class="keyword">new</span> <span class="title class_">File</span>(source).toPath(), <span class="keyword">new</span> <span class="title class_">File</span>(dest).toPath());</span><br><span class="line">            success = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>3. 打包</strong><br>这里用到的是<code>apktool</code> 的<code>b (build)</code>命令，将使用apktool解包出来的文件重新打包成apk。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 令将 myapp_source 目录中的文件重新打包成 myapp_modified.apk。</span><br><span class="line">apktool b myapp_source -o myapp_modified.apk</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打包apk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sourceDir   解包后生成的目录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> apkFileName 重新打包生成的 APK 文件路径，如xx.apk</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">buildApk</span><span class="params">(String sourceDir, String apkFileName)</span> &#123;</span><br><span class="line">    <span class="comment">// 补上后缀</span></span><br><span class="line">    apkFileName = apkFileName.endsWith(<span class="string">&quot;.apk&quot;</span>) ? apkFileName : apkFileName + <span class="string">&quot;.apk&quot;</span>;</span><br><span class="line">    <span class="comment">// 打包命令</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> String.format(<span class="string">&quot;apktool b %s -o %s&quot;</span>, sourceDir, apkFileName);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> executeJavaCommand(command);</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 对齐</strong><br>这里用到了zipalign的对齐命令，-P参数需要Android sdk 35或以上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用zipalign 对apk进行对齐优化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">zipalignApk</span><span class="params">(String apkFilePath, String outputApkFile)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">new</span> <span class="title class_">File</span>(apkFilePath).exists()) &#123;</span><br><span class="line">        log(<span class="string">&quot;zipalignApk：&quot;</span> + apkFilePath + <span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">signCommand</span> <span class="operator">=</span> String.format(</span><br><span class="line">            <span class="string">&quot;zipalign -P 16 -f -v 4 %s %s&quot;</span>,</span><br><span class="line">            apkFilePath, outputApkFile</span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">return</span> executeJavaCommand(signCommand);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5. 签名</strong><br>这一步用到apksigner的签名命令，如果是Windows，程序名称可能被封装成bat，因此可能需要调用对应的bat。签名密钥信息可以使用常量，也可以通过json或yaml等文件读取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对apk进行签名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> apkFilePath   apk文件路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keystoreFile  签名所使用的密钥库文件的路径</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> storePassword 密钥库文件的密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyAlias      密钥别名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keyPassword   密钥密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> signedApkPath 签名后的输出文件路径</span></span><br><span class="line"><span class="comment"> * created by ZHG on 2024/8/20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">signApk</span><span class="params">(</span></span><br><span class="line"><span class="params">        String apkFilePath,</span></span><br><span class="line"><span class="params">        String keystoreFile,</span></span><br><span class="line"><span class="params">        String storePassword,</span></span><br><span class="line"><span class="params">        String keyAlias,</span></span><br><span class="line"><span class="params">        String keyPassword,</span></span><br><span class="line"><span class="params">        String signedApkPath)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">new</span> <span class="title class_">File</span>(apkFilePath).exists()) &#123;</span><br><span class="line">        log(<span class="string">&quot;signApk：&quot;</span> + apkFilePath + <span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">new</span> <span class="title class_">File</span>(keystoreFile).exists()) &#123;</span><br><span class="line">        log(<span class="string">&quot;signApk：&quot;</span> + keystoreFile + <span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">osName</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isWin</span> <span class="operator">=</span> (osName == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : osName).toLowerCase().contains(<span class="string">&quot;win&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">apksignerName</span> <span class="operator">=</span> isWin ? <span class="string">&quot;apksigner.bat&quot;</span> : <span class="string">&quot;apksigner&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">signCommand</span> <span class="operator">=</span> String.format(</span><br><span class="line">            apksignerName + <span class="string">&quot; sign --ks %s --ks-key-alias %s --ks-pass pass:%s --key-pass pass:%s --out %s %s&quot;</span>,</span><br><span class="line">            keystoreFile, keyAlias, storePassword, keyPassword, signedApkPath, apkFilePath</span><br><span class="line">    );</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> executeJavaCommand(signCommand);</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 读取一个Android签名的配置信息，格式：</span></span><br><span class="line"><span class="comment"> * keystore:</span></span><br><span class="line"><span class="comment"> *   file: &quot;path/to/keystore&quot;</span></span><br><span class="line"><span class="comment"> *   storePassword: &quot;password&quot;</span></span><br><span class="line"><span class="comment"> *   keyAlias: &quot;alias&quot;</span></span><br><span class="line"><span class="comment"> *   keyPassword: &quot;keypassword&quot;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">parseKeystoreYaml</span><span class="params">(String filePath)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">new</span> <span class="title class_">File</span>(filePath).exists())&#123;</span><br><span class="line">        log(filePath+<span class="string">&quot;签名配置文件不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 读取 YAML 文件内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(Files.readAllBytes(Paths.get(filePath)));</span><br><span class="line">        <span class="comment">// 解析 YAML 内容（简单的实现，适用于特定格式）</span></span><br><span class="line">        Map&lt;String, String&gt; config = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        String[] lines = content.split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String line : lines) &#123;</span><br><span class="line">            line = line.trim();</span><br><span class="line">            <span class="keyword">if</span> (line.isEmpty() || line.startsWith(<span class="string">&quot;#&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 跳过空行和注释</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> line.indexOf(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> line.substring(<span class="number">0</span>, index);</span><br><span class="line">                <span class="comment">// 去掉开头的空格和双引号</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> line.substring(index + <span class="number">1</span>).trim().replaceAll(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">                config.put(key.trim(), value.trim());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (config.size()&lt;<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取配置信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> config.get(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">storePassword</span> <span class="operator">=</span> config.get(<span class="string">&quot;storePassword&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">keyAlias</span> <span class="operator">=</span> config.get(<span class="string">&quot;keyAlias&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">keyPassword</span> <span class="operator">=</span> config.get(<span class="string">&quot;keyPassword&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6 修改入口方法</strong><br>我们最终的效果是在终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;apkFile&gt; apk源文件路径</span></span><br><span class="line"><span class="comment"># &lt;configFile&gt; 待写入的文件</span></span><br><span class="line"><span class="comment"># &lt;outputDir&gt; 临时文件及输出目录</span></span><br><span class="line">java -jar ApkProcessor.jar &lt;apkFile&gt; &lt;configFile&gt; &lt;outputDir&gt;</span><br></pre></td></tr></table></figure><p>我们在终端输入的命令和参数对应main方法的可变长参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApkProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查参数数量</span></span><br><span class="line">        <span class="keyword">if</span> (args.length &lt; <span class="number">4</span>) &#123;</span><br><span class="line">            log(<span class="string">&quot;缺少参数&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">apkFilePath</span> <span class="operator">=</span> args[<span class="number">1</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">targetFile</span> <span class="operator">=</span> args[<span class="number">2</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">outputDir</span> <span class="operator">=</span> args[<span class="number">3</span>];</span><br><span class="line">         <span class="comment">// 文件是否存在判断</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;sign&quot;</span>.equals(cmd))&#123;</span><br><span class="line">            zipAndSignApk(apkFilePath, targetFile, outputDir);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;full&quot;</span>.equals(cmd))&#123;</span><br><span class="line">            <span class="comment">//java ApkProcessor full &lt;apkFile&gt; &lt;configFile&gt; &lt;outputDir&gt; &lt;keystoreConfigFile&gt;</span></span><br><span class="line">            <span class="keyword">if</span> (args.length &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                log(<span class="string">&quot;缺少参数&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">keystoreConfigFile</span> <span class="operator">=</span> args[<span class="number">4</span>];</span><br><span class="line">            processAllTask(apkFilePath,targetFile,outputDir,keystoreConfigFile);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">processApk</span><span class="params">(String apkFile,  String targetFile,String outputDir)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outputDir == <span class="literal">null</span> || outputDir.length() ==<span class="number">0</span>|| outputDir.equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">apkFolder</span> <span class="operator">=</span> apkFile.substring(<span class="number">0</span>, apkFile.lastIndexOf(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">            outputDir = apkFolder;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// apk解包输出目录</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">unpackDir</span> <span class="operator">=</span> outputDir + File.separator + <span class="string">&quot;unpack&quot;</span>;</span><br><span class="line">        checkDirectory(outputDir,unpackDir);</span><br><span class="line">        <span class="comment">// 配置文件复制的目标路径，即apk解包目录的资源文件夹中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">targetFileName</span> <span class="operator">=</span> targetFile.substring(targetFile.lastIndexOf(File.separator) + <span class="number">1</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">configDestPath</span> <span class="operator">=</span> unpackDir + File.separator + <span class="string">&quot;assets&quot;</span> + File.separator + targetFileName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新打包生成的apk文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">apkNameWithoutSuffix</span> <span class="operator">=</span> apkFile.substring(apkFile.lastIndexOf(File.separator) + <span class="number">1</span>).replace(<span class="string">&quot;.apk&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">apkRebuildFile</span> <span class="operator">=</span> outputDir + File.separatorChar + apkNameWithoutSuffix + <span class="string">&quot;_added.apk&quot;</span>;</span><br><span class="line">        <span class="comment">// 1. 解包 APK</span></span><br><span class="line">        log(<span class="string">&quot;正在解包apk...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!decodeApk(apkFile, unpackDir)) &#123;</span><br><span class="line">            log(<span class="string">&quot;解包 APK 失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2. 复制配置文件</span></span><br><span class="line">        log(<span class="string">&quot;正在复制配置文件...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!copyFile(targetFile, configDestPath)) &#123;</span><br><span class="line">            log(<span class="string">&quot;复制配置文件失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 重新打包 APK</span></span><br><span class="line">        log(<span class="string">&quot;正在打包APK...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!buildApk(unpackDir, apkRebuildFile)) &#123;</span><br><span class="line">            log(<span class="string">&quot;打包 APK 失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.签名</span></span><br><span class="line">        log(<span class="string">&quot;正在签名APK...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!signApk(apkZipalignFile, file, storePassword, keyAlias, keyPassword, signedApkFile)) &#123;</span><br><span class="line">            log(<span class="string">&quot;签名 APK 失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        log(<span class="string">&quot;APK 处理成功，输出文件：&quot;</span> + apkRebuildFile);</span><br><span class="line">        <span class="comment">// 清理临时文件</span></span><br><span class="line">        deleteFile(<span class="keyword">new</span> <span class="title class_">File</span>(unpackDir));</span><br><span class="line">        <span class="keyword">return</span> apkRebuildFile;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-打包-Java-程序（JAR-文件）"><a href="#4-打包-Java-程序（JAR-文件）" class="headerlink" title="4 打包 Java 程序（JAR 文件）"></a>4 打包 Java 程序（JAR 文件）</h2><p><strong>编译</strong><br>将上述类生成字节码，执行后得到ApkProcessor.class 文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac -encoding UTF-8 ApkProcessor.java</span><br></pre></td></tr></table></figure><p>它也可以在终端窗口通过 <code>java &lt;类名&gt; </code>的方式运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 程序名称后面的参数会被main方法接收</span></span><br><span class="line">java ApkProcessor &lt;args&gt;</span><br></pre></td></tr></table></figure><p><strong>创建可执行 JAR 文件</strong><br>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApkProcessor/</span><br><span class="line">├── ApkProcessor.class</span><br><span class="line">└── MANIFEST.MF</span><br></pre></td></tr></table></figure><p>javac 生成 .class 文件只是编译的中间产物，如果想把多个 class 和资源打包为一个能运行的 jar，只要声明 Main-Class，即可使用。要创建一个名为 ApkProcessor.jar 的 JAR 文件，步骤如下：</p><ol><li>创建一个清单文件 <code>MANIFEST.MF</code>，内容如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Main-Class: ApkProcessor</span><br></pre></td></tr></table></figure></li><li>使用以下命令创建 JAR 文件（在 ApkProcessor.class 文件所在的目录下执行）：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvfm ApkProcessor.jar MANIFEST.MF ApkProcessor.class</span><br></pre></td></tr></table></figure><strong>linux下使用jar包</strong><br>在jar包所在目录（或者完整路径），使用<code>java -jar &lt;path.jar&gt; &lt;arg...&gt;</code>命令即可运行这个jar</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">java -jar youjar.jar </span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">java -jar /path/to/youjar.jar &lt;arg...&gt;</span><br></pre></td></tr></table></figure><p><strong>将jar包使用命令封装成脚本</strong><br>进一步地，我们可以将上命令封装成脚本，再配置环境变量，就可达到跟使用其他终端命令一样的方便。</p><ul><li>Linux<br>新建<code>apkprocessor</code>文件，添加以下内容：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 使用脚本所在目录的相对路径来运行 JAR 文件</span></span><br><span class="line"><span class="comment"># 保存脚本后，确保它具有执行权限：sudo chmod +x apkprocessor</span></span><br><span class="line">java -jar <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/ApkProcessor.jar&quot;</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure></li><li>Windows<br>Window使用的脚本是bat，新建<code>apkprocessor.bat</code>文件，添加以下内容：<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment">REM 定位到ApkProcessor.jar的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> &quot;E:\Download\ApkProcessor\jar&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 参数路径</span></span><br><span class="line"><span class="built_in">set</span> INPUT_APK=&quot;E:\Download\your/apk/<span class="built_in">path</span>.apk&quot;</span><br><span class="line"><span class="built_in">set</span> CONFIG_FILE=&quot;E:\Download\your/keystore_config/<span class="built_in">path</span>.yaml&quot;</span><br><span class="line"><span class="built_in">set</span> OUTPUT_DIR=&quot;%~dp0output&quot;</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">REM 执行命令</span></span><br><span class="line">java -jar ApkProcessor.jar sign <span class="variable">%INPUT_APK%</span> <span class="variable">%CONFIG_FILE%</span> <span class="variable">%OUTPUT_DIR%</span> </span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><strong>打包apk</strong><br>由于不能使用签名，因此在Android studio的终端窗口使用命令行打包apk，在Gradle终端运行以下命令:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建 release 类型的 APK（未签名）</span></span><br><span class="line">./gradlew assembleRelease</span><br></pre></td></tr></table></figure><strong>配置及使用</strong><br>最后我们在服务器上安装好java环境、对齐和签名工具，然后上传apktool和apkprocessor及对应的脚本文件，配置环境变量或直接复制到Path默认目录<code>/usr/local/bin</code>，即可使用这个脚本。</li></ul><ol><li>上传（复制）文件到自定义目录<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ApkProcessorJar/</span><br><span class="line">├──  apktool         </span><br><span class="line">├──  apktool.jar</span><br><span class="line">├──  apkprocessor</span><br><span class="line">└── ApkProcessor.jar</span><br></pre></td></tr></table></figure></li><li>添加执行权限<br>在<code>apktool</code>和<code>apkprocessor</code>脚本所在目录打开终端运行以下命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x apktool</span><br><span class="line">sudo <span class="built_in">chmod</span> +x apkprocessor</span><br></pre></td></tr></table></figure></li><li>配置环境变量<br>打开 <code>~/.bashrc</code> 文件，将<code>apktool.jar</code>和<code>ApkProcessor.jar</code>所在目录添加到环境变量，并使用<code>source ~/.bashrc</code>更新。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:path/to/ApkProcessor/jar</span><br></pre></td></tr></table></figure>即可通过命令使用这个脚本。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]. apktool : <a href="https://apktool.org/">https://apktool.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apktool </tag>
            
            <tag> 反编译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下编译LibreOffice Android版</title>
      <link href="/lireofad/"/>
      <url>/lireofad/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>LibreOffice 是一套开源且免费的办公软件，类似于 Microsoft Office 和 Apache OpenOffice。它包括文字处理、电子表格、演示文稿、绘图、数据库等功能模块。<br>LibreOffice可执行于各种系统平台，包括Microsoft Windows、MacOS及GNU&#x2F;Linux，LibreOffice 也提供了 Android 平台的版本，支持Office文档的浏览和少量的编辑功能。本文介绍在Ubuntu下编译LibreOffice 的Android 版本，生成apk及so文件。</p><p>本文所用编译环境：</p><blockquote><ul><li>Ubuntu 22.04.3 LTS, 64Bit</li><li>gcc&#x2F;g++ 12.3.0，LibreOffice 要求版本12或以上</li><li>jdk 17.0.10，根据Gradle版本而定</li><li>ndk 25.2.9519653，LibreOffice 要求版本23~25</li></ul></blockquote><h2 id="1-下载"><a href="#1-下载" class="headerlink" title="1 下载"></a>1 下载</h2><h3 id="1-1-克隆源代码"><a href="#1-1-克隆源代码" class="headerlink" title="1.1 克隆源代码"></a>1.1 克隆源代码</h3><p>在<a href="https://www.libreofficechina.org/source-code/">LibreOffice中文社区</a>源码介绍页面可以获取到仓库地址，除了<a href="https://git.libreoffice.org/core/">官方仓库</a>外，也提供了<a href="https://git.libreofficechina.org/">国内镜像</a>。<br>使用<code>git clone</code>命令将源码下载下来，源码非常大，大概有4G，如果下载不来下，参考下一节的<code>常见错误解决</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆LibreOffice源码，包括子模块；只克隆最新提交以减少下载内容</span></span><br><span class="line">git <span class="built_in">clone</span> --recurse-submodules --depth=1 https://git.libreoffice.org/core</span><br></pre></td></tr></table></figure><h3 id="1-2-安装jdk"><a href="#1-2-安装jdk" class="headerlink" title="1.2 安装jdk"></a>1.2 安装jdk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看jdk 版本</span></span><br><span class="line">java --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装jdk</span></span><br><span class="line">sudo apt install openjdk-17-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看jdk安装路径</span></span><br><span class="line">update-alternatives --display java</span><br></pre></td></tr></table></figure><h3 id="1-3-安装Android-sdk及NDK"><a href="#1-3-安装Android-sdk及NDK" class="headerlink" title="1.3 安装Android sdk及NDK"></a>1.3 安装Android sdk及NDK</h3><p>官方建议通过下载Android studio 进行安装，打开Ubuntu应用商店通过图形界面安装并打开Android studio，然后选择SDKManager下载Android sdk和ndk。</p><h3 id="1-4-安装c-环境"><a href="#1-4-安装c-环境" class="headerlink" title="1.4 安装c++环境"></a>1.4 安装c++环境</h3><p>c&#x2F;c++的编译环境可以通过build-essential软件包安装，它包含了g++, gcc, make, dpkg-dev,libc6-dev等 构建编译 C&#x2F;C++ 项目必要的编译器、构建工具和常用的库文件。<br> <del><code>sudo apt install build-essential</code></del><br>不过由于这里build-essential默认安装的编译器版本只有11，而LibreOffice要求最低12，因此这里选择手动安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 手动安装gcc 12，g++ 12, make </span></span><br><span class="line">sudo apt install gcc-12 g++-12 make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 update-alternatives 命令将gcc12,g++12设置为默认版本</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 --slave /usr/bin/g++ g++ /usr/bin/g++-12</span><br></pre></td></tr></table></figure><h3 id="1-5-安装其他依赖"><a href="#1-5-安装其他依赖" class="headerlink" title="1.5 安装其他依赖"></a>1.5 安装其他依赖</h3><p>输入以下命令，安装编译LibreOffice需要用到的一些工具和库。执行编译环境检查时报错缺什么工具就补上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install autoconf pkg-config  libfontconfig1-dev gperf python3-dev bison flex ant gettext nasm</span><br></pre></td></tr></table></figure><p>这些工具的主要功能：</p><ul><li>autoconf：自动配置工具，用于生成软件包的配置脚本。</li><li>pkg-config：用于检查系统中安装的库的版本和路径等信息。</li><li>libfontconfig1-dev：Fontconfig库的开发文件，用于构建依赖于Fontconfig的软件。</li><li>gperf：GNU gperf工具，用于生成完美哈希函数。</li><li>python3-dev：Python 3的开发文件，包括头文件和静态库，用于编译依赖Python的软件。</li><li>bison：用于生成解析器的工具。</li><li>flex：用于生成词法分析器的工具。</li><li>ant：Java项目构建工具。</li><li>gettext：用于国际化的工具，包括翻译字符串的工具和库。</li></ul><h2 id="2-编译"><a href="#2-编译" class="headerlink" title="2 编译"></a>2 编译</h2><h3 id="2-1-配置编译选项"><a href="#2-1-配置编译选项" class="headerlink" title="2.1 配置编译选项"></a>2.1 配置编译选项</h3><p>编译过程可以在<code>make</code>命令加上编译参数，也可以通过<code>autogen.input</code>文件来设置编译选项，如不指定则按照默认的编译选项进行。<code>autogen.input</code>文件仅在不存在任何命令行参数时才会生效，完整的编译选项及含义见源代码根目录下的configure文件。</p><p>在项目根目录（源码根目录）使用<code>touch</code>命令新建一个配置文件，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> autogen.input</span><br></pre></td></tr></table></figure><p>添加以下内容，路径相关选项请根据实际情况修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 指定构建的发行版，本例是构建Android平台（armeabi-v7a），因此选择LibreOfficeAndroid</span><br><span class="line"># 更多预设配置参考源码目录/distro-configs文件夹</span><br><span class="line">--with-distro=LibreOfficeAndroid</span><br><span class="line"></span><br><span class="line"># 指定 Android SDK 的路径</span><br><span class="line">--with-android-sdk=/home/zhg/Android/Sdk</span><br><span class="line"></span><br><span class="line"># 指定 Android NDK 的路径</span><br><span class="line">--with-android-ndk=/home/zhg/Android/Sdk/ndk/25.2.9519653</span><br><span class="line"></span><br><span class="line"># 指定 JDK 的安装路径，可通过`update-alternatives --display java`命令查看</span><br><span class="line">--with-jdk-home=/usr/lib/jvm/java-17-openjdk-amd64</span><br><span class="line"></span><br><span class="line"># 启用Android上的实验性编辑功能</span><br><span class="line">--enable-android-editing</span><br><span class="line"></span><br><span class="line"># 启用构建办公开发工具包（Office Development Kit），用于扩展和定制功能</span><br><span class="line">--enable-odk</span><br><span class="line"></span><br><span class="line"># 设置构建平台的 configure 选项，禁用系统 libxml，使用 LibreOffice 提供的 libxml 库</span><br><span class="line">--with-build-platform-configure-options=--without-system-libxml</span><br><span class="line"></span><br><span class="line"># 指定LibreOffice构建过程中需要使用的外部依赖项或源代码的路径</span><br><span class="line">--with-external-tar=/home/zhg/Workplace/LibreOffice/external_tar</span><br><span class="line"></span><br><span class="line"># 启用简体及繁体中文用户界面</span><br><span class="line">--with-lang=zh-CN zh-TW </span><br></pre></td></tr></table></figure><h3 id="2-2-检查编译环境"><a href="#2-2-检查编译环境" class="headerlink" title="2.2 检查编译环境"></a>2.2 检查编译环境</h3><p>在项目根目录下运行autogen.sh脚本，这将会执行检查构建环境、读取autogen.input选项并生成配置脚本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./autogen.sh</span><br></pre></td></tr></table></figure><p>当输出以下内容表示autogen.sh运行无错误，可以进行下一步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">To show information on various make targets and make flags, run:</span><br><span class="line">/usr/bin/make <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line">To just build, run:</span><br><span class="line">/usr/bin/make</span><br></pre></td></tr></table></figure><h3 id="2-3-开始构建"><a href="#2-3-开始构建" class="headerlink" title="2.3 开始构建"></a>2.3 开始构建</h3><p>输入make命令开始构建，编译耗时取决于下载软件包的速度及电脑配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>当输出<code>BUILD SUCCESSFUL</code>表明编译成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 39m 3s</span><br><span class="line">46 actionable tasks: 46 executed</span><br><span class="line">[CUS] android/loandroid3</span><br><span class="line">[BIN] android</span><br><span class="line">[MOD] android</span><br><span class="line">[MOD] libreoffice</span><br><span class="line">[BIN] top level modules: libreoffice</span><br><span class="line">[ALL] top level modules: build-non-l10n-only build-l10n-only</span><br></pre></td></tr></table></figure><p>构建完成的Android so文件在项目目录<code>/android/jniLibs/armeabi-v7a</code>目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">├── libc++_shared.so</span><br><span class="line">├── libfreebl3.so</span><br><span class="line">├── liblo-native-code.so</span><br><span class="line">├── libnspr4.so</span><br><span class="line">├── libnss3.so</span><br><span class="line">├── libnssckbi.so</span><br><span class="line">├── libnssdbm3.so</span><br><span class="line">├── libnssutil3.so</span><br><span class="line">├── libplc4.so</span><br><span class="line">├── libplds4.so</span><br><span class="line">├── libsmime3.so</span><br><span class="line">├── libsoftokn3.so</span><br><span class="line">├── libsqlite3.so</span><br><span class="line">└── libssl3.so</span><br></pre></td></tr></table></figure><h3 id="2-4-打包apk"><a href="#2-4-打包apk" class="headerlink" title="2.4 打包apk"></a>2.4 打包apk</h3><p> LibreOffice 提供了 Android 的示例项目，其主要源码和gradle配置文件位于<code>/android/source</code>，可以导入到Android studio中进行开发和编译，也可以直接使用gradle命令打包出apk。</p><p>定位到<code>android/source</code>文件夹，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译并打Debug包</span></span><br><span class="line">./gradlew assembleDebug</span><br></pre></td></tr></table></figure><p>当输出以下字样表示构建完成，apk位于<code>source/build/outputs/apk/&lt;xxFlavor&gt;/debug</code>下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BUILD SUCCESSFUL <span class="keyword">in</span> 1m 53s</span><br><span class="line">101 actionable tasks: 64 executed, 37 up-to-date</span><br></pre></td></tr></table></figure><h3 id="2-5-导入Android-Studio"><a href="#2-5-导入Android-Studio" class="headerlink" title="2.5 导入Android Studio"></a>2.5 导入Android Studio</h3><p>由于<code>/android/source</code>下的Android项目还依赖的LibreOffic其他目录的源码，这些都是由<code>build.gradle</code>中的任务来控制的，主要是生成Android端的配置和复制资源文件，在Ubuntu下使用<code>./gradlew build</code>构建完生成相应的文件以后，并修改 <code>gradle sourceSets</code>相关路径，即可去掉这些任务，从而将Android 项目从LibreOffice 源码中独立出来，导入到Android Studio。这里还修改了一下目录位置使其更符合Android项目的默认组织结构，源码已上传<a href="https://github.com/kdsunset/LibreOfficeAndroid">Github</a>。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下是这些任务的说明：</span></span><br><span class="line"><span class="comment">//从$&#123;liboInstdir&#125;/$&#123;liboEtcFolder&#125;/types、$&#123;liboInstdir&#125;/share/fonts/truetype目录中</span></span><br><span class="line"><span class="comment">// 复制程序文件和字体文件到assets/unpack目录</span></span><br><span class="line">task copyUnpackAssets(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    description <span class="string">&quot;copies assets that need to be extracted on the device&quot;</span></span><br><span class="line">    into <span class="string">&#x27;assets/unpack&#x27;</span></span><br><span class="line">    into(<span class="string">&#x27;program&#x27;</span>) &#123;</span><br><span class="line">        from(<span class="string">&quot;$&#123;liboInstdir&#125;/$&#123;liboEtcFolder&#125;/types&quot;</span>) &#123;</span><br><span class="line">            includes = [</span><br><span class="line">                    <span class="string">&quot;offapi.rdb&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;oovbaapi.rdb&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        from(<span class="string">&quot;$&#123;liboInstdir&#125;/$&#123;liboUreMiscFolder&#125;&quot;</span>) &#123;</span><br><span class="line">            includes = [<span class="string">&quot;types.rdb&quot;</span>]</span><br><span class="line">            rename <span class="string">&#x27;types.rdb&#x27;</span>, <span class="string">&#x27;udkapi.rdb&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    into(<span class="string">&#x27;user/fonts&#x27;</span>) &#123;</span><br><span class="line">        from <span class="string">&quot;$&#123;liboInstdir&#125;/share/fonts/truetype&quot;</span></span><br><span class="line">        <span class="comment">// Note: restrict list of fonts due to size considerations - no technical reason anymore</span></span><br><span class="line">        <span class="comment">// ToDo: fonts would be good candidate for using Expansion Files instead</span></span><br><span class="line">        includes = [</span><br><span class="line">                <span class="string">&quot;Liberation*.ttf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Caladea-*.ttf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Carlito-*.ttf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;Gen*.ttf&quot;</span>,</span><br><span class="line">                <span class="string">&quot;opens___.ttf&quot;</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    into(<span class="string">&#x27;etc/fonts&#x27;</span>) &#123;</span><br><span class="line">        from <span class="string">&quot;./&quot;</span></span><br><span class="line">        includes = [<span class="string">&#x27;fonts.conf&#x27;</span>]</span><br><span class="line">        filter &#123;</span><br><span class="line">            String line -&gt;</span><br><span class="line">                line.replaceAll(</span><br><span class="line">                        <span class="string">&#x27;@@APPLICATION_ID@@&#x27;</span>, <span class="keyword">new</span> String(<span class="string">&quot;$&#123;android.defaultConfig.applicationId&#125;&quot;</span>)</span><br><span class="line">                )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将$&#123;liboInstdir&#125;/share/config、$&#123;liboInstdir&#125;/program、$&#123;liboInstdir&#125;/share目录中的</span></span><br><span class="line"><span class="comment">// 各种资源文件复制到应用的 assets 目录中，以便在安装后可以访问这些资源</span></span><br><span class="line">task copyAssets(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    description <span class="string">&quot;copies assets that can be accessed within the installed apk&quot;</span></span><br><span class="line">    into <span class="string">&#x27;assets&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// include icons, Impress styles and required .ui files</span></span><br><span class="line">    into (<span class="string">&#x27;share&#x27;</span>) &#123;</span><br><span class="line">        into (<span class="string">&#x27;config&#x27;</span>) &#123;</span><br><span class="line">            from (<span class="string">&quot;$&#123;liboInstdir&#125;/share/config&quot;</span>)</span><br><span class="line">            includes = [<span class="string">&#x27;images_**.zip&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;**/simpress/**.xml&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;**/annotation.ui&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;**/hfmenubutton.ui&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;**/inforeadonlydialog.ui&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;**/pbmenubutton.ui&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;**/scrollbars.ui&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;**/tabbuttons.ui&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;**/tabviewbar.ui&#x27;</span></span><br><span class="line">                        ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    into(<span class="string">&#x27;program&#x27;</span>) &#123;</span><br><span class="line">        from <span class="string">&quot;$&#123;liboInstdir&#125;/program&quot;</span></span><br><span class="line">        includes = [<span class="string">&#x27;services.rdb&#x27;</span>, <span class="string">&#x27;services/services.rdb&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        into(<span class="string">&#x27;resource&#x27;</span>) &#123;</span><br><span class="line">            from <span class="string">&quot;$&#123;liboInstdir&#125;/$&#123;liboSharedResFolder&#125;&quot;</span></span><br><span class="line">            includes = [<span class="string">&#x27;*en-US.res&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    into(<span class="string">&#x27;share&#x27;</span>) &#123;</span><br><span class="line">        from(<span class="string">&quot;$&#123;liboInstdir&#125;/share&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// Filter data is needed by e.g. the drawingML preset shape import.</span></span><br><span class="line">            includes = [<span class="string">&#x27;registry/**&#x27;</span>, <span class="string">&#x27;filter/**&#x27;</span>]</span><br><span class="line">            <span class="comment">// those two get processed by mobile-config.py</span></span><br><span class="line">            excludes = [<span class="string">&#x27;registry/main.xcd&#x27;</span>, <span class="string">&#x27;registry/res/registry_en-US.xcd&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// separate data files for Chinese and Japanese</span></span><br><span class="line">        from(<span class="string">&quot;$&#123;liboWorkdir&#125;/CustomTarget/i18npool/breakiterator/&quot;</span>) &#123;</span><br><span class="line">            include <span class="string">&#x27;*.data&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 LICENSE 和 NOTICE 文件从 $&#123;liboInstdir&#125; 复制到 res_generated/raw 目录，并将它们重命名为 license.txt 和 notice.txt</span></span><br><span class="line">task copyAppResources(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    description <span class="string">&quot;copies documents to make them available as app resources&quot;</span></span><br><span class="line">    into <span class="string">&#x27;res_generated/raw&#x27;</span></span><br><span class="line">    from(<span class="string">&quot;$&#123;liboInstdir&#125;&quot;</span>) &#123;</span><br><span class="line">        includes = [<span class="string">&quot;LICENSE&quot;</span>, <span class="string">&quot;NOTICE&quot;</span>]</span><br><span class="line">        rename <span class="string">&quot;LICENSE&quot;</span>, <span class="string">&quot;license.txt&quot;</span></span><br><span class="line">        rename <span class="string">&quot;NOTICE&quot;</span>, <span class="string">&quot;notice.txt&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将 soffice.cfg 文件从 $&#123;liboInstdir&#125;/share/config/ 复制到 assets_fullUI/share/config/ 目录下</span></span><br><span class="line">task createFullConfig(<span class="attr">type:</span> Copy) &#123;</span><br><span class="line">    <span class="comment">// grab dir to clear whole hierarchy on clean target</span></span><br><span class="line">    outputs.dir <span class="string">&quot;assets_fullUI&quot;</span></span><br><span class="line">    into <span class="string">&#x27;assets_fullUI/share/config/soffice.cfg&#x27;</span></span><br><span class="line">    from <span class="string">&quot;$&#123;liboInstdir&#125;/share/config/soffice.cfg&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建输出目录和文件，以便将处理后的文件和配置保存到正确的位置</span></span><br><span class="line">task createStrippedConfig &#123;</span><br><span class="line">    <span class="keyword">def</span> preserveDir = file(<span class="string">&quot;assets_strippedUI/share/config/soffice.cfg/empty&quot;</span>)</span><br><span class="line">    outputs.dir <span class="string">&quot;assets_strippedUI&quot;</span></span><br><span class="line">    outputs.dir <span class="string">&quot;assets_strippedUI/share/registry/res&quot;</span></span><br><span class="line">    outputs.file preserveDir</span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line">        file(<span class="string">&#x27;assets_strippedUI/share/registry/res&#x27;</span>).mkdirs()</span><br><span class="line">        file(<span class="string">&quot;assets_strippedUI/share/config/soffice.cfg&quot;</span>).mkdirs()</span><br><span class="line">        <span class="comment">// just empty file</span></span><br><span class="line">        preserveDir.text = <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行外部的 Python 脚本 mobile-config.py 来处理main.xcd 配置文件，</span></span><br><span class="line"><span class="comment">// 从而生成一个精简版本的配置文件,输出到assets_strippedUI/share/registry/main.xcd</span></span><br><span class="line">task createStrippedConfigMain(<span class="attr">type:</span> Exec) &#123;</span><br><span class="line">    dependsOn <span class="string">&#x27;createStrippedConfig&#x27;</span></span><br><span class="line">    inputs.files <span class="string">&quot;$&#123;liboInstdir&#125;/share/registry/main.xcd&quot;</span>, <span class="string">&quot;$&#123;liboSrcRoot&#125;/android/mobile-config.py&quot;</span></span><br><span class="line">    outputs.file <span class="string">&quot;assets_strippedUI/share/registry/main.xcd&quot;</span></span><br><span class="line">    executable <span class="string">&quot;$&#123;liboSrcRoot&#125;/android/mobile-config.py&quot;</span></span><br><span class="line">    args = [<span class="string">&quot;$&#123;liboInstdir&#125;/share/registry/main.xcd&quot;</span>, <span class="string">&quot;assets_strippedUI/share/registry/main.xcd&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行外部的 Python 脚本 mobile-config.py 来处理registry_en-US.xcd 配置文件，</span></span><br><span class="line"><span class="comment">// 从而生成一个精简版本的配置文件,输出到assets_strippedUI/share/registry/res/registry_en-US.xcd</span></span><br><span class="line">task createStrippedConfigRegistry(<span class="attr">type:</span> Exec) &#123;</span><br><span class="line">    dependsOn <span class="string">&#x27;createStrippedConfig&#x27;</span></span><br><span class="line">    inputs.files <span class="string">&quot;$&#123;liboInstdir&#125;/share/registry/res/registry_en-US.xcd&quot;</span>, <span class="string">&quot;$&#123;liboSrcRoot&#125;/android/mobile-config.py&quot;</span></span><br><span class="line">    outputs.file <span class="string">&quot;assets_strippedUI/share/registry/res/registry_en-US.xcd&quot;</span></span><br><span class="line">    executable <span class="string">&quot;$&#123;liboSrcRoot&#125;/android/mobile-config.py&quot;</span></span><br><span class="line">    args = [<span class="string">&quot;$&#123;liboInstdir&#125;/share/registry/res/registry_en-US.xcd&quot;</span>, <span class="string">&quot;assets_strippedUI/share/registry/res/registry_en-US.xcd&quot;</span>]</span><br><span class="line">    doFirst &#123;</span><br><span class="line">        file(<span class="string">&#x27;assets_strippedUI/share/registry/res&#x27;</span>).mkdirs()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据 liboSettings.gradle 文件，生成sofficerc, fundamentalrc, unorc, bootstraprc, versionrc等配置文件</span></span><br><span class="line">task createRCfiles &#123;</span><br><span class="line">    inputs.file <span class="string">&quot;liboSettings.gradle&quot;</span></span><br><span class="line">    dependsOn copyUnpackAssets, copyAssets</span><br><span class="line">    <span class="keyword">def</span> sofficerc     = file(<span class="string">&#x27;assets/unpack/program/sofficerc&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> fundamentalrc = file(<span class="string">&#x27;assets/program/fundamentalrc&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> bootstraprc   = file(<span class="string">&#x27;assets/program/bootstraprc&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> unorc         = file(<span class="string">&#x27;assets/program/unorc&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> versionrc     = file(<span class="string">&#x27;assets/program/versionrc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    outputs.files sofficerc, fundamentalrc, unorc, bootstraprc, versionrc</span><br><span class="line"></span><br><span class="line">    doLast &#123;</span><br><span class="line">        sofficerc.text = <span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">            [Bootstrap]</span></span><br><span class="line"><span class="string">            Logo=1</span></span><br><span class="line"><span class="string">            NativeProgress=1</span></span><br><span class="line"><span class="string">            URE_BOOTSTRAP=file:///assets/program/fundamentalrc</span></span><br><span class="line"><span class="string">            HOME=$APP_DATA_DIR/cache</span></span><br><span class="line"><span class="string">            OSL_SOCKET_PATH=$APP_DATA_DIR/cache</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>.stripIndent()</span><br><span class="line"></span><br><span class="line">        fundamentalrc.text =  <span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">            [Bootstrap]</span></span><br><span class="line"><span class="string">            LO_LIB_DIR=file://$APP_DATA_DIR/lib/</span></span><br><span class="line"><span class="string">            BRAND_BASE_DIR=file:///assets</span></span><br><span class="line"><span class="string">            BRAND_SHARE_SUBDIR=share</span></span><br><span class="line"><span class="string">            CONFIGURATION_LAYERS=xcsxcu:$&#123;BRAND_BASE_DIR&#125;/share/registry res:$&#123;BRAND_BASE_DIR&#125;/share/registry</span></span><br><span class="line"><span class="string">            URE_BIN_DIR=file:///assets/ure/bin/dir/nothing-here/we-can/exec-anyway</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>.stripIndent()</span><br><span class="line"></span><br><span class="line">        bootstraprc.text =  <span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">            [Bootstrap]</span></span><br><span class="line"><span class="string">            InstallMode=&lt;installmode&gt;</span></span><br><span class="line"><span class="string">            ProductKey=LibreOffice &#x27;&#x27;&#x27;</span>+ <span class="string">&quot;$&#123;liboVersionMajor&#125;.$&#123;liboVersionMinor&#125;&quot;</span> + <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            UserInstallation=file://$APP_DATA_DIR</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>.stripIndent()</span><br><span class="line"></span><br><span class="line">        unorc.text = <span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">            [Bootstrap]</span></span><br><span class="line"><span class="string">            URE_INTERNAL_LIB_DIR=file://$APP_DATA_DIR/lib/</span></span><br><span class="line"><span class="string">            UNO_TYPES=file://$APP_DATA_DIR/program/udkapi.rdb file://$APP_DATA_DIR/program/offapi.rdb file://$APP_DATA_DIR/program/oovbaapi.rdb</span></span><br><span class="line"><span class="string">            UNO_SERVICES=file:///assets/program/services.rdb file:///assets/program/services/services.rdb</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>.stripIndent()</span><br><span class="line"></span><br><span class="line">        versionrc.text = <span class="string">&#x27;&#x27;&#x27;\</span></span><br><span class="line"><span class="string">            [Version]</span></span><br><span class="line"><span class="string">            AllLanguages=en-US</span></span><br><span class="line"><span class="string">            buildid=&#x27;&#x27;&#x27;</span> + <span class="string">&quot;$&#123;liboGitFullCommit&#125;&quot;</span> + <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            ReferenceOOoMajorMinor=4.1</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>.stripIndent()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-常见错误解决"><a href="#3-常见错误解决" class="headerlink" title="3 常见错误解决"></a>3 常见错误解决</h2><p><strong>3.1 Git clone错误</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">error: RPC 失败。curl 56 GnuTLS recv error (-9): Error decoding the received TLS packet.</span><br><span class="line">error: 预期仍然需要 7923 个字节的正文</span><br><span class="line">fetch-pack: unexpected disconnect <span class="keyword">while</span> reading sideband packet</span><br><span class="line">fatal: 过早的文件结束符（EOF）</span><br><span class="line">fatal: fetch-pack：无效的 index-pack 输出</span><br></pre></td></tr></table></figure><p>解决方法：切换到 SSH 仓库地址或者增加git发送数据的缓冲区大小</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置 Git 全局配置中的 http.postBuffer 参数</span></span><br><span class="line">git config --global http.postBuffer 1024M</span><br></pre></td></tr></table></figure><p><strong>3.2 文件权限相关</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">mkdir</span>: cannot create directory <span class="string">&#x27;/LibreOffice&#x27;</span>: Permission denied</span><br><span class="line">    configure: error: Failed to resolve absolute path.  </span><br><span class="line">or</span><br><span class="line">`/bin/sh: 1: cannot create /LibreOffice/lo-externalsrc-core/fetch.log: Permission denied`</span><br></pre></td></tr></table></figure><p>解决方法：使用<code>chmod -R 777 &lt;root_path&gt;</code>命令赋予读写权限。注意如果该路径如果是定义在<code>autogen.input</code>，检查路径是否在系统根目录下（<code>/</code>），如果是则改到其他目录。普通用户对系统根目录是没有读写权限的。</p><p>也不建议使用root用户进行编译（<code>Building LibreOffice as root is a very bad idea, use a regular user.</code>）。日常操作也应该遵循最小权限原则，少用root账号直接操作。</p><p><strong>3.3 c++环境错误</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure: error: C++ preprocessor <span class="string">&quot;/lib/cpp&quot;</span> fails sanity check</span><br></pre></td></tr></table></figure><p>解决方法：缺少<code>c++</code>编译器，安装<code>gcc</code>及<code>g++</code></p><p><strong>3.4 c++版本太低</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configure: error: GCC 11.4.0 is too old, must be at least GCC 12</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看gcc g++版本</span></span><br><span class="line">gcc --version</span><br><span class="line">g++ --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动安装gcc12 g++12</span></span><br><span class="line">sudo apt-get install gcc-12 g++-12</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 update-alternatives 命令将gcc12,g++12设置为默认版本</span></span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 100 --slave /usr/bin/g++ g++ /usr/bin/g++-12</span><br></pre></td></tr></table></figure><p><strong>3.5 ndk版本不匹配</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* WARNING : Untested Android NDK version 26.2.11394342, only versions 23.* to 25.* have been used successfully. Proceed at your own risk.</span><br></pre></td></tr></table></figure><p>解决：重新安装版本为23~25的ndk。</p><p><strong>3.6 jdk版本太低</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Failed to apply plugin <span class="string">&#x27;com.android.internal.application&#x27;</span>.</span><br><span class="line">   &gt; Android Gradle plugin requires Java 17 to run. You are currently using Java 11.</span><br></pre></td></tr></table></figure><p>解决：Gradle与jdk版本不匹配，按照提示安装对应的jdk版本。</p><p><strong>3.7 缺少某个工具或者库</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configure: error: gperf not found but needed. Install it.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找不到gperf，安装gperf</span></span><br><span class="line">sudo apt install gperf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configure: error: Package requirements (fontconfig &gt;= 2.12.0) were not met:</span><br><span class="line">    No package <span class="string">&#x27;fontconfig&#x27;</span> found</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 需要fontconfig，安装libfontconfig1-dev</span></span><br><span class="line">sudo apt install libfontconfig1-dev</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configure: error: Python headers not found. You probably want to <span class="built_in">set</span> both the PYTHON_CFLAGS and PYTHON_LIBS environment variables.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少 Python 头文件，安装python3-dev</span></span><br><span class="line">sudo apt install python3-dev</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">configure: error: Could not find CUPS. Install libcups2-dev or cups-devel.</span><br><span class="line">Error running configure at ./autogen.sh line 321.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少 CUPS 相关的开发包，安装 libcups2-dev</span></span><br><span class="line">sudo apt install libcups2-dev</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configure: error: msgfmt not found. Install GNU gettext, or re-run without languages.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缺少 msgfmt 工具，安装gettext</span></span><br><span class="line">sudo apt install gettext</span><br></pre></td></tr></table></figure><p><strong>3.8 OpenSSL被禁用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* WARNING : OpenSSL has been disabled. No code compiled here will make use of it but system libraries may create indirect dependencies</span><br></pre></td></tr></table></figure><p> 项目根目录打开configure.ac文件，将openssl、nss设置为enable。OpenSSL 是默认的 TLS&#x2F;SSL 实现，但仍然可能存在一些依赖于 NSS 的代码，因此把nss也打开。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">sub_conf_defaults=&quot; \</span><br><span class="line">        --build=&quot;$build_alias&quot; \</span><br><span class="line">        --disable-cairo-canvas \</span><br><span class="line">        --disable-cups \</span><br><span class="line">        --disable-customtarget-components \</span><br><span class="line">        --disable-firebird-sdbc \</span><br><span class="line">        --disable-gpgmepp \</span><br><span class="line">        --disable-gstreamer-1-0 \</span><br><span class="line">        --disable-gtk3 \</span><br><span class="line">        --disable-gtk4 \</span><br><span class="line">        --disable-libcmis \</span><br><span class="line">        --disable-mariadb-sdbc \</span><br><span class="line">        --enable-nss \</span><br><span class="line">        --disable-online-update \</span><br><span class="line">        --disable-opencl \</span><br><span class="line">        --enable-openssl \</span><br><span class="line">        --disable-pdfimport \</span><br><span class="line">        --disable-postgresql-sdbc \</span><br><span class="line">        --disable-skia \</span><br><span class="line">        --disable-xmlhelp \</span><br><span class="line">        --enable-dynamic-loading \</span><br><span class="line">        --enable-icecream=&quot;$enable_icecream&quot; \</span><br><span class="line">        --without-doxygen \</span><br><span class="line">        --without-tls \</span><br><span class="line">        --without-webdav \</span><br><span class="line">        --without-x \</span><br></pre></td></tr></table></figure><p>如果提示<code>No package &#39;nss&#39; &#39;nss&#39;found</code>,则先通过以下命令安装它们。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libnss3-dev libnspr4-dev</span><br></pre></td></tr></table></figure><p><strong>3.9 Gradle Build 报错</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/home/zhg/zhg/core/android/source/src/java/org/libreoffice/SettingsActivity.java:33: 错误: 找不到符号</span><br><span class="line">            <span class="keyword">if</span>(!BuildConfig.ALLOW_EDITING) &#123;</span><br><span class="line">                           ^</span><br><span class="line">  符号:   变量 ALLOW_EDITING</span><br><span class="line">  位置: 类 BuildConfig</span><br><span class="line"></span><br><span class="line">/home/zhg/zhg/core/android/source/src/java/org/mozilla/gecko/gfx/SubdocumentScrollHelper.java:38: 警告: [deprecation] Handler中的Handler()已过时</span><br><span class="line">        mUiHandler = new Handler();</span><br><span class="line">                     ^</span><br><span class="line">...                     </span><br><span class="line">3 个错误</span><br><span class="line">78 个警告</span><br><span class="line"></span><br><span class="line">FAILURE: Build failed with an exception.</span><br><span class="line"></span><br><span class="line">* What went wrong:</span><br><span class="line">Execution failed <span class="keyword">for</span> task <span class="string">&#x27;:compileFullUIDebugJavaWithJavac&#x27;</span>.</span><br><span class="line">&gt; Compilation failed; see the compiler error output <span class="keyword">for</span> details.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决：根据具体报错修复，最好导入Android studio 方便查定和定位，这里报错<code>BuildConfig.ALLOW_EDITING</code>找不到，<br>打开<code>build.gradle</code>文件，可以看到项目配置了三个flavor：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        strippedUI &#123;</span><br><span class="line">            dimension <span class="string">&quot;default&quot;</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;ALLOW_EDITING&#x27;</span>, <span class="string">&#x27;false&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        strippedUIEditing &#123;</span><br><span class="line">            dimension <span class="string">&quot;default&quot;</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;ALLOW_EDITING&#x27;</span>, <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        fullUI.dimension <span class="string">&quot;default&quot;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以选择其中一个变体，例如<code>strippedUI</code>。重新使用<code>./gradlew assembleStrippedUIDebug</code>命令打包apk，当看到<code>BUILD SUCCESSFUL</code>说明打包成功，apk输出文件在<code>/build/outputs/apk/strippedUI/debug</code>目录下。</p><p>或者将fullUI变体增加<code>ALLOW_EDITING</code>字段:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">        strippedUI &#123;</span><br><span class="line">            dimension <span class="string">&quot;default&quot;</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;ALLOW_EDITING&#x27;</span>, <span class="string">&#x27;false&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        strippedUIEditing &#123;</span><br><span class="line">            dimension <span class="string">&quot;default&quot;</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;ALLOW_EDITING&#x27;</span>, <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        fullUI&#123;</span><br><span class="line">            dimension <span class="string">&quot;default&quot;</span></span><br><span class="line">            buildConfigField <span class="string">&#x27;boolean&#x27;</span>, <span class="string">&#x27;ALLOW_EDITING&#x27;</span>, <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重新使用<code>./gradlew assembleDebug</code>编译和打包所有变体。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://www.libreofficechina.org/how-to-build-libreoffice-zh-cn/">如何编译 LibreOffice - LibreOffice中文社区</a><br>[2] <a href="https://wiki.documentfoundation.org/Development/BuildingForAndroid">Development&#x2F;BuildingForAndroid - The Document Foundation Wiki</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LibreOffice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于nginx搭建v2ray服务端配置vmess tls websocket</title>
      <link href="/ngiv2ray/"/>
      <url>/ngiv2ray/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><ul><li>vps：一台在墙外的vps服务器，它能自由上网</li><li>v2ray：负责你的网络与vps之间的网络通讯</li><li>VMess：一个加密传输协议，通常作为 V2Ray 客户端和服务器之间的桥梁。</li><li>nginx：作为web服务器，负载均衡服务器，邮件服务器等，本例用到web服务器功能部署网站</li><li>websock：一个传输协议，支持全双工，大概用来客户端与服务端中传输数据包</li><li>tls：传输层安全协议，用来加密http</li><li>流程：{浏览器} &lt;–(socks) {V2Ray 客户端 inbound &lt;-&gt; V2Ray 客户端 outbound} &lt;–(VMess)–&gt;  {V2Ray 服务器 inbound &lt;-&gt; V2Ray 服务器 outbound} &lt;–(Freedom)–&gt; {目标网站}–&gt;</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR;</span><br><span class="line">    A[用户浏览器] --&gt;|请求访问| B(域名解析到VPS IP);</span><br><span class="line">    B --&gt;|443端口| C[Nginx];</span><br><span class="line">    C --&gt;|WebSocket| D[v2ray];</span><br><span class="line">    D --&gt;|TLS| E[网络];</span><br><span class="line">    E --&gt;|请求Google等网站| F[Google等网站];</span><br></pre></td></tr></table></figure><p><strong>大致步骤：</strong></p><ul><li>1.购买vps，获得root用户名及密码，ssh端口等信息</li><li>2.登录vps，使用到Xshell软件等，有免费版</li><li>3.安装和配置v2ray等软件，完成搭建</li><li>4.终端配置v2ray信息</li></ul><h2 id="1-购买vps和域名"><a href="#1-购买vps和域名" class="headerlink" title="1 购买vps和域名"></a>1 购买vps和域名</h2><p><strong>1. 选择vps服务商</strong><br>购买虚拟服务器，注意海外服务器ip也有被墙封的风险。</p><blockquote><ul><li><a href="https://bandwagonhost.com/">https://bandwagonhost.com/</a></li><li><a href="https://www.vultr.com/">https://www.vultr.com/</a></li><li><a href="https://www.racknerd.com/%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89">https://www.racknerd.com/（推荐）</a></li></ul></blockquote><p>本例用的是racknerd服务商，vps用的系统是debian 10</p><p><strong>2.选服务器位置</strong></p><ul><li>服务器位置首选美国西海岸的 Los Angeles、或者亚洲的东京、新加坡，当然其它国家地区都可以尝试，</li><li>可通过cmd窗口ping指令测速，time越小越好</li></ul><p><strong>3.选操作系统</strong><br>Debian 10 x 64等稳定的</p><p>之后就是选服务器配置（看价格），支付等。购买完成将得到VPS的IP地址、SSH端，vps控制台账密，root用户及密码等信息。</p><h3 id="1-2-购买域名"><a href="#1-2-购买域名" class="headerlink" title="1.2 购买域名"></a>1.2 购买域名</h3><p><strong>1.申请域名</strong><br>本例用的是<a href="https://www.namesilo.com/%EF%BC%8C%E7%94%B3%E8%AF%B7%E7%9A%84%E5%9F%9F%E5%90%8D%EF%BC%9Aijiumi.top">https://www.namesilo.com/，申请的域名：ijiumi.top</a></p><p><strong>2.域名解析</strong><br>就是将你的域名指向你的服务器ip地址，绑定了才可以通过域名访问你的网站，步骤如下：</p><ol><li>在namesilo管理后台点击域名，点击更新DNS记录。</li><li>删除默认的dns记录。</li><li>添加A类型的www和@两条记录到你的vps ip地址，配置完dns记录后可能需要一点时间才能生效。</li></ol><table><thead><tr><th>HOSTNAME</th><th>TYPE</th><th>ADDRESS</th></tr></thead><tbody><tr><td></td><td>A</td><td>购买的vps地址</td></tr><tr><td>www</td><td>A</td><td>购买的vps地址</td></tr></tbody></table><p><strong>3.修改namesilo的DNS服务器为Cloudflare（可选）</strong><br>可以为你的域名cdn加速（看情况）和隐藏你的真实服务器ip地址。注册登录cloudflare账号，添加你要加速的网站，选择免费版，修改dns记录，到namesilo后台修改nameservers为Clodflare提供给你的dns服务器地址</p><!--**4.域名续费/每年**--><h1 id="2-安装和配置"><a href="#2-安装和配置" class="headerlink" title="2 安装和配置"></a>2 安装和配置</h1><p>使用Xshell等ssh工具登录vps</p><h3 id="2-1-安装v2ray"><a href="#2-1-安装v2ray" class="headerlink" title="2.1 安装v2ray"></a>2.1 安装v2ray</h3><p><a href="https://www.v2ray.com/chapter_00/install.html">v2ray官网</a><br><strong>1.下载安装v2ray</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如未安装curl，先安装</span></span><br><span class="line">sudo apt install curl</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用curl安装v2ray，这里用到官网的安装脚本</span></span><br><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh)</span><br></pre></td></tr></table></figure><p><strong>2.配置v2ray服务端</strong><br>打开config的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件</span></span><br><span class="line">vi /usr/local/etc/v2ray/config.json</span><br></pre></td></tr></table></figure><p>添加以下内容，其中：</p><ul><li>id：uuid，v2ray认证的凭证，相当于配置密码，不要泄露。可以使用<code>cat /proc/sys/kernel/random/uuid</code>命令生成一个。</li><li>port：端口号随意，只要不冲突</li><li>alterId：可以配置成0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;log&quot;: &#123;</span><br><span class="line">        &quot;access&quot;: &quot;/var/log/v2ray/access.log&quot;,</span><br><span class="line">        &quot;error&quot;: &quot;/var/log/v2ray/error.log&quot;,</span><br><span class="line">        &quot;loglevel&quot;: &quot;warning&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;inbounds&quot;: [&#123;</span><br><span class="line">            &quot;port&quot;: 23333,</span><br><span class="line">            &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">            &quot;settings&quot;: &#123;</span><br><span class="line">                &quot;clients&quot;: [&#123;</span><br><span class="line">                        &quot;id&quot;: &quot;c51b2a76-ebfa-4e06-b767-3da42f6e482b&quot;,</span><br><span class="line">                        &quot;level&quot;: 1,</span><br><span class="line">                        &quot;alterId&quot;: 0</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;streamSettings&quot;: &#123;</span><br><span class="line">                &quot;network&quot;: &quot;ws&quot;,</span><br><span class="line">                &quot;wsSettings&quot;: &#123;</span><br><span class="line">                    &quot;path&quot;: &quot;/tech&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    &quot;outbounds&quot;: [&#123;</span><br><span class="line">            &quot;protocol&quot;: &quot;freedom&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>3.设置v2ray开机自启</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动并加入开机自启</span></span><br><span class="line">systemctl start v2ray;systemctl <span class="built_in">enable</span> v2ray</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看v2ray是否运行等状态</span></span><br><span class="line">systemctl status v2ray</span><br></pre></td></tr></table></figure><h3 id="2-2-安装nginx和部署静态网站"><a href="#2-2-安装nginx和部署静态网站" class="headerlink" title="2.2 安装nginx和部署静态网站"></a>2.2 安装nginx和部署静态网站</h3><p><strong>1.新建一个静态网页，路径自选</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /honme/www/ijiumi-top</span><br><span class="line">vi /honme/www/ijiumi-top/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可用需要修改网站文件夹访问权限</span></span><br><span class="line"><span class="built_in">chmod</span>  -R 777 /home/www </span><br></pre></td></tr></table></figure><p>网页内容任意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">   &lt;title&gt;建设中...&lt;/title&gt;</span><br><span class="line">   &lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;</span><br><span class="line">    &lt;body bgcolor=&quot;#E6E6FA&quot;&gt;</span><br><span class="line">        &lt;h1&gt;Hi，欢迎访问ijiumi.top&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>2.下载nginx</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install -y nginx</span><br></pre></td></tr></table></figure><p><strong>3.配置Nginx</strong><br>使用命令<code>nginx -t</code>查看nginx默认配置路径，返回形如<code>/etc/nginx/nginx.conf</code>的路径，<br><code>nginx.conf</code>是nginx的主配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看nginx默认配置路径nginx.conf</span></span><br><span class="line">nginx -t</span><br></pre></td></tr></table></figure><p>为了方便管理多个配置，使用命令<code>vim /etc/nginx/nginx.conf </code>打开nginx.conf文件输入以下内容，将包含conf.d目录下所有以 .conf 结尾的文件作为配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在http 块下增加:</span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br></pre></td></tr></table></figure><p>在conf.d 文件夹下新建配置文件，例如<code>vim /etc/nginx/conf.d/ijiumi-top.conf</code>，添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#一份有效的配置</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80 ;</span><br><span class="line">    listen [::]:80 ;</span><br><span class="line">    server_name ijiumi.top;</span><br><span class="line">    index index.html;</span><br><span class="line">    root /honme/www/ijiumi-top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4. 启动或刷新nginx查看效果</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动nginx并添加开机自启</span></span><br><span class="line">systemctl start nginx;systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新nginx配置</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>此时可以用http方式访问你的网站了，例如http:ijiumi.top</p><h3 id="2-3-安装certbot并申请ssl证书"><a href="#2-3-安装certbot并申请ssl证书" class="headerlink" title="2.3 安装certbot并申请ssl证书"></a>2.3 安装certbot并申请ssl证书</h3><p><strong>1.安装snap软件和certbot</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装snap软件</span></span><br><span class="line">apt install -y snapd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查一下snap版本</span></span><br><span class="line">snap install core; snap refresh core</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装certbot</span></span><br><span class="line">snap install --classic certbot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建软链</span></span><br><span class="line"><span class="built_in">ln</span> -s /snap/bin/certbot /usr/bin/certbot</span><br></pre></td></tr></table></figure><p><strong>2.申请https证书</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certbot --nginx</span><br></pre></td></tr></table></figure><p>首次申请需要输入你的邮箱,以及你要申请证书的域名（就是刚才申请的域名），完成后会有successful提示，并且配置会被修改，此时就可以通过https访问你的域名。</p><p><strong>3.证书管理</strong><br>certbot会自动配置自动续期，输入以下命令查看证书有效期及续订情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看证书有效期</span></span><br><span class="line">certbot certificates</span><br><span class="line"></span><br><span class="line"><span class="comment"># certbot会自动配置自动续期，使用以下指令模拟续订是否生效</span></span><br><span class="line">certbot renew --dry-run</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除失效证书，在列出所有证书中输入要删除哪个的序号，然后回车即可</span></span><br><span class="line">certbot delete</span><br></pre></td></tr></table></figure><p>经过certbot配置后，nginx配置会自动添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    server_name ijiumi.top;</span><br><span class="line">    index index.html;</span><br><span class="line">    root /home/www/ijiumi-top;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl; # managed by Certbot</span><br><span class="line">    listen [::]:443;</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/ijiumi.top/fullchain.pem; # managed by Certbot</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/ijiumi.top/privkey.pem; # managed by Certbot</span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</span><br><span class="line">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">    if ($host = ijiumi.top) &#123;</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">    &#125; # managed by Certbot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80; </span><br><span class="line">    server_name ijiumi.top;</span><br><span class="line">    return 404; # managed by Certbot</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置解释</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 80;  # 指定端口，nginx默认端口为80</span><br><span class="line">    server_name domain.com;  # 指定域名</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /home/ubuntu/domain-com;  # 指定静态网站根目录</span><br><span class="line">        index index.html;  # 指定默认访问的文件</span><br><span class="line">        # Nginx 支持 rewrite 功能：</span><br><span class="line">        # 访问网址链接时自动追加 .html 后缀（这样，访问网址时就可以不用 .html 后缀）</span><br><span class="line">        if (!-e $request_filename)&#123;</span><br><span class="line">           rewrite ^(.*)$ /$1.html last;</span><br><span class="line">           break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # Nginx 支持 rewrite 功能：</span><br><span class="line">    # 可以将默认 80 端口的 HTTP 请求重定向为 HTTPS（可选项，可以不配置）。</span><br><span class="line">    rewrite ^(.*)$ https://$host$1 permanent; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 腾讯云 https 访问配置</span><br><span class="line">server &#123;</span><br><span class="line">    #SSL 访问端口号为 443</span><br><span class="line">    #listen 443;</span><br><span class="line">    #启用 SSL 功能</span><br><span class="line">    #ssl on;</span><br><span class="line">    # 由于版本问题，配置文件可能存在不同的写法。此处需要使用 listen 443 ssl 代替以上写法</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    #填写绑定证书的域名</span><br><span class="line">    server_name domain.com;</span><br><span class="line">    #证书文件名称（此处的证书文件放在 /etc/nginx/ssl-nginx-qcloud 目录下）</span><br><span class="line">    ssl_certificate ./ssl-nginx-qcloud/1_domain.com_bundle.crt;</span><br><span class="line">    #私钥文件名称（此处的私钥文件放在 /etc/nginx/ssl-nginx-qcloud 目录下）</span><br><span class="line">    ssl_certificate_key ./ssl-nginx-qcloud/2_domain.com.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    #请按照以下协议配置</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准（照抄即可不用修改）。</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    location / &#123;</span><br><span class="line">        #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span><br><span class="line">        root /home/ubuntu/domain-com;</span><br><span class="line">        #指定默认访问的文件</span><br><span class="line">        index index.html;</span><br><span class="line">        # Nginx 支持 rewrite 功能：</span><br><span class="line">        # 访问网址链接时自动追加 .html 后缀（这样，访问网址时就可以不用 .html 后缀）。</span><br><span class="line">        if (!-e $request_filename)&#123;</span><br><span class="line">           rewrite ^(.*)$ /$1.html last;</span><br><span class="line">           break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-4-添加v2ray转发"><a href="#2-4-添加v2ray转发" class="headerlink" title="2.4 添加v2ray转发"></a>2.4 添加v2ray转发</h3><p>打开nginx配置中添加v2ray转发内容，重启nginx</p><p>以下是一份有效的最终配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    server_name ijiumi.top;</span><br><span class="line">    index index.html;</span><br><span class="line">    root /home/www/ijiumi-top;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl; # managed by Certbot</span><br><span class="line">    listen [::]:443;</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/ijiumi.top/fullchain.pem; # managed by Certbot</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/ijiumi.top/privkey.pem; # managed by Certbot</span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</span><br><span class="line">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot</span><br><span class="line"></span><br><span class="line">    ## 添加这部分内容,23333对应/usr/local/etc/v2ray/config.json 里面inbounds端口</span><br><span class="line">    ## /tech客户端配置的时候需要,对应/usr/local/etc/v2ray/config.json streamSettings里的path</span><br><span class="line">    location /tech &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_pass http://127.0.0.1:23333;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">        proxy_set_header Host $http_host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server&#123;</span><br><span class="line">    if ($host = ijiumi.top) &#123;</span><br><span class="line">        return 301 https://$host$request_uri;</span><br><span class="line">    &#125; # managed by Certbot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80; </span><br><span class="line">    server_name ijiumi.top;</span><br><span class="line">    return 404; # managed by Certbot</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-同步服务器时间"><a href="#2-5-同步服务器时间" class="headerlink" title="2.5 同步服务器时间"></a>2.5 同步服务器时间</h3><p>使用 V2Ray 要保证时间准确，安装ntp服务以同步服务器的系统时间。<br>客户端的时区不一定需要和服务器相同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ntpdate</span></span><br><span class="line">apt-get install ntpdate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查ntp服务是否启动</span></span><br><span class="line">service --status-all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步网络时间，不通的话用镜像源 ntpdate ntp1.aliyun.com</span></span><br><span class="line">ntpdate ntp.api.bz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启（可选）</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>其他一些可能用到的命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入root</span></span><br><span class="line">su root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改root账号密码</span></span><br><span class="line">passwd root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看时间</span></span><br><span class="line"><span class="built_in">date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看时区</span></span><br><span class="line"><span class="built_in">cat</span> /etc/timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line">sudo <span class="built_in">rm</span> -f /etc/localtime</span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从服务器上传和下载文件：安装lrzsz</span></span><br><span class="line">apt install -y lrzsz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传到服务器</span></span><br><span class="line">rz fileName</span><br><span class="line"><span class="comment"># 从服务器下载到电脑</span></span><br><span class="line">sz fileName</span><br><span class="line"></span><br><span class="line"><span class="comment"># vim使用：vi指令打开文件，命令模式：esc键；输入模式：i键；s键；保存&quot;:w&quot;,退出&quot;:q&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3设置客户端"><a href="#3设置客户端" class="headerlink" title="3设置客户端"></a>3设置客户端</h2><p>V2Ray Windows 的客户端可以使用<a href="https://github.com/v2ray/v2ray-core">v2ray-core</a>（官方客户端，命令行方式）。也可以使用<a href="https://github.com/2dust/v2rayN">v2rayN</a>（基于 v2ray-core的辅助工具，带图形化的界面），相应的Android平台上的客户端app可以使用<a href="https://github.com/2dust/v2rayNG">v2rayNG</a>。</p><p>这里Windows 的v2rayN-6.42版本为例，运行v2rayN客户端，在v2rayN主界面下方<code>系统代理</code>模式选择<code>自动配置系统代理</code>，<code>路由</code>建议选择<code>绕过大陆（Whitelist）</code>。<br>在菜单栏选择<code>添加[VMESS]服务器</code>新建一个配置,根据以下内容进行填写，配置完后选择<code>设置为活动服务器</code>即可。</p><ul><li>别名：任意</li><li>地址：服务器主机地址，即vps IP地址</li><li>端口：443</li><li>用户id：服务器v2ray的config配置的id</li><li>额外ID：现在默认0</li><li>加密方式：auto</li><li>传输协议：ws</li><li>伪装类型：nore</li><li>伪装域名：空</li><li>路径：&#x2F;tech，与服务器配置保持一致</li><li>传输安全：tls，跳过证书验证true</li></ul><p>当Windows配置完成后，可以右键选择<code>批量导出分享URL至剪切板</code>将配置以Base64字符串的形式导出到剪切板，之后可以一键配置到手机或者其他客户端。</p><h2 id="4-优化（可选）"><a href="#4-优化（可选）" class="headerlink" title="4 优化（可选）"></a>4 优化（可选）</h2><h3 id="4-1-开启-Google-BBR加速"><a href="#4-1-开启-Google-BBR加速" class="headerlink" title="4.1 开启 Google BBR加速"></a>4.1 开启 Google BBR加速</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Debian 9可以直接通过参数开启Google BBR，设置过程如下(我是使用root用户操作的)：</span><br><span class="line">1.修改系统变量,如果你是root用户执行:</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">2.保存，使更改生效</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line">3.查看内核是否已开启BBR</span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line"></span><br><span class="line">显示以下即已开启：</span><br><span class="line"><span class="comment"># sysctl net.ipv4.tcp_available_congestion_control</span></span><br><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br><span class="line"></span><br><span class="line">4.查看BBR是否启动</span><br><span class="line">lsmod | grep bbr</span><br><span class="line">5.显示以下即启动成功</span><br><span class="line">tcp_bbr                20480  17</span><br><span class="line"></span><br><span class="line">6.重启系统</span><br><span class="line">reboot</span><br><span class="line"></span><br></pre></td></tr></table></figure><!--* 隐藏真实IP，解决人机验证    * 方法一：换IP，还是有可能被封，治标不治本    * 方法二：使用IPv6地址，需要买支持IPv6的VPS    * 方法三：使用IPv6隧道，比如使用tunnelbroker的免费隧道，但是很多隧道也被Google封了    * 方法四：Cloudflare WARP 给 Linux VPS 云服务器添加原生 IPv4/IPv6 双栈网络        * 教程一：安装warp解决Google搜索出现人机验证、解锁Netfix非自制剧最新教程（https://www.4spaces.org/warp-netflix-google-code-solved/）         * 教程二：Cloudflare WARP 一键安装脚本 使用教程（https://p3terx.com/archives/cloudflare-warp-configuration-script.html/comment-page-2#comments）            * 一键使用脚本：bash <(curl -fsSL git.io/warp.sh) d            * 禁用WARP WireGuard服务:systemctl disable wg-quick@wgcf --now            * 网络异常时重启：systemctl restart wg-quick@wgcf            * 做好备份，避免被官方封--><h3 id="4-2-使用cloudflare中转流量，隐藏真实IP"><a href="#4-2-使用cloudflare中转流量，隐藏真实IP" class="headerlink" title="4.2 使用cloudflare中转流量，隐藏真实IP"></a>4.2 使用cloudflare中转流量，隐藏真实IP</h3><p>使用cloudflare（CF）进行cdn中转可以隐藏服务器的真实ip，能防止ip被墙，但是cloudflare免费套餐可能有一定延迟，比vps直接连慢。这就看情况取舍，一般除非服务器ip被墙，否则不需要上cdn。</p><h2 id="5-报错"><a href="#5-报错" class="headerlink" title="5 报错"></a>5 报错</h2><p><strong>1.vmess md5 认证信息弃用</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">invalid user: VMessAEAD is enforced and a non VMessAEAD connection is received.</span><br></pre></td></tr></table></figure><p>解决方法：</p><ul><li>方法一：配置 alterId 为0 </li><li>方法二：禁用vmessaead，设置环境变量 v2ray.vmess.aead.forced &#x3D; false<br>输入指令<code>vi  cat /etc/systemd/system/v2ray.service</code>，添加环境变量设置,并重启v2ray <code>systemctl daemon-reload;v2ray restart</code><br>配置如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=V2Ray Service</span><br><span class="line">Documentation=https://www.v2fly.org/</span><br><span class="line">After=network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># 添加了以下语句，修改环境变量，本例生效</span></span><br><span class="line">Environment=<span class="string">&quot;V2RAY_VMESS_AEAD_FORCED=false&quot;</span></span><br><span class="line">User=nobody</span><br><span class="line">CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">NoNewPrivileges=<span class="literal">true</span></span><br><span class="line"><span class="comment"># 添加了以下语句，修改环境变量，本例不生效</span></span><br><span class="line"><span class="comment">#ExecStart=/usr/local/bin/v2ray -config /usr/local/etc/v2ray/config.json</span></span><br><span class="line">ExecStart=/usr/bin/env v2ray.vmess.aead.forced=<span class="literal">false</span> /usr/local/bin/v2ray -config /usr/local/etc/v2ray/config.json</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><strong>2.找不到AppArmor 配置</strong><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">missing profile snap.certbot.certbot.Please make sure that the snapd.apparmor service is enabled and started**</span><br></pre></td></tr></table></figure><br>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> apparmor</span><br><span class="line">systemctl start apparmor</span><br></pre></td></tr></table></figure><p><strong>3.超时或者一个客户端可以用，另一个不可以</strong><br>注意同步一下服务器时间以及客户端时间</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://www.v2ray.com/">v2ray官网</a><br>[2] <a href="https://www.4spaces.org/1406.html">v2ray搭建过程图文教程</a> </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> v2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下编译AOSP源码</title>
      <link href="/ubaosp13/"/>
      <url>/ubaosp13/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>AOSP是谷歌维护的一个开源项目，它包含了Android系统的源码和功能。</p><p>狭义的Android系统是谷歌的一个商标，除了包括asop的源码部分，还包括手机处理器、摄像头等硬件所需的固件等内核设备驱动，以及要谷歌移动服务（GSM、如Chrome、Google Play等等。其他第三方厂商在AOSP的基础上构建出自己的RoM，获得Android商标的授权后也可以标注Android的字样。</p><p>编译完AOSP后，可以导入Android studio进行阅读学习、修改和调试。谷歌提供了的nexus和pixel手机的硬件驱动代码，它们是使用AOSP作为原生系统，因此我们如果有nexus和pixel手机也可以对AOSP进行定制并刷到设备上。</p><h4 id="编译配置要求"><a href="#编译配置要求" class="headerlink" title="编译配置要求"></a>编译配置要求</h4><blockquote><ul><li>16 GB 以上的内存，越大越好，这里是指构建过程的可用内存， Google 建议提供 64 GB。</li><li>400G以上可用磁盘空间。代码占150-200GB，构建产物占150多G，重复构建占用更多</li><li>Ubuntu 18.04 以上，64位。官方现已不再支持在 Windows 或 MacOS 上进行构建。</li></ul></blockquote><p>以下以获取android-13.0.0_r44源码为例：</p><h2 id="1-搭建编译环境"><a href="#1-搭建编译环境" class="headerlink" title="1 搭建编译环境"></a>1 搭建编译环境</h2><h3 id="1-1-检查JDK环境"><a href="#1-1-检查JDK环境" class="headerlink" title="1.1 检查JDK环境"></a>1.1 检查JDK环境</h3><p>在Ubuntu请使用OpenJDK，如果是AOSP的master分支会自带OpenJDK，其他版本需要自行安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查jdk版本，如果提示找不到命令 “java”字样说明未安装</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装jdk</span></span><br><span class="line">sudo apt install openjdk-11-jdk</span><br></pre></td></tr></table></figure><h3 id="1-2-检查python环境"><a href="#1-2-检查python环境" class="headerlink" title="1.2 检查python环境"></a>1.2 检查python环境</h3><p>Ubuntu 自 16.04 版本已经默认预装python3，如果变异过程中报错&#96;找不到命令 “python”，只需要建立一个python的链接即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过软链接将python命令默认指向python3</span></span><br><span class="line">sudo <span class="built_in">ln</span> -s /usr/bin/python3 /usr/bin/python</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 python 版本 </span></span><br><span class="line">python --version</span><br></pre></td></tr></table></figure><h3 id="1-3-安装基础软件包"><a href="#1-3-安装基础软件包" class="headerlink" title="1.3 安装基础软件包"></a>1.3 安装基础软件包</h3><p>这条命令一次性安装了常用软件包例如git、curl、zip、unzip以及其他开发工具和库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git-core gnupg flex bison build-essential zip curl zlib1g-dev libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig</span><br></pre></td></tr></table></figure><p>其中Git安装完还需配置一下用户信息，否则在使用repo拉取代码时会被拒绝。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置Git的用户名</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line"><span class="comment"># 配置邮箱</span></span><br><span class="line">git config --global user.email you@example.com</span><br></pre></td></tr></table></figure><h3 id="1-4-安装Repo"><a href="#1-4-安装Repo" class="headerlink" title="1.4 安装Repo"></a>1.4 安装Repo</h3><p>Repo是Google专门用来管理Android大型源码库的一个工具，比如AOSP项目。<br>简单说就是一个封装了Git命令的python脚本，用以简化跨多个Git仓库的代码管理和同步。通过 Repo，你可以在一个命令行中对所有仓库进行同步、检出特定的分支、以及执行其他 Git 操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装repo</span></span><br><span class="line">sudo apt install repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看repo版本(是否安装成功)</span></span><br><span class="line">repo version</span><br></pre></td></tr></table></figure><h2 id="2-下载AOSP源码"><a href="#2-下载AOSP源码" class="headerlink" title="2 下载AOSP源码"></a>2 下载AOSP源码</h2><p>Android 源代码树位于由 Google 托管的 Git 代码库中，因此我们可以通过Git(Repo)下载源码。</p><h3 id="2-1-官方同步方式"><a href="#2-1-官方同步方式" class="headerlink" title="2.1 官方同步方式"></a>2.1 官方同步方式</h3><p>这种方式对网络有一定要求，更推荐使用镜像站提供的初始化包的方式。</p><p><strong>（1）初始化Repo并指定代码库地址</strong><br>使用<code>mkdir &lt;dirName&gt;</code>命令或右键创建文件夹，作为AOSP的根目录。在该目录下打开终端，输入以下命令进行仓库的初始化，指定源和AOSP版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从Google下载Android13源码</span></span><br><span class="line">repo init -u https://android.googlesource.com/platform/manifest -b android-13.0.0_r44</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从镜像站下载android-13.0.0_r44源码</span></span><br><span class="line">repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-13.0.0_r44</span><br></pre></td></tr></table></figure><p>命令说明：<code>repo init -u &lt;url&gt; -b &lt;branch&gt;</code>会获取最新版本的 Repo 及其最新的 bug 修复。执行命令后创建一个 .repo&#x2F; 目录，其中包含存放 Repo 源代码和标准 Android 清单文件的 Git 代码库。其中可以通过-b 来指定相应分支，可以从谷歌使用文档-关于-<a href="https://source.android.com/docs/setup/about/build-numbers?hl=zh-cn#source-code-tags-and-builds">源代码标记和build分类</a>中，根据设备型号和Android版本号来选择标记（分支）。</p><p>如果谷歌服务器被墙，可以设置科学上网，或者从<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">清华大学镜像站</a>、<a href="https://mirrors.ustc.edu.cn/help/aosp.html">中科大镜像</a>等镜像源中获取。</p><p>部分AOSP的标记和 build源码版本标记：</p><table><thead><tr><th>Build ID</th><th>标记</th><th>版本</th><th>更新日期</th></tr></thead><tbody><tr><td>TQ2A.230505.002.A1</td><td>android-13.0.0_r44</td><td>Android13</td><td>2023-05-05</td></tr><tr><td>9575282</td><td>android-security-13.0.0_r3</td><td>Android13</td><td>2022-08-05</td></tr><tr><td>SP1A.210812.016.A1</td><td>android-12.0.0_r3</td><td>Android12</td><td>2021-10-05</td></tr><tr><td>RQ1A.201205.008.A1</td><td>android-11.0.0_r21</td><td>Android11 P</td><td>2020-12-05</td></tr><tr><td>6780337</td><td>android-10.0.0_r47</td><td>Android10</td><td>2019-09-05</td></tr><tr><td>6780336</td><td>android-9.0.0_r61</td><td>Pie</td><td>2018-08-05</td></tr><tr><td>OPR5.170623.014</td><td>android-8.0.0_r36</td><td>Oreo</td><td>2017-12-01</td></tr><tr><td>NRD91D</td><td>android-7.0.0_r7</td><td>Nougat</td><td>2016-10-05</td></tr><tr><td>MRA59B</td><td>android-6.0.0_r7</td><td>Marshmallow</td><td>2015-12-01</td></tr><tr><td>LMY48I</td><td>android-5.1.1_r9</td><td>Lollipop</td><td>&#x2F;</td></tr></tbody></table><p><strong>（2）同步源码到工作目录</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认命令</span></span><br><span class="line">repo <span class="built_in">sync</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只拉取当前分支且不拉取远程仓库的标签信息，设置同步任务数量为8</span></span><br><span class="line">repo <span class="built_in">sync</span> -c --no-tags -j8</span><br></pre></td></tr></table></figure><p>命令说明：<code>repo sync</code>会将 Android 源代码树从默认清单中指定的代码库下载到工作目录。如过从未进行过这步操作，这相当于<code>git clone</code>。</p><p>可选参数-c：只拉取当前分支，–no-tags 不拉取tags，-jthreadcount：指定同步任务数量，这些参数有助于加快同步速度。</p><p>Android源码非常大，需要同步很长的时间，如果同步过程中有出现某个地方卡顿了很久，可以使用Ctrl+Z来中断同步，重新执行 repo sync进行同步。</p><h3 id="2-2-使用镜像站提供的初始化包（推荐）"><a href="#2-2-使用镜像站提供的初始化包（推荐）" class="headerlink" title="2.2 使用镜像站提供的初始化包（推荐）"></a>2.2 使用镜像站提供的初始化包（推荐）</h3><p>首次同步的数据包特别大，从Google官方同步方式耗时较长且可能由于网络原因造成失败，可以使用一些镜像站提供的打包好的 AOSP压缩文件。例如<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">清华大学镜像源</a>提供的<a href="https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/">每月更新初始化包</a>。</p><p><strong>1. 下载初始包</strong></p><p>使用浏览器或者curl命令进行下载压缩包。文件大约60G，如果使用curl下载下来只有几k就结束了，大概是请求被禁止了，可以使用浏览器直接下载。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载初始化包，-O：下载远程文件到本地，-C：断点续传</span></span><br><span class="line">curl -OC - https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar</span><br></pre></td></tr></table></figure><p><strong>2. 提取文件</strong><br>解包后得到的 AOSP 工程目录，里面有一个隐藏的 .repo 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取文件，-x：解包，-v：显示过程，-f：指定文件</span></span><br><span class="line">tar xvf aosp-latest.tar</span><br></pre></td></tr></table></figure><p><strong>3. 进入aosp目录再指定分支并同步</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入aosp目录</span></span><br><span class="line"><span class="built_in">cd</span> aosp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定分支</span></span><br><span class="line">repo init -u https://mirrors.tuna.tsinghua.edu.cn/git/AOSP/platform/manifest -b android-13.0.0_r44</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步代码</span></span><br><span class="line">repo <span class="built_in">sync</span> -c --no-tags</span><br></pre></td></tr></table></figure><p>当终端输出类似下面的信息表示同步完成。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Checking out: 100% (1317/1317), <span class="keyword">done</span> <span class="keyword">in</span> 47m8.048s</span><br><span class="line">repo <span class="built_in">sync</span> has finished successfully.</span><br></pre></td></tr></table></figure><p>下载完成后的部分文件夹：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">aosp</span><br><span class="line">|-- art                # 与Android Runtime (ART) 相关的源代码</span><br><span class="line">|-- bionic             # 包含C库（libc）以及其他与C运行时库相关的代码</span><br><span class="line">|-- bootable           # 启动相关的代码，如bootloader、kernel等</span><br><span class="line">|-- build              # 构建系统相关的代码，包括构建工具和构建规则（重要）</span><br><span class="line">|-- dalvik             # 与Dalvik虚拟机相关的代码</span><br><span class="line">|-- development        # 开发工具、库和样例代码</span><br><span class="line">|-- device             # 设备特定的源代码，例如驱动程序和配置文件</span><br><span class="line">|-- external           # Android系统使用的一些外部库和工具，如SQLite、libpng等</span><br><span class="line">|-- frameworks         # Android应用框架的代码（重要）</span><br><span class="line">|-- hardware           # 硬件抽象层 (HAL) 的实现，以及一些硬件相关的代码</span><br><span class="line">|-- kernel             # Linux内核源代码</span><br><span class="line">|-- packages           # 一些预装的应用程序和服务的源代码（重要）</span><br><span class="line">|-- prebuilts          # 一些预编译的二进制文件，如编译工具链等</span><br><span class="line">|-- system             # Android系统的核心组件，如服务和系统应用</span><br><span class="line">|-- vendor             # 设备制造商提供的特定设备的源代码和二进制文件</span><br></pre></td></tr></table></figure><h2 id="3-开始编译"><a href="#3-开始编译" class="headerlink" title="3 开始编译"></a>3 开始编译</h2><h3 id="3-1-设置环境"><a href="#3-1-设置环境" class="headerlink" title="3.1 设置环境"></a>3.1 设置环境</h3><p>执行以下命令进行初始化环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行该命令，envsetup.sh 脚本初始化环境</span></span><br><span class="line"><span class="built_in">source</span> build/envsetup.sh</span><br></pre></td></tr></table></figure><p><code>envsetup.sh</code>脚本位于aosp根目录&#x2F;build&#x2F;envsetup.sh，作用是设置环境变量和封装一些用于构建Android源码的函数。每次开始构建前请先执行一下这个脚本以便加载lunch等命令。</p><h4 id="3-2-选择构建目标"><a href="#3-2-选择构建目标" class="headerlink" title="3.2 选择构建目标"></a>3.2 选择构建目标</h4><p>使用<code>lunch</code> 命令选择要构建的目标（<del>选择你的午餐</del>）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 默认，从后续列表中选择构建目标，</span><br><span class="line">lunch</span><br></pre></td></tr></table></figure><p>命令说明：<code>lunch product_name-build_variant</code>，参数的<code>product_name</code>表示需要构建的设备型号，<code>build_variant</code>表示构建类型，共3种。 可以从从谷歌使用文档-构建-刷写设备-<a href="https://source.android.com/docs/setup/build/running?hl=zh-cn#selecting-device-build">选择设备build</a>分类下选择目标机型对应的build参数。</p><blockquote><p>构建类型：</p><ul><li>user：   用户版，权限受限；适用于生产环境。</li><li>userdebug：用户调试版，与“user”类似，但具有 root 权限和调试功能；是进行调试时的首选编译类型。</li><li>eng：工程版，具有额外调试工具的开发配置，适用于深度开发和调试</li></ul></blockquote><p>如果在没有参数的情况下运行，则 lunch 会提示您从菜单中选择目标，但是注意菜单中并未包含所有可能的选项。如果你打算跑在Android模拟器上可以选择带x86_64&#x2F;x86标识的选项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 选择具体目标，例如这里选择x86_64 架构模拟器和用户调试版为构建目标</span><br><span class="line"># lunch sdk_pc_x86_64-userdebug</span><br></pre></td></tr></table></figure><h3 id="3-3-构建代码"><a href="#3-3-构建代码" class="headerlink" title="3.3 构建代码"></a>3.3 构建代码</h3><p><strong>1. 全量编译</strong><br>使用 <code>make</code> 命令从源代码树的顶部开始编译 Android 源代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m -j10     </span><br></pre></td></tr></table></figure><p>-jN可选参数可以设置处理并行任务的数量。如果您没有提供-j参数，构建系统会自动选择您认为最适合您系统的并行任务计数，Google推荐执行源码编译的线程数&#x3D;CPU核心数x2+2。</p><p>构建完成后会生成各种库文件、输出产物默认在<code>out/target/product/&lt;device&gt;</code>下，例如：</p><ul><li>各种库文件：libhardware.so、libssl.so 等</li><li>Java 类文件：framework.jar、core.jar 等</li><li>系统映像文件：boot.img、system.img、recovery.img等，用于刷机将系统烧录到 Android 设备上。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/out/target/product/&lt;device&gt;/</span><br><span class="line">|-- system.img           # Android系统的核心镜像文件，它包括系统库、框架、应用程序、资源文件和配置文件等</span><br><span class="line">|-- boot.img             # 引导镜像文件，用于引导设备启动Android操作系统。它包含了Linux内核（Kernel）和用于启动Android系统的引导程序（Bootloader）</span><br><span class="line">|-- vendor.img           # 厂商分区镜像文件，用于存储厂商定制的系统组件、驱动程序和特定的应用程序等。vendor.img通常由设备制造商提供，并在编译AOSP时与系统镜像一起构建</span><br><span class="line">|-- ramdisk.img          # 根文件系统镜像</span><br><span class="line">|-- userdata.img         # 用户数据镜像</span><br></pre></td></tr></table></figure><p><strong>2. 编译指定模块</strong><br>如果只想编译某个模块，可以使用命令<code>mmm &lt;directory&gt;</code>，该命令只编译指定目录中的模块，而不是整个源代码树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 指定编译frameworks/base</span><br><span class="line">mmm frameworks/base</span><br></pre></td></tr></table></figure><h3 id="3-4-其他命令"><a href="#3-4-其他命令" class="headerlink" title="3.4 其他命令"></a>3.4 其他命令</h3><p>清除文件重新构建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 清除已生成的构建输出文件</span><br><span class="line">make clean</span><br><span class="line"></span><br><span class="line"># 清除构建缓存</span><br><span class="line">make clobber</span><br><span class="line"></span><br><span class="line"># 删除已构建的目标文件和生成的镜像</span><br><span class="line">rm -rf out/</span><br></pre></td></tr></table></figure><h4 id="3-5-编译完成"><a href="#3-5-编译完成" class="headerlink" title="3.5 编译完成"></a>3.5 编译完成</h4><p>编译过程耗时比较久，对CPU线程数和主频要求比较高，这里用E5-2678 v3（12核24线程）&#x2F;64G内存大概跑了一个多小时。<br>当终端输出类似下面的日志说明构建完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### make completed successfully (01:24:41 (hh:mm:ss)) ####</span><br></pre></td></tr></table></figure><p>编译完成后，如果我们选择的目标是x86，可以使用模拟器来运行，由于已经使用 lunch 选择了构建目标，因此只能运行在我们选定的目标上。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 构建流程会自动将模拟器添加到您的路径中，如需运行模拟器，请输入以下命令</span><br><span class="line">emulator</span><br></pre></td></tr></table></figure><p>此外我们还可以将源码导入Android studio进行阅读或者调试等操作。</p><h2 id="4-阅读源码"><a href="#4-阅读源码" class="headerlink" title="4 阅读源码"></a>4 阅读源码</h2><p>如果需要将AOSP源码导入Android studio主要有以下3种方式：</p><h3 id="4-1-平台版-Android-Studio"><a href="#4-1-平台版-Android-Studio" class="headerlink" title="4.1 平台版 Android Studio"></a>4.1 平台版 Android Studio</h3><p>Android Studio for Platform (ASfP)是 Android Studio针对Framework开发做的版本，添加了对AOSP项目相关的一些支持。不过目前仅支持 Ubuntu 系统。<br>可以从<a href="https://developer.android.com/studio/platform">ASfP官网</a>下载，目前官网简中网页打不开，可以使用<a href="https://developer.android.com/studio/platform">英文</a>或者<a href="https://developer.android.com/studio/platform?hl=zh-tw">繁中</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 1.从官网网页或执行以下命令下载安装包</span><br><span class="line">wget https://googledownloads.cn/android/asfp/asfp-2023.1.1.19-linux.deb</span><br><span class="line"></span><br><span class="line"># 2.令安装ASfP</span><br><span class="line">sudo dpkg -i /path/to/asfp-2023.1.1.19-linux.deb</span><br><span class="line"></span><br><span class="line"># 3.命令运行ASfP</span><br><span class="line">/opt/android-studio-for-platform/bin/studio.sh</span><br></pre></td></tr></table></figure><h3 id="AIDEGen"><a href="#AIDEGen" class="headerlink" title="AIDEGen"></a>AIDEGen</h3><p><a href="https://android.googlesource.com/platform/tools/asuite/+/refs/heads/master/aidegen/README.md">AIDEGen</a>是 Android 10 开始引入的为Android studio 等idea工具生成系统源码的project，它能自动配置Android Studio或IntelliJ项目文件，并解析相关模块依赖关系，不过也只支持Ubuntu。<br>AIDEGen需要运行在选定目标之后，即执行了<code>source build/envsetup.sh &amp;&amp; lunch</code>之后。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Settings：模块名称 -i：需要运行的ides：Android studio</span><br><span class="line"># 编译完成会自动运行Android studio</span><br><span class="line">aidegen Settings -i s</span><br></pre></td></tr></table></figure><h3 id="idegen"><a href="#idegen" class="headerlink" title="idegen"></a>idegen</h3><p>idegen 是 Android 源代码中的一个模块，专门用来为idea工具生成系统源码的project。这是最早提供的一种方式，不推荐。如果需要在Windows 下导入源码或者只关注AOSP的一部分源码，可以使用这种方式。<br>默认情况下AOSP编译并不会生成该文件，另外编译idegen模块不需要先进行全量编译，直接执行以下命令：<br><strong>1. 生成ipr和iml文件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 执行该命令后，将在out目录生成idegen.jar</span><br><span class="line">mmm development/tools/idegen/ </span><br><span class="line"></span><br><span class="line"># 执行以下命令，会在源码目录生成android.ipr，android.iml及android.iws.</span><br><span class="line">sudo ./development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure><p>其中ipr文件和iml文件是主要的IEDA工程配置文件:</p><ul><li>android.ipr：Android Studio 项目文件的主配置文件，包含了项目的基本信息、模块、依赖项、构建设置等</li><li>android.iml：模块的配置信息，例如源代码目录、依赖项等</li><li>android.iws：存储工作空间（workspace）相关设置的文件，可省略。</li></ul><p><strong>2. 导入到Android Studio</strong><br>如果只想关注framework层的源码，可以删除其他模块，只保留framework文件夹和packages文件夹以及idegen配置文件，这样可以大大减少源码体积。<br>将项目文件复制到Windows后，点击Android Studio-&gt;File-&gt;Open，选择刚才生成的android.ipr文件导入项目。</p><p><strong>3. 设置源码正确跳转</strong><br>将源码只关联本地，删除其他依赖：依次打开Android Studio的Project Structure-&gt;Modules-&gt;dependecies，删除其他依赖模块，只保留android api xx platform和<Module Source></p><p><strong>排除模块</strong><br>如果不想导入某些模块，可以修改android.iml文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;excludeFloder url=&quot;file://$MODULE_DIR$&quot;/模块名&gt;</span><br></pre></td></tr></table></figure><!--*  也可在Project Structure-android-Modules-Sources-选中不需要的module##### 配置源码正确跳转* 查看源码时如果出现查看集成关系或者调用关系的时候，会跳转到.class文件中，而不是相应的Java类，就需要新建一个没有任何jar库的SDK给到系统源码项目的依赖。--><h3 id="5-刷机"><a href="#5-刷机" class="headerlink" title="5.刷机"></a>5.刷机</h3><p>如果我们谷歌系列的手机，可以将编译出来的AOSP镜像刷写到设备上。</p><!--#### 运行build和刷机* BootLoader     * 引导加载程序，负责在系统启动时初始化硬件并加载操作系统，例如选择从哪个存储设备加载操作系统镜像。    * 通常是由设备制造商或芯片制造商提供，可以进行定制和开发，很多的手机厂商都会锁住BootLoader，以保证只能使用官方的系统。这时候要刷机就得先bootloader解锁。* FastBoot    *  是bootloader后期进入的一个特殊阶段（模式或工具），该模式下允许通过USB接口与计算机通信，实现一些如刷写固件、刷写分区、重启设备等操作。    * 可以用指令"adb reboot bootloader"进入或者特定组合按键进入* Recover    * Recovery模式在设备上运行一个独立的恢复系统，提供了一个用户界面，用户可以通过物理按键或触摸屏进行导航和操作。Recovery系统可以执行刷写固件及更高级别的任务，如备份、还原、清除数据、安装更新等 * ROM    * 本意是只读内存，这里是指写入到硬件设备的固件，也即相当手机的操作系统，一个能够运行设备的rom通常包括        * BootLoader分区， 常用的是名为uboot的程序，经过编译会打包成uboot.bin镜像        * BootLoader，用来保存环境变量的分区        * Kernel分区，也就是存放OS内核的分区        * Rootfs分区，也就是存入系统第一个进程init对应的程序的分区    * 从硬件到操作系统的运行过程是，Bootloader最先负责初始化硬件，初始化完成后可以进入fastboot模式，一个等待状态根据用户的输入来进行下一步。    * 如果此时刷的是包含有Kernel和Rootfs的Recovery.img镜像（刷到Recovery的分区），那么设备就可以正常启动，能做什么取决于这个最小系统的功能（这也是一个ROM）    * 如果此时刷入为system.img（刷到System分区）和boot.img（刷到Kernel和Rootfs），这个就是用户日常使用的系统，通常将镜像文件打包成一个zip文件，即ROM。##### 安装驱动* 硬件驱动    *  指比如处理器或摄像头等手机硬件所需的固件    * AOSP就是Android系统的开源版本，其中不包括各家OEM厂商的闭源驱动，也不包括GMS等。    *  真机运行需要厂商的驱动，Android构建时必须将这些驱动程序一起编译，否则生成的镜像是无法正常刷机的。谷歌和AOSP无法为所有硬件配置提供内核设备驱动只开源了nexus和pixel对应的AOSP版本的硬件驱动代码。其他厂商的驱动是不包含在AOSP中的。*  由于谷歌只做了nexus或者是pixel的驱动，根据机型在谷歌官网下载机型支持的AOSP分支和驱动压缩包文件。*  将驱动压缩包文件解压得到.sh文件并放到AOSP源码根目录，执行后会创建vendor文件夹，其下包含驱动。之后编译就是带驱动的镜像文件。--><h3 id="5-1-下载驱动"><a href="#5-1-下载驱动" class="headerlink" title="5.1 下载驱动"></a>5.1 下载驱动</h3><p>AOSP只含有纯源代码部分，不包含行与硬件相关的其他专有库（驱动），如果编译AOSP是为了刷机并且拥有Pixel 系列的手机，则还需要下载 Google 的驱动程序。</p><ol><li>下载驱动文件：在Google官网<a href="https://developers.google.com/android/drivers?hl=zh-cn">Nexus 和 Pixel 设备的驱动程序</a>页面可以找设备对应的驱动压缩文件，注意驱动要和aosp build号对应。</li><li>解压文件：将驱动压缩包文件解压得到.sh文件并放到AOSP源码根目录，<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 解压</span><br><span class="line">tar -zxvf FileName.tgz</span><br><span class="line"></span><br><span class="line"># 解压后会生成以下两个文件</span><br><span class="line">extract-google_devices-sailfish.sh</span><br><span class="line">extract-qcom-sailfish.sh</span><br></pre></td></tr></table></figure></li><li>使用bash运行这两个文件，浏览协议并同意后，执行后会创建vendor文件夹，其下包含驱动。 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash extract-google_devices-sailfish.sh</span><br><span class="line">bash extract-qcom-sailfish.sh</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2使用-fastboot-刷机"><a href="#5-2使用-fastboot-刷机" class="headerlink" title="5.2使用 fastboot 刷机"></a>5.2使用 fastboot 刷机</h3><ol><li>解锁BL和下载配置fastboot工具，可以在aosp目录下通过make fastboot命令编译出来，也可以直接从网上下载</li><li>设备确保解锁BL、打开开发者模式、连接上adb，进入BootLoader模式</li><li>进入编译后产生的镜像的目录….&#x2F;aosp&#x2F;out&#x2F;target&#x2F;product&#x2F;<device>，执行以下命令。刷完会自动重启，系统刷入完成。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># fastboot device 电脑能识别到设备</span><br><span class="line"># -w 代表清除/data分区，删除所有用户数据</span><br><span class="line">fastboot flashall -w</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-优化编译环境（可选）"><a href="#6-优化编译环境（可选）" class="headerlink" title="6 优化编译环境（可选）"></a>6 优化编译环境（可选）</h2><p><strong>1. 设置 ccache</strong></p><blockquote><p>视需要指示编译过程使用ccache编译工具，ccache是适用于C和C++的编译器缓存，有助于提高编译速度。这对于编译服务器和其他高容量生产环境来说尤其有用，如果您是在执行增量编译（例如个人开发者而非编译服务器），ccache 可能会让您为缓存未命中埋单，从而减慢您的编译速度。</p></blockquote><p>设置步骤：<br>1.打开bashrc配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>2.在文件末尾添加以下内容：<br>其中<path_of_your_choice>是要设置ccache缓存的目录，如果不设置，则默认缓存到~&#x2F;.ccache中。建议的缓存大小为 50G 到 100G。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export USE_CCACHE=1</span><br><span class="line">export CCACHE_DIR=/&lt;path_of_your_choice&gt;/.ccache</span><br><span class="line">prebuilts/misc/linux-x86/ccache/ccache -M 50G</span><br></pre></td></tr></table></figure><p>3.使 .bashrc 更改立即生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>后续可以通过以下命令查看 ccache 的使用情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n1 -d prebuilts/misc/linux-x86/ccache/ccache -s</span><br></pre></td></tr></table></figure><p><strong>2. 自定义输出目录</strong><br>默认情况下，每次编译的输出都会存储在相应源代码树的out&#x2F;子目录下，自定义目录如果构建多个目标（不同手机型号等）时能够更清晰地区分各个目标的输出结果</p><ul><li><p>OUT_DIR：如果需要构建多个目标（不同的手机型号或构建类型），修改这个路径可以为每个目标输出到独立的目录。</p></li><li><p>OUT_DIR_COMMON_BASE：多个构建目标的共享的基础路径，如果有多个物理磁盘，如果将源文件和输出存储在单独的物理磁盘中，构建速度会更快（虚拟机一般用不到）。</p></li></ul><p>操作步骤，修改.bashrc或者每次编译时直接在终端输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改存储输出目录的基础位置</span></span><br><span class="line"><span class="built_in">export</span> OUT_DIR_COMMON_BASE=&lt;path-to-your-out-directory&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定当前构建目标的输出目录</span></span><br><span class="line"><span class="built_in">export</span> OUT_DIR=&lt;out_target_1&gt;</span><br></pre></td></tr></table></figure><h2 id="7-报错"><a href="#7-报错" class="headerlink" title="7 报错"></a>7 报错</h2><p><strong>1.下载源码404无法连接</strong><br>科学上网或者使用镜像地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果repo如果更新失败报错404，将repo的git源替换成清华的景象</span></span><br><span class="line"><span class="built_in">export</span> REPO_URL=<span class="string">&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>2.python 编码格式错误</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  File <span class="string">&quot;/home/zhg/桌面/aosp/out/host/linux-x86/bin/protoc-gen-nanopb/nanopb_gene</span></span><br><span class="line"><span class="string">rator.py&quot;</span>, line 1841, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;ascii&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xe6 in position 10: ordinal</span></span><br><span class="line"><span class="string"> not in range(128)</span></span><br><span class="line"><span class="string">--nanopb_out: protoc-gen-nanopb: Plugin failed with status code 1.</span></span><br><span class="line"><span class="string">21:34:42 ninja failed with: exit status 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#### failed to build some targets (06:30:15 (hh:mm:ss)) ####</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="comment"># 在末尾添加</span></span><br><span class="line"><span class="built_in">export</span> LANG=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_CTYPE=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="comment"># 保存退出后</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p><strong>3.ca证书错误</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server certificate verification failed. CAfile: none CRLfile: none</span><br></pre></td></tr></table></figure><p> 解决方法：添加证书或者忽略证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GIT_SSL_NO_VERIFY=1</span><br></pre></td></tr></table></figure><p><strong>4.Python版本不兼容</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">File <span class="string">&quot;device/generic/goldfish/tools/mk_combined_img.py&quot;</span>, line 48</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;&#x27;%s&#x27; cannot be converted to int&quot;</span> % (line[2])</span><br><span class="line">          ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Missing parentheses <span class="keyword">in</span> call to <span class="string">&#x27;print&#x27;</span>. Did you mean <span class="built_in">print</span>(...)?</span><br><span class="line">ninja: build stopped: subcommand failed.</span><br><span class="line">20:02:20 ninja failed with: <span class="built_in">exit</span> status 1</span><br><span class="line">make: *** [build/core/main.mk:21：run_soong_ui] 错误 1</span><br></pre></td></tr></table></figure><p>解决方法：编译低版本的aosp可能需要Python2而不是Python3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Python2</span></span><br><span class="line">sudo apt install python2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除原来的Python符号链接</span></span><br><span class="line"><span class="comment"># sudo unlink /usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 /usr/bin/python 链接指向 Python 2</span></span><br><span class="line">sudo <span class="built_in">ln</span> -sf /usr/bin/python2 /usr/bin/python</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>5. 执行idegen.sh 脚本报错</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error: A JNI error has occurred, please check your installation and try again</span><br><span class="line">Exception <span class="keyword">in</span> thread “main” java.lang.UnsupportedClassVersionError: Main has been compiled by a more recent version of the Java Runtime (class file version 53.0), this version of the Java Runtime only recognizes class file versions up to 52.0</span><br></pre></td></tr></table></figure><p>解决方法： jdk版本太低，idegen.jar的编译java版本是 version 53.0即java 9，需要升级openjdk版本</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://source.android.com/docs/setup/start/requirements?hl=zh-cn">Android Open Source Project</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aosp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下使用GoMobile构建AndroidLibXrayLite/AndroidLibV2rayLite的arr包</title>
      <link href="/gomv2ray/"/>
      <url>/gomv2ray/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>V2Ray 是 Project V 项目下的一个核心工具，主要负责网络协议、路由等网络通信功能的实现。Xray 是由 V2Ray 项目衍生出来的一个全新的网络代理工具，其目标是对 V2Ray 进行优化和改进，以提供更好的性能和功能。</p><p>V2Ray和Xray主要是使用 Go 语言（ Golang）编写的。Go 是一种由 Google 开发的开源编程语言，它提供了丰富的标准库和并发支持，非常适合构建高性能的网络应用程序。go语言的项目可以通过Gomobile库将Go代码构建为可以在移动平台上运行的原生应用程序或依赖库。</p><p>AndroidLibV2rayLite和AndroidLibXrayLite 就是基于V2Ray和Xray的 Android 库，通过这个库，可以在 Android 应用中集成 V2Ray（Xray） 功能，实现网络代理、加密通信等功能。</p><ul><li>本文构建环境<blockquote><p>Ubuntu 22.04.3 LTS Desktop 64-bit<br>openjdk 17.0.10<br>Android sdk 34, NDK 26.2.11394342<br>go 1.22.1</p></blockquote></li></ul><h2 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1 搭建环境"></a>1 搭建环境</h2><h3 id="1-1-安装jdk"><a href="#1-1-安装jdk" class="headerlink" title="1.1 安装jdk"></a>1.1 安装jdk</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查是否安装Jdk</span></span><br><span class="line">java --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装Jdk</span></span><br><span class="line">sudo apt install openjdk-17-jdk</span><br></pre></td></tr></table></figure><h3 id="1-2-安装Android-SDK"><a href="#1-2-安装Android-SDK" class="headerlink" title="1.2 安装Android SDK"></a>1.2 安装Android SDK</h3><p>谷歌推荐使用Android Studio或者Command-line tools的 sdkmanager来下载Android sdk。<br>在Ubuntu的应用商店下载Android studio，安装完成并打开，然后从sdk manager中下载Androidsdk和ndk，<br>最后配置环境变量。<br>使用命令<code>sudo gedit ~/.bashrc</code>打开 .bashrc 文件，在末尾添加以下内容并保存后，使用<code>source ~/.bashrc</code>刷新配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Android sdk环境变量，路径根据下载位置修改</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/home/zhg/Android/Sdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/platform-tools</span><br><span class="line"><span class="comment"># nkd环境变量</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_NDK_HOME=/home/zhg/Android/Sdk/ndk/26.2.11394342</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_NDK_HOME</span></span><br></pre></td></tr></table></figure><h3 id="1-3-安装Go"><a href="#1-3-安装Go" class="headerlink" title="1.3 安装Go"></a>1.3 安装Go</h3><ul><li>在<a href="https://go.dev/doc/install">go官网</a>下载Linux版本的压缩包，类似<code>go1.22.1.linux-amd64.tar.gz</code></li><li>解压缩：使用右键菜单<code>提取到``tar -xzf go1.22.1.linux-amd64.tar.gz </code>将文件解压到当前文件夹，解压后得到名为<code>go</code>的文件夹，这是go的安装目录，它包含了编译器、标准库、工具和其他相关文件。</li><li>移动 文件夹到存放用户安装的软件和程序&#x2F;usr&#x2F;local&#x2F;</li></ul><p><strong>1. 卸载旧版本并安装Go</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除/usr/local/go的旧版本</span></span><br><span class="line">sudo <span class="built_in">rm</span> -rf /usr/local/go </span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录的压缩文件解压到指定目录/usr/local</span></span><br><span class="line">sudo tar -C /usr/local -xzf go1.22.1.linux-amd64.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.配置环境变量</strong><br>使用命令<code>sudo gedit ~/.bashrc</code>打开 .bashrc 文件，在末尾添加以下内容并保存后，使用<code>source ~/.bashrc</code>刷新配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 Go 可执行文件路径添加到 PATH 环境变量中，以便在命令行中直接运行 Go 工具。</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 Go 工作空间的路径，该路径用于存放 Go 项目及其相关文件。</span></span><br><span class="line"><span class="comment">#这里使用的路径是当前用户的主目录路径/home/user</span></span><br><span class="line"><span class="built_in">export</span> GOPATH=<span class="variable">$HOME</span>/go</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 Go 工作空间中的可执行文件路径添加到 PATH 环境变量中，以便在命令行中直接运行 Go 项目的可执行文件。</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br></pre></td></tr></table></figure><p><strong>3. 检查是否安装成功</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go version</span><br></pre></td></tr></table></figure><h3 id="1-4-安装gomobile"><a href="#1-4-安装gomobile" class="headerlink" title="1.4 安装gomobile"></a>1.4 安装gomobile</h3><p><a href="https://pkg.go.dev/golang.org/x/mobile/cmd/gomobile">gomobile</a> 是一个用于构建和运行使用 Go 编写的移动应用程序的工具。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用go工具安装gomobile最新版，这会将gomobile下载至GOPATH定义的目录</span></span><br><span class="line">go install golang.org/x/mobile/cmd/gomobile@latest </span><br></pre></td></tr></table></figure><p>下载完成后，需要进行初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化gomobile，配置必要的环境和工具</span></span><br><span class="line">gomobile init </span><br></pre></td></tr></table></figure><h2 id="2-编译AndroidLibXrayLite"><a href="#2-编译AndroidLibXrayLite" class="headerlink" title="2 编译AndroidLibXrayLite"></a>2 编译AndroidLibXrayLite</h2><h3 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h3><p>在AndroidLibXrayLite的<a href="https://github.com/2dust/AndroidLibXrayLite">Github仓库</a>，下载该库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/2dust/AndroidLibXrayLite.git</span><br></pre></td></tr></table></figure><h3 id="2-2-更新模块依赖"><a href="#2-2-更新模块依赖" class="headerlink" title="2.2 更新模块依赖"></a>2.2 更新模块依赖</h3><p>下载完成后在AndroidLibXrayLite的目录下输入以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 整理（tidy）项目的模块依赖关系</span></span><br><span class="line">go mod tidy -v</span><br></pre></td></tr></table></figure><h3 id="2-3-开始构建"><a href="#2-3-开始构建" class="headerlink" title="2.3 开始构建"></a>2.3 开始构建</h3><p>命令：<code>gomobile bind -v -androidapi 21 -ldflags=&#39;-s -w&#39; ./</code>。<br>参数解释：</p><ul><li>-v：启用详细输出，显示更多细节信息。</li><li>-androidapi 21：指定 Android API 的最低版本。在此示例中，指定为 Android API 版本 21。</li><li>-ldflags&#x3D;’-s -w’：指定链接器标志。-s 表示禁止包含符号表，-w 表示禁止包含调试信息。</li><li>.&#x2F;：指定要绑定的 Go 包的路径。. 表示当前目录，表示将当前目录中的 Go 包绑定为移动库。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 Go 项目构建为 Android 库</span></span><br><span class="line">gomobile <span class="built_in">bind</span> -v -androidapi 21 -ldflags=<span class="string">&#x27;-s -w&#x27;</span> ./</span><br></pre></td></tr></table></figure>耐心等待构建完成，构建完成后当前目录的<code>libv2ray.aar</code>和<code>libv2ray-sources.jar</code>即是目标文件，将aar包导入Android项目即可。</li></ul><p>构建AndroidLibV2rayLite，流程与前面一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载项目</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/2dust/AndroidLibV2rayLite.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新</span></span><br><span class="line">go mod tidy -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建</span></span><br><span class="line">gomobile <span class="built_in">bind</span> -v -androidapi 21 -ldflags=<span class="string">&#x27;-s -w&#x27;</span> ./</span><br></pre></td></tr></table></figure><h3 id="3-报错"><a href="#3-报错" class="headerlink" title="3 报错"></a>3 报错</h3><p><strong>1. ndk版本不匹配</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gomobile: no usable NDK <span class="keyword">in</span> /home/zhg/Android/Sdk: unsupported API version 19 (not <span class="keyword">in</span> 21..34), open /home/zhg/Android/Sdk/ndk-bundle/meta/platforms.json: no such file or directory</span><br></pre></td></tr></table></figure><p>这个错误表示gomobile找不到适用的 NDK。gomobile需要支持API版本在21到34之间的 NDK。这可能由于找不到ndk或者构建的ndk版本和已下载的ndk版本不匹配。<br>检查ndk环境变量配置是否正确，或者打开ndk主目录&#x2F;meta&#x2F;platforms.json文件查看当前ndk版本支持的最低和最高Android版本是否符合构建要求，不配则重新下载对应版本的ndk。</p><p>本文构建完成的aar文件已上传到<a href="https://github.com/kdsunset/v2ray_aar">Github</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GoMobile </tag>
            
            <tag> AndroidLibV2rayLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下编译envoy mobile</title>
      <link href="/a720a72c/"/>
      <url>/a720a72c/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu下编译envoy-mobile"><a href="#Ubuntu下编译envoy-mobile" class="headerlink" title="Ubuntu下编译envoy mobile"></a>Ubuntu下编译envoy mobile</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Envoy 是一个开源的高性能、可扩展的代理服务，最初由 Lyft 公司开发。它设计用于处理现代的微服务架构中的网络通信，并提供了许多功能，包括负载均衡、服务发现、路由、认证、授权等。Envoy 被广泛用于构建和部署云原生应用程序以及微服务体系结构。<br/></p><p>Envoy Mobile 是 Envoy 的移动端版本，专门设计用于在移动应用程序中处理网络流量。<br>envoy 提供了官方依赖，不过提供的api有限，如果需要对其进行定制则需要重新编译构建aar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api(&quot;io.envoyproxy.envoymobile:envoy:0.5.0.20231016&quot;)</span><br></pre></td></tr></table></figure><p>本文将介绍在Linux下编译envoy mobile，生成aar文件的流程。</p><h2 id="1-使用环境"><a href="#1-使用环境" class="headerlink" title="1 使用环境"></a>1 使用环境</h2><h5 id="硬件要求"><a href="#硬件要求" class="headerlink" title="硬件要求"></a>硬件要求</h5><ul><li>内存8G以上，建议12G以上</li><li>磁盘空间50G以上，建议使用SSD</li><li>科学上网（可访问google、github等网站）</li></ul><h5 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h5><ul><li>Ubuntu 22.04.3 LTS Desktop 64-bit</li><li>Java 8 以上</li><li>Android SDK Platform 30</li><li>Android NDK 21</li><li>Python 3.10.12 </li><li>Bazel 6.3.2</li><li>c++ 环境</li></ul><h2 id="2-搭建环境"><a href="#2-搭建环境" class="headerlink" title="2 搭建环境"></a>2 搭建环境</h2><h3 id="2-1-git"><a href="#2-1-git" class="headerlink" title="2.1 git"></a>2.1 git</h3><p>1.打开终端，输入以下命令以安装git，下同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查git 是否安装</span></span><br><span class="line">git --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装git</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><p>2.配置git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;youname&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail@xxx.com&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-curl"><a href="#2-2-curl" class="headerlink" title="2.2  curl"></a>2.2  curl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure><h3 id="2-3-Java环境"><a href="#2-3-Java环境" class="headerlink" title="2.3 Java环境"></a>2.3 Java环境</h3><p>1.检查是否已安装jdk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看jdk版本号</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有则进行安装</span></span><br><span class="line">sudo apt-get install openjdk-11-jdk</span><br></pre></td></tr></table></figure><p>2.配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开bashrc文件</span></span><br><span class="line">sudo gedit ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#在最后一行加上以下内容:</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-4-安装Android-NDK"><a href="#2-4-安装Android-NDK" class="headerlink" title="2.4 安装Android NDK"></a>2.4 安装Android NDK</h4><p>1.安装方式有很多，可以从google官网下载Linux平台的ndk包，解压并复制放到Ubuntu指定的ndk目录。也可以通过Android studio进行下载。</p><blockquote><p><a href="https://developer.android.com/ndk/downloads?hl=zh-cn#download">https://developer.android.com/ndk/downloads?hl=zh-cn#download</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查ndk是否安装</span></span><br><span class="line">ndk-build -v</span><br></pre></td></tr></table></figure><p>2.下载完成配置ndk环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NDK_HOME=/home/xiaochuan/Android/android-ndk-r10b</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$NDK_HOME</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-5-安装-Android-Sdk"><a href="#2-5-安装-Android-Sdk" class="headerlink" title="2.5 安装 Android Sdk"></a>2.5 安装 Android Sdk</h4><p>1.从官网下载sdk包，或者通过Android stdio下载（Ubuntu应用商店支持Android Studo）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查Android SDK是否安装</span></span><br><span class="line">adb --version</span><br></pre></td></tr></table></figure><p>2.配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开 .bashrc 文件</span></span><br><span class="line">sudo gedit ~/.bashrc</span><br></pre></td></tr></table></figure><p>在末尾增加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># jdk环境变量</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"># Android sdk环境变量</span><br><span class="line">export ANDROID_HOME=/home/zhg/Mine/Android/AndroidSdk</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/tools</span><br><span class="line">export PATH=$PATH:$ANDROID_HOME/platform-tools</span><br><span class="line"></span><br><span class="line"># nkd环境变量</span><br><span class="line">export ANDROID_NDK_HOME=/home/zhg/Mine/Android/AndroidSdk/ndk/26.1.10909125</span><br><span class="line">export PATH=$PATH:$ANDROID_NDK_HOME</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使配置立即生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-6-c-环境"><a href="#2-6-c-环境" class="headerlink" title="2.6 c++环境"></a>2.6 c++环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装gcc(C编译器)</span></span><br><span class="line">sudo apt-get install gcc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装g++(C++编译器)</span></span><br><span class="line">sudo apt-get install g++</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装make</span></span><br><span class="line">sudo apt-get install make</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2-7-Python"><a href="#2-7-Python" class="headerlink" title="2.7 Python"></a>2.7 Python</h4><p>检查是否安装Python，Ubuntu 16.04以上默认预装 Python 3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">python3 --version</span><br></pre></td></tr></table></figure><h2 id="3-开始构建"><a href="#3-开始构建" class="headerlink" title="3 开始构建"></a>3 开始构建</h2><h4 id="3-1-拉取源码"><a href="#3-1-拉取源码" class="headerlink" title="3.1 拉取源码"></a>3.1 拉取源码</h4><p>拉取envoy-mobile项目源码，注意也拉取子模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recurse-submodules https://github.com/envoyproxy/envoy.git</span><br><span class="line"></span><br><span class="line">特定版本</span><br><span class="line">git <span class="built_in">clone</span> -b v1.28.0 --recurse-submodules https://github.com/envoyproxy/envoy.git</span><br></pre></td></tr></table></figure><h4 id="3-2-配置bazel"><a href="#3-2-配置bazel" class="headerlink" title="3.2 配置bazel"></a>3.2 配置bazel</h4><p> 添加Android构建命令，具体步骤，在项目目录envoy&#x2F;mobile&#x2F;.bazelr文件，添加以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">build:release-android --android_cpu=x86,armeabi-v7a,arm64-v8a</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-3-执行构建"><a href="#3-3-执行构建" class="headerlink" title="3.3 执行构建"></a>3.3 执行构建</h4><p>在录envoy&#x2F;mobile&#x2F;目录打开终端，输入以下命令，执行构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bazelw build android_dist --config=release-android --fat_apk_cpu=x86,armeabi-v7a,arm64-v8a</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果一切顺利，编译一两小时（视cpu性能）就能看到结果，但是基本没有这么顺利的，修复编译报错才是重头戏，下面是一些常见编译错误。</p><h1 id="4-构建过程常见错误"><a href="#4-构建过程常见错误" class="headerlink" title="4 构建过程常见错误"></a>4 构建过程常见错误</h1><h3 id="4-1-构建命令未定义"><a href="#4-1-构建命令未定义" class="headerlink" title="4.1 构建命令未定义"></a>4.1 构建命令未定义</h3><h4 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Config value <span class="string">&#x27;release-android&#x27;</span> is not defined <span class="keyword">in</span> any .rc file</span><br></pre></td></tr></table></figure><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在 .bazelrc 文件中添加以下行来定义 &#x27;release-android&#x27; 配置：</span><br><span class="line">build:release-android --android_cpu=x86,armeabi-v7a,arm64-v8a</span><br></pre></td></tr></table></figure><h3 id="4-2-网络超时（Read-timed-out）"><a href="#4-2-网络超时（Read-timed-out）" class="headerlink" title="4.2 网络超时（Read timed out）"></a>4.2 网络超时（Read timed out）</h3><h4 id="错误日志-1"><a href="#错误日志-1" class="headerlink" title="错误日志"></a>错误日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ERROR:An error occurred during the fetch of repository <span class="string">&#x27;Maven&#x27;</span>:</span><br><span class="line">    Traceback(most recent call last):</span><br><span class="line">        File <span class="string">&quot;/home/zhg/.cache/bazel/bazel_zhg/fdb94f3cc526bbd2b2e68780cd60f6b4/external/rules_jvm_ external/coursier.bzl&quot;</span>, line 894, column 17, <span class="keyword">in</span> _coursier_fetch_impl</span><br><span class="line">_download_jq(repository_ctx)</span><br><span class="line">        File <span class="string">&quot;/home/zhg/.cache/bazel/_bazel_zhg/fdb94f3cc526bbd2b2e68780cd60f6b4/external/rules_jvm_external/coursier.bzl&quot;</span>,line 876, column 32,<span class="keyword">in</span> _download_jqrepository_ctx.download(value.url,<span class="string">&quot;jq-%s&quot;</span> % os, sha256 = value.</span><br><span class="line">sha256，executable = True)</span><br><span class="line">Error <span class="keyword">in</span> download: java.io.IOException: Error downloading [https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64]to /home/zhg/.cache/bazel/_bazelzhg/fdb94f3cc526bbd2b2e68780cd60f6b4/external/maven/jq-linux: Read timed out</span><br></pre></td></tr></table></figure><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>网络问题，给终端配置vpn或者代理环境，或者重试</p><h3 id="4-3-网络问题（Error-fetching）"><a href="#4-3-网络问题（Error-fetching）" class="headerlink" title="4.3 网络问题（Error fetching）"></a>4.3 网络问题（Error fetching）</h3><h4 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: /home/zhg/Mine/Workplace/envoy/mobile/library/kotlin/io/envoyproxy/envoymobile/BUILD:9:18: //library/kotlin/io/envoyproxy/envoymobile:envoy_aar_android_javadocs depends on @maven//:org_jetbrains_dokka_dokka_cli <span class="keyword">in</span> repository @maven <span class="built_in">which</span> failed to fetch. no such package <span class="string">&#x27;@maven//&#x27;</span>: Error <span class="keyword">while</span> fetching artifact with coursier: Error fetching artifacts:</span><br><span class="line">https://maven.google.com/androidx/core/core/1.3.2/core-1.3.2.jar: download error: Caught java.net.SocketException (Unexpected end of file from server) <span class="keyword">while</span> downloading https://maven.google.com/androidx/core/core/1.3.2/core-1.3.2.jar</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><p>重试或检查网络环境</p><h3 id="4-4-Android-sdk-版本不匹配"><a href="#4-4-Android-sdk-版本不匹配" class="headerlink" title="4.4 Android sdk 版本不匹配"></a>4.4 Android sdk 版本不匹配</h3><h4 id="错误日志-2"><a href="#错误日志-2" class="headerlink" title="错误日志"></a>错误日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Analysis of target <span class="string">&#x27;//:android_dist&#x27;</span> failed; build aborted: Android SDK api level 30 was requested but it is not installed <span class="keyword">in</span> the Android SDK at /home/zhg/Mine/Android/AndroidSdk. The api levels found were [34]. Please choose an available api level or install api level 30 from the Android SDK Manager.</span><br><span class="line">INFO: Elapsed time: 30.879s</span><br><span class="line">INFO: 0 processes.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解决方法-2"><a href="#解决方法-2" class="headerlink" title="解决方法"></a>解决方法</h4><p>不支持sdk 30以上的版本：打开envoy&#x2F;mobile&#x2F;WORKPLACE文件，找到sdk_api_level字段，修改成与所配置的sdk版本一致的版本号</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">android_configure(</span></span><br><span class="line">    <span class="string">name</span> <span class="string">=</span> <span class="string">&quot;local_config_android&quot;</span><span class="string">,</span></span><br><span class="line">    <span class="string">build_tools_version</span> <span class="string">=</span> <span class="string">&quot;30.0.2&quot;</span><span class="string">,</span></span><br><span class="line">    <span class="string">ndk_api_level</span> <span class="string">=</span> <span class="number">21</span><span class="string">,</span></span><br><span class="line">    <span class="string">sdk_api_level</span> <span class="string">=</span> <span class="number">30</span><span class="string">,</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><h3 id="4-5-配置的Android-sdk无效"><a href="#4-5-配置的Android-sdk无效" class="headerlink" title="4.5 配置的Android sdk无效"></a>4.5 配置的Android sdk无效</h3><h4 id="错误信息-1"><a href="#错误信息-1" class="headerlink" title="错误信息"></a>错误信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Use --sandbox_debug to see verbose messages from the sandbox and retain the sandbox build root <span class="keyword">for</span> debugging</span><br><span class="line">Error parsing <span class="built_in">command</span> line: While parsing option --androidJar external/androidsdk/platforms/android-34/android.jar: external/androidsdk/platforms/android-34/android.jar is not a valid path: it does not exist.</span><br><span class="line">Try --<span class="built_in">help</span>.</span><br></pre></td></tr></table></figure><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>检查配置的Android sdk路径或者环境变量</p><h3 id="4-6-c-环境报错"><a href="#4-6-c-环境报错" class="headerlink" title="4.6 c++环境报错"></a>4.6 c++环境报错</h3><h4 id="错误日志-3"><a href="#错误日志-3" class="headerlink" title="错误日志"></a>错误日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Error <span class="keyword">in</span> fail:</span><br><span class="line">Auto-Configuration Error: Cannot find gcc or CC; either correct your path or <span class="built_in">set</span> the CC environment variable</span><br></pre></td></tr></table></figure><h4 id="解决方法-3"><a href="#解决方法-3" class="headerlink" title="解决方法"></a>解决方法</h4><p>配置C++环境，安装C&#x2F;C++编译器和make</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 安装gcc(C编译器)</span><br><span class="line">sudo apt-get install gcc</span><br><span class="line"></span><br><span class="line">// 安装g++(C++编译器)</span><br><span class="line">sudo apt-get install g++</span><br><span class="line"></span><br><span class="line">// 安装make</span><br><span class="line">sudo apt-get install make</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-7-内存不足（command-Killed）"><a href="#4-7-内存不足（command-Killed）" class="headerlink" title="4.7 内存不足（command: Killed）"></a>4.7 内存不足（command: Killed）</h3><h4 id="错误信息-2"><a href="#错误信息-2" class="headerlink" title="错误信息"></a>错误信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Use --sandbox_debug to see verbose messages from the sandbox and retain the sandbox build root <span class="keyword">for</span> debugging</span><br><span class="line">clang: error: unable to execute <span class="built_in">command</span>: Killed</span><br><span class="line">clang: error: linker <span class="built_in">command</span> failed due to signal (use -v to see invocation)</span><br><span class="line">Target //library/kotlin/io/envoyproxy/envoymobile:envoy_aar_with_artifacts failed to build</span><br><span class="line">INFO: Elapsed time: 5243.412s, Critical Path: 196.75s</span><br><span class="line">INFO: 12923 processes: 801 internal, 12090 linux-sandbox, 32 worker.</span><br><span class="line">FAILED: Build did NOT complete successfully</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-8-内存不足（Not-enough-space）"><a href="#4-8-内存不足（Not-enough-space）" class="headerlink" title="4.8 内存不足（Not enough space）"></a>4.8 内存不足（Not enough space）</h3><h4 id="错误信息-3"><a href="#错误信息-3" class="headerlink" title="错误信息"></a>错误信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OpenJDK 64-Bit Server VM warning: INFO: os::commit_memory(0x0000000600000000, 8589934592, 0) failed; error=<span class="string">&#x27;Not enough space&#x27;</span> (errno=12)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="解决方法-4"><a href="#解决方法-4" class="headerlink" title="解决方法"></a>解决方法</h4><p>envoy mobile构建需要8G或更高的内存大小，检查物理内存或者虚拟机分配的内存大小</p><h2 id="5-构建完成"><a href="#5-构建完成" class="headerlink" title="5 构建完成"></a>5 构建完成</h2><p>当终端输出Build completed successfully字样时，说明编译成功，congratulations ~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">INFO: From Executing genrule //library/kotlin/io/envoyproxy/envoymobile:envoy_aar:</span><br><span class="line">Constructing aar...</span><br><span class="line">INFO: From Executing genrule //library/kotlin/io/envoyproxy/envoymobile:envoy_aar_with_artifacts:</span><br><span class="line">Outputting pom.xml,sources.jar, and javadocs.jar...</span><br><span class="line">Finished!</span><br><span class="line">Target //library/kotlin/io/envoyproxy/envoymobile:envoy_aar_with_artifacts up-todate:</span><br><span class="line">    bazel-bin/library/kotlin/io/envoyproxy/envoymobile/envoy.aar</span><br><span class="line">    bazel-bin/library/kotlin/io/envoyproxy/envoymobile/envoy-pom.xml</span><br><span class="line">    bazel-bin/library/kotlin/io/envoyproxy/envoymobile/envoy-sources.jar</span><br><span class="line">    bazel-bin/library/kotlin/io/envoyproxy/envoymobile/envoy-javadoc.jar</span><br><span class="line">INFO:Elapsed time: 5862.743s, Critical Path: 546.47s</span><br><span class="line">INFO: 13541 processes: 794 internal, 12715 linux-sandbox, 32 worker.</span><br><span class="line">INFO: Build completed successfully, 13541 total actions</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构建完成的aar文件在bazel-bin&#x2F;library&#x2F;kotlin&#x2F;io&#x2F;envoyproxy&#x2F;envoymobile&#x2F;envoy.aar目录下，，如果因为文件权限问题无法复制，可以使用以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> -R 777 envoy.aar</span><br></pre></td></tr></table></figure><p>最后将其复制到Android 项目libs文件夹中使用即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>成功编译出aar之后，可以把envoy mobile当做普通网络库使用，也可以对envoy mobile的jni部分或者envoy的c端源码进行修改，在移动端实现更多的原来只能运行在Linux或者Windows平台的envoy功能，下篇将展开如何修改源码以实现Android上使用envoy mobile作为前端代理。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://envoymobile.io/docs/envoy-mobile/latest/index.html">Envoy Mobile Documentation</a> </p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> envoy mobile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 下部署envoy 并作为前端代理</title>
      <link href="/ubuntufd/"/>
      <url>/ubuntufd/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Envoy 是一个开源的高性能、可扩展的代理服务，最初由 Lyft 公司开发。它设计用于处理现代的微服务架构中的网络通信，并提供了许多功能，包括负载均衡、服务发现、路由、认证、授权等。Envoy 被广泛用于构建和部署云原生应用程序以及微服务体系结构。<br>本文将通过将envoy作为前端代理来演示envoy的安装、配置和简单使用。</p><p>本文使用环境</p><ul><li>Ubuntu 22.04.3 LTS Desktop 64-bit</li></ul><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h2><p>envoy 编译比较复杂，可以使用Envoy 社区提供的docker镜像和getenvoy项目，不过getenvoy所使用的版本比较老。在Linux下最简单的方式还是直接使用官方的envoy预编译二进制文件。</p><h3 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1 下载"></a>1.1 下载</h3><ul><li>从Envoy 的 GitHub 发行版页面下载 Ubuntu 的最新版的envoy预编译二进制文件，这里选择“envoy-1.28.0-linux-x86_64”<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/envoyproxy/envoy/releases</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img.kdsunset.top/img/ubuntufd/20240130151721.png"></p><h3 id="1-2-安装envoy"><a href="#1-2-安装envoy" class="headerlink" title="1.2 安装envoy"></a>1.2 安装envoy</h3><p>新建项目目录，将文件复制到该目录下（本文使用&#x2F;home&#x2F;zhg&#x2F;Mine&#x2F;Workplace&#x2F;getenvoy&#x2F;）</p><ul><li>下载完成后如果是.tar.gz则需要解压</li><li>如果是(application&#x2F;x-executable)可执行文件，则需要添加添加可执行权限<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重命名为&quot;envoy&quot;方便输入命令</span></span><br><span class="line">sudo <span class="built_in">mv</span> envoy-1.28.0-linux-x86_64 envoy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加可执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x envoy </span><br></pre></td></tr></table></figure> 通过以下命令可以查看envoy版本，以验证envoy是否正确安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./envoy --version</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://img.kdsunset.top/img/ubuntufd/20240130152825.png"></p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h2><p>配置参考官网  </p><blockquote><p><a href="https://www.envoyproxy.io/docs/envoy/v1.28.0/configuration/best_practices/edge">https://www.envoyproxy.io/docs/envoy/v1.28.0/configuration/best_practices/edge</a>  </p></blockquote><p>envoy 可以通过静态配置和动态配置两种方式实现，静态文件通常yaml格式的文件进行配置，主要字段有:</p><ul><li><h5 id="listeners（监听器）"><a href="#listeners（监听器）" class="headerlink" title="listeners（监听器）"></a>listeners（监听器）</h5></li></ul><p>listeners 字段用于定义Envoy监听的网络地址和协议。它描述了Envoy如何接收和处理传入的连接请求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">listeners:</span><br><span class="line">-   name： 给监听器命名，方便引用。</span><br><span class="line">-   address： 指定监听的 IP 地址和端口。</span><br><span class="line">-   filters：指定用于处理传入连接的过滤器链，包括协议转码、路由、TLS 等。</span><br></pre></td></tr></table></figure><ul><li><h5 id="filter（过滤器）"><a href="#filter（过滤器）" class="headerlink" title="filter（过滤器）"></a>filter（过滤器）</h5></li></ul><p>filters字段通常用于通过配置文件引入和加载Envoy的各种过滤器。过滤器是Envoy的功能组件，用于在请求或响应的处理过程中执行特定的操作。过滤器可以添加、修改或删除请求或响应的头信息，执行转换，执行日志记录等操作。</p><p>envoy.http_connection_manager 是Envoy的HTTP连接管理器，它用于处理HTTP请求和响应。它是Envoy配置的核心组件之一，负责管理HTTP连接的生命周期、处理HTTP协议、执行各种过滤器等。该连接管理器允许您配置各种HTTP功能，包括路由、重试、负载均衡、超时等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters:</span>                           <span class="comment"># 过滤器列表</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envoy.http_connection_manager</span>   <span class="comment"># 使用 Envoy 的 HTTP 连接管理器过滤器</span></span><br><span class="line">    <span class="attr">typed_config:</span>                   <span class="comment"># 配置该过滤器的类型和参数</span></span><br><span class="line">      <span class="string">&quot;@type&quot;</span><span class="string">:</span> <span class="string">type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager</span></span><br><span class="line">      <span class="attr">codec_type:</span> <span class="string">HTTP2</span>             <span class="comment"># 使用 HTTP/2 编解码器</span></span><br><span class="line">      <span class="attr">stat_prefix:</span> <span class="string">ingress_http</span>     <span class="comment"># 用于生成统计信息的前缀</span></span><br><span class="line">      <span class="attr">route_config:</span>                  <span class="comment"># 路由配置</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">local_route</span>           <span class="comment"># 路由的名称</span></span><br><span class="line">        <span class="attr">virtual_hosts:</span>               <span class="comment"># 虚拟主机列表</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="clusters（集群）"><a href="#clusters（集群）" class="headerlink" title="clusters（集群）"></a>clusters（集群）</h5></li></ul><p>clusters 字段用于定义集群（clusters）。集群是Envoy用于负载均衡和路由请求的基本单元，定义后端服务的地址、端口、协议等信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span>  <span class="string">name：</span> <span class="string">定义集群的名称。</span></span><br><span class="line"><span class="bullet">-</span>  <span class="string">type：</span> <span class="string">指定集群类型，如</span> <span class="string">static,</span> <span class="string">strict_dns,</span> <span class="string">sds</span> <span class="string">等。</span></span><br><span class="line"><span class="bullet">-</span>  <span class="string">connect_timeout：</span> <span class="string">连接超时时间。</span></span><br><span class="line"><span class="bullet">-</span>  <span class="string">lb_policy：</span> <span class="string">负载均衡策略，如</span> <span class="string">round_robin,</span> <span class="string">least_request</span> <span class="string">等。</span></span><br><span class="line"><span class="bullet">-</span>  <span class="string">hosts：</span> <span class="string">指定集群的后端主机。</span></span><br><span class="line"><span class="bullet">-</span>  <span class="string">tls_context：</span> <span class="string">配置</span> <span class="string">TLS。</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="routes（路由）"><a href="#routes（路由）" class="headerlink" title="routes（路由）"></a>routes（路由）</h5></li></ul><p>routes 字段用于定义路由规则。路由规则确定了Envoy在接收到请求时应该将其转发到哪个后端服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="bullet">-</span>   <span class="string">prefix：</span> <span class="string">URL</span> <span class="string">前缀匹配。</span></span><br><span class="line"><span class="bullet">-</span>   <span class="string">cluster：</span> <span class="string">指定请求应该转发到的集群。</span></span><br><span class="line"><span class="bullet">-</span>   <span class="string">timeout：</span> <span class="string">设置请求超时时间。</span></span><br><span class="line"><span class="bullet">-</span>   <span class="string">retry_policy：</span> <span class="string">配置请求重试策略。</span></span><br></pre></td></tr></table></figure><ul><li><h5 id="admin（管理控制）"><a href="#admin（管理控制）" class="headerlink" title="admin（管理控制）"></a>admin（管理控制）</h5></li></ul><p>admin是用于提供管理和监控功能的配置选项。通过 Envoy 的 admin&#96;接口，用户可以查看运行时统计信息、配置信息，执行一些诊断命令等</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">admin:</span></span><br><span class="line"><span class="bullet">-</span>   <span class="string">access_log_path：</span> <span class="string">指定访问日志文件的路径。</span></span><br><span class="line"><span class="bullet">-</span>   <span class="string">address：指定</span> <span class="string">Envoy</span> <span class="string">管理界面的监听地址和端口。</span></span><br></pre></td></tr></table></figure><p>以下是一份配置实例，在项目目录打开终端，输入以下命令创建配置文件，并将配置内容复制到文件中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> envoy_conf.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Envoy 管理配置</span></span><br><span class="line"><span class="attr">admin:</span></span><br><span class="line">  <span class="comment"># 访问日志路径</span></span><br><span class="line">  <span class="attr">access_log_path:</span> <span class="string">&quot;/home/zhg/Mine/Workplace/getenvoy/envoy.log&quot;</span></span><br><span class="line">  <span class="comment"># 管理界面监听地址和端口</span></span><br><span class="line">  <span class="attr">address:</span></span><br><span class="line">    <span class="attr">socket_address:</span></span><br><span class="line">      <span class="attr">address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">      <span class="attr">port_value:</span> <span class="number">10001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态资源配置</span></span><br><span class="line"><span class="attr">static_resources:</span></span><br><span class="line">  <span class="attr">listeners:</span></span><br><span class="line">    <span class="comment"># 定义一个监听器，监听在 0.0.0.0:10000</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">address:</span></span><br><span class="line">        <span class="attr">socket_address:</span> &#123; <span class="attr">protocol:</span> <span class="string">TCP</span>, <span class="attr">address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>, <span class="attr">port_value:</span> <span class="number">10000</span> &#125;</span><br><span class="line">      <span class="attr">filter_chains:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">filters:</span></span><br><span class="line">            <span class="comment"># 使用 HTTP 连接管理器过滤器</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envoy.filters.network.http_connection_manager</span></span><br><span class="line">              <span class="attr">typed_config:</span></span><br><span class="line">                <span class="string">&quot;@type&quot;</span><span class="string">:</span> <span class="string">type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager</span></span><br><span class="line">                <span class="attr">codec_type:</span> <span class="string">auto</span></span><br><span class="line">                <span class="attr">stat_prefix:</span> <span class="string">http</span></span><br><span class="line">                <span class="attr">access_log:</span></span><br><span class="line">                  <span class="comment"># 记录 HTTP 请求到文件</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envoy.access_loggers.file</span></span><br><span class="line">                    <span class="attr">typed_config:</span></span><br><span class="line">                      <span class="string">&quot;@type&quot;</span><span class="string">:</span> <span class="string">type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog</span></span><br><span class="line">                      <span class="attr">path:</span> <span class="string">&quot;/home/zhg/Mine/Workplace/getenvoy/envoy_http.log&quot;</span></span><br><span class="line">                      <span class="attr">log_format:</span></span><br><span class="line">                        <span class="attr">text_format:</span> <span class="string">|</span></span><br><span class="line"><span class="string">                          &gt;&gt;&gt;&gt;</span></span><br><span class="line"><span class="string">                          start_time: &quot;%START_TIME%&quot;  </span></span><br><span class="line"><span class="string">                          method: &quot;%REQ(:METHOD)%&quot;, original_path: &quot;%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%&quot;, protocol: &quot;%PROTOCOL%&quot;, response_code: &quot;%RESPONSE_CODE%&quot;, response_flags: &quot;%RESPONSE_FLAGS%&quot;</span></span><br><span class="line"><span class="string">                          user_agent: &quot;%REQ(USER-AGENT)%&quot;</span></span><br><span class="line"><span class="string">                          authority: &quot;%REQ(:AUTHORITY)%&quot;</span></span><br><span class="line"><span class="string">                          upstream_host: &quot;%UPSTREAM_HOST%&quot;</span></span><br><span class="line"><span class="string">                          request_id: &quot;%REQ(X-REQUEST-ID)%&quot;</span></span><br><span class="line"><span class="string">                          custom_header: &quot;%REQ(custom_header)%&quot;</span></span><br><span class="line"><span class="string">                          static_header: &quot;%REQ(static_header)%&quot;</span></span><br><span class="line"><span class="string"></span>                <span class="attr">route_config:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">search_route</span></span><br><span class="line">                  <span class="attr">virtual_hosts:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">backend</span></span><br><span class="line">                      <span class="attr">domains:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">                      <span class="attr">routes:</span></span><br><span class="line">                        <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">                            <span class="attr">prefix:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">                          <span class="attr">route:</span></span><br><span class="line">                            <span class="comment"># 将请求发送到 baidu 集群</span></span><br><span class="line">                            <span class="attr">cluster:</span> <span class="string">baidu</span></span><br><span class="line">                <span class="attr">http_filters:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">envoy.filters.http.router</span></span><br><span class="line">                    <span class="attr">typed_config:</span></span><br><span class="line">                      <span class="string">&quot;@type&quot;</span><span class="string">:</span> <span class="string">type.googleapis.com/envoy.extensions.filters.http.router.v3.Router</span></span><br><span class="line">  <span class="attr">clusters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">baidu</span></span><br><span class="line">      <span class="attr">connect_timeout:</span> <span class="string">1s</span></span><br><span class="line">      <span class="comment"># 使用 STRICT_DNS 模式进行 DNS 解析</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">STRICT_DNS</span></span><br><span class="line">      <span class="attr">dns_lookup_family:</span> <span class="string">V4_ONLY</span></span><br><span class="line">      <span class="attr">lb_policy:</span> <span class="string">round_robin</span></span><br><span class="line">      <span class="attr">load_assignment:</span></span><br><span class="line">        <span class="attr">cluster_name:</span> <span class="string">baidu</span></span><br><span class="line">        <span class="attr">endpoints:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">lb_endpoints:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="attr">endpoint:</span></span><br><span class="line">                  <span class="attr">address:</span></span><br><span class="line">                    <span class="attr">socket_address:</span></span><br><span class="line">                      <span class="comment"># 目标服务器地址</span></span><br><span class="line">                      <span class="attr">address:</span> <span class="string">www.baidu.com</span></span><br><span class="line">                      <span class="attr">port_value:</span> <span class="number">80</span></span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="3-运行envoy"><a href="#3-运行envoy" class="headerlink" title="3 运行envoy"></a>3 运行envoy</h2><p>写好配置文件后，就可以在项目目录打开终端，输入以下命令启动envoy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 通过静态配置文件直接启动 Envoy</span></span><br><span class="line"><span class="comment"># -l debug ：设置日志级别为debug，可省略</span></span><br><span class="line">./envoy -c envoy_conf.yaml -l debug</span><br><span class="line"></span><br><span class="line">//查看帮助</span><br><span class="line">envoy --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><h3 id="4-1-查看envoy-admin"><a href="#4-1-查看envoy-admin" class="headerlink" title="4.1 查看envoy admin"></a>4.1 查看envoy admin</h3><p>打开浏览器，输入localhost:10001，可以看到envoy已经启动起来，可以正常访问admin页面</p><p><img src="https://img.kdsunset.top/img/ubuntufd/20240130153121.png"></p><h3 id="4-2-代理配置验证"><a href="#4-2-代理配置验证" class="headerlink" title="4.2 代理配置验证"></a>4.2 代理配置验证</h3><h4 id="普通-curl-请求"><a href="#普通-curl-请求" class="headerlink" title="普通 curl 请求"></a>普通 curl 请求</h4><ul><li>curl -vvv baidu.com<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">zhg@zhg-pc:~/Mine/Workplace/envoytest$ curl -vvv baidu.com</span><br><span class="line">*   Trying 39.156.66.10:80...</span><br><span class="line">* Connected to baidu.com (39.156.66.10) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: baidu.com</span><br><span class="line">&gt; User-Agent: curl/7.81.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Thu, 16 Nov 2023 03:42:54 GMT</span><br><span class="line">&lt; Server: Apache</span><br><span class="line">&lt; Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</span><br><span class="line">&lt; ETag: <span class="string">&quot;51-47cf7e6ee8400&quot;</span></span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Content-Length: 81</span><br><span class="line">&lt; Cache-Control: max-age=86400</span><br><span class="line">&lt; Expires: Fri, 17 Nov 2023 03:42:54 GMT</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;refresh&quot;</span> content=<span class="string">&quot;0;url=http://www.baidu.com/&quot;</span>&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">* Connection <span class="comment">#0 to host baidu.com left intact</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="使用-curl-访问-Envoy，并添加-Header-字段-host-baidu-com"><a href="#使用-curl-访问-Envoy，并添加-Header-字段-host-baidu-com" class="headerlink" title="使用 curl 访问 Envoy，并添加 Header 字段 host: baidu.com"></a>使用 curl 访问 Envoy，并添加 Header 字段 host: baidu.com</h4><ul><li>curl -v -H ‘Host: baidu.com’ 127.0.0.1:10000</li><li>可以看到请求被转发到了 baidu.com，在响应头中，<code>server: envoy</code> 表示服务器使用的是 Envoy 代理。这是 Envoy 代理的标识，表示请求经过了 Envoy<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">zhg@zhg-pc:~/Mine/Workplace/envoytest$ curl -vvv -H <span class="string">&#x27;Host: baidu.com&#x27;</span> 127.0.0.1:15001</span><br><span class="line">*   Trying 127.0.0.1:15001...</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 15001 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: baidu.com</span><br><span class="line">&gt; User-Agent: curl/7.81.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">* Mark bundle as not supporting multiuse</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; accept-ranges: bytes</span><br><span class="line">&lt; cache-control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">&lt; content-length: 2381</span><br><span class="line">&lt; content-type: text/html</span><br><span class="line">&lt; <span class="built_in">date</span>: Thu, 16 Nov 2023 03:45:17 GMT</span><br><span class="line">&lt; etag: <span class="string">&quot;588604dc-94d&quot;</span></span><br><span class="line">&lt; last-modified: Mon, 23 Jan 2017 13:27:56 GMT</span><br><span class="line">&lt; pragma: no-cache</span><br><span class="line">&lt; server: envoy</span><br><span class="line">&lt; set-cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br><span class="line">&lt; x-envoy-upstream-service-time: 18</span><br><span class="line">&lt; </span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">...省略...</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">* Connection <span class="comment">#0 to host 127.0.0.1 left intact</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-代理到本机web服务"><a href="#4-3-代理到本机web服务" class="headerlink" title="4.3 代理到本机web服务"></a>4.3 代理到本机web服务</h3><h4 id="4-3-1-修改配置"><a href="#4-3-1-修改配置" class="headerlink" title="4.3.1 修改配置"></a>4.3.1 修改配置</h4><p>在clusters字段下增加一个名为”localserver”的集群，配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">clusters:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">baidu</span></span><br><span class="line">    <span class="attr">connect_timeout:</span> <span class="string">1s</span></span><br><span class="line">    <span class="comment"># 使用 STRICT_DNS 模式进行 DNS 解析</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">STRICT_DNS</span></span><br><span class="line">    <span class="attr">dns_lookup_family:</span> <span class="string">V4_ONLY</span></span><br><span class="line">    <span class="attr">lb_policy:</span> <span class="string">round_robin</span></span><br><span class="line">    <span class="attr">load_assignment:</span></span><br><span class="line">      <span class="attr">cluster_name:</span> <span class="string">baidu</span></span><br><span class="line">      <span class="attr">endpoints:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">lb_endpoints:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">endpoint:</span></span><br><span class="line">                <span class="attr">address:</span></span><br><span class="line">                  <span class="attr">socket_address:</span></span><br><span class="line">                    <span class="comment"># 目标服务器地址</span></span><br><span class="line">                    <span class="attr">address:</span> <span class="string">www.baidu.com</span></span><br><span class="line">                    <span class="attr">port_value:</span> <span class="number">80</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">localserver</span></span><br><span class="line">    <span class="attr">connect_timeout:</span> <span class="string">1s</span></span><br><span class="line">    <span class="comment"># 使用 STATIC 模式，直接指定目标地址</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">STATIC</span></span><br><span class="line">    <span class="attr">dns_lookup_family:</span> <span class="string">V4_ONLY</span></span><br><span class="line">    <span class="attr">lb_policy:</span> <span class="string">round_robin</span></span><br><span class="line">    <span class="attr">load_assignment:</span></span><br><span class="line">      <span class="attr">cluster_name:</span> <span class="string">localserver</span></span><br><span class="line">      <span class="attr">endpoints:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">lb_endpoints:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">endpoint:</span></span><br><span class="line">                <span class="attr">address:</span></span><br><span class="line">                  <span class="attr">socket_address:</span></span><br><span class="line">                    <span class="comment"># 本地服务器地址</span></span><br><span class="line">                    <span class="attr">address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">                    <span class="attr">port_value:</span> <span class="number">9001</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>并将routes的cluster 修改为改localserver</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">match:</span></span><br><span class="line">      <span class="attr">prefix:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="attr">route:</span></span><br><span class="line">      <span class="comment"># 将请求发送到 baidu 集群</span></span><br><span class="line">      <span class="attr">cluster:</span> <span class="string">localserver</span></span><br></pre></td></tr></table></figure><h4 id="4-3-2-使用Python搭建简易HTTP-服务器"><a href="#4-3-2-使用Python搭建简易HTTP-服务器" class="headerlink" title="4.3.2  使用Python搭建简易HTTP 服务器"></a>4.3.2  使用Python搭建简易HTTP 服务器</h4><p> 适用：小型 web 项目在局域网内的预览</p><h4 id="编写网页"><a href="#编写网页" class="headerlink" title="编写网页"></a>编写网页</h4><p>新建项目目录和文件：web&#x2F;index.html，并输入以下内容，创建一个简易的网页以进行验证。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     WebServer for hello Envoy! </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-3-3-启动http服务器"><a href="#4-3-3-启动http服务器" class="headerlink" title="4.3.3 启动http服务器"></a>4.3.3 启动http服务器</h4><p>在项目目录运行以下命令启动http服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务器默认监听端口是 8000，支持自定义端口号</span></span><br><span class="line">python3 -m http.server 9001</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器默认工作目录为当前目录，可通过 -d/--directory 参数指定工作目录</span></span><br><span class="line"><span class="comment"># python -m http.server --directory /tmp/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-3-4-验证地址"><a href="#4-3-4-验证地址" class="headerlink" title="4.3.4 验证地址"></a>4.3.4 验证地址</h4><ul><li><ol><li>输入以下命令获取ubuntu的本机IP地址，假设ip是192.168.2.30<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ubuntu 查看本机ip地址</span></span><br><span class="line">$ ip a</span><br></pre></td></tr></table></figure></li></ol></li><li>2.访问网页<br>例如ubuntu虚拟机所在的主机，使用浏览器连接ubuntu的ip地址，端口是envoy的监听端口9000，即<blockquote><p><a href="http://192.168.2.30:10000/">http://192.168.2.30:10000/</a></p></blockquote></li><li>这时候应该能看到Ubuntu本地服务器web&#x2F;index.html网页的内容,注意这里用的是10000端口，这是envoy程序的监听端口，如果是9001则是http服务器的端口，</li></ul><p><img src="https://img.kdsunset.top/img/ubuntufd/20240130154358.png"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[1] <a href="https://www.envoyproxy.io/docs/envoy/latest/">envoy Official documentation</a><br>[2] <a href="https://cloudnative.to/envoy/index.html"> 安装 – Envoy 中文指南, by cloudnative</a><br>[3] <a href="https://icloudnative.io/envoy-handbook/docs/gettingstarted/quick-start/">Envoy 文档, by icloudnative</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
            <tag> envoy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 22.04 安装教程及使用技巧</title>
      <link href="/u22tuits/"/>
      <url>/u22tuits/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-22-04-安装教程及使用技巧"><a href="#Ubuntu-22-04-安装教程及使用技巧" class="headerlink" title="Ubuntu 22.04 安装教程及使用技巧"></a>Ubuntu 22.04 安装教程及使用技巧</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通常所说的 Linux 其是指Linux内核，Linux 系统是指基于 Linux 内核的操作系统的泛称，而不是一个具体的操作系统。Ubuntu 则是 Linux 其中一个发行版，其他比较知名的还有 Debian、Fedora、CentOS等。<br/></p><p>作为程序员，我们可以用使用 Ubuntu 系统来体验 Linux、 熟悉命令行操作、部署服务器、搭建梯子和交叉编译，如编译 Android 项目所需的so库，编译 Android 系统源码等等。本文将面向新手介绍在 VMware 中安装和配置 Ubuntu 的过程，以及一些常用的技巧和命令。</p><p>本文所用环境</p><ul><li>VMware Workstation 17 Pro</li><li>Ubuntu 22.04.3 LTS Desktop 64-bit</li></ul><h2 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1 下载镜像"></a>1 下载镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Ubuntu官方网站</span><br><span class="line">https://cn.ubuntu.com/download/desktop</span><br></pre></td></tr></table></figure><p>在Ubuntu官网下iso镜像文件，同时也可看到官方推荐的Ubuntu配置要求<br><img src="https://img.kdsunset.top/img/u22tuits/20240130110523.png"></p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h2><h3 id="2-1-VMware虚拟机安装"><a href="#2-1-VMware虚拟机安装" class="headerlink" title="2.1 VMware虚拟机安装"></a>2.1 VMware虚拟机安装</h3><p>如果对性能要求不是很严格，通常选择在虚拟机环境中使用Ubuntu即可。如果有一台电脑专门用来安装Ubuntu，则跟Windows重装系统的前置步骤是一样的：制作Ubuntu的U盘启动盘-&gt;bios设置U盘启动-&gt;进入菜单开始安装，这里主要讲虚拟机的安装方式。<br>ps：VMware Workstation 有Player和pro两款，pro功能更多，带有快照功能。</p><ol><li>打开VMware，选择新建虚拟机-&gt;自定义，方便我们进行详细配置</li></ol><p><img src="https://img.kdsunset.top/img/u22tuits/20240130110746.png"></p><p>2. 点击下一步，虚拟机兼容性保持默认</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130110801.png"></p><p>3. 安装来源区别就是，选择Ubuntu镜像文件会自动开启简易安装，默认开启英文的Ubuntu安装引导，这里选择“稍后安装操作系统”</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130110902.png"></p><p>4. 根据下载的镜像文件选择操作系统类型Linux，默认下载的是64位镜像</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130110936.png"></p><p>5. 选择安装位置，如果是需要进行编译等需要频繁读写磁盘的操作，强烈建议安装到SSD硬盘。</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111039.png"></p><p>6. 选择CPU配置</p><ul><li>处理器数量 ：想要虚拟的CPU颗数。对应物理主机的cpu插槽数，除了多路服务器，家用机一般一个U，</li><li>每个处理器的内核数量：想要虚拟的CPU内核数。对应物理主机的超线程支持的线程数</li><li>处理器内核总数：处理器数量x每个处理器的内核数量</li></ul><p>总的原则是：虚拟机处理器内核总数：&lt; 物理主机CPU实际的线程数，例如对于6核12线程的cpu能使用的最大处理器内核总数为12个</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111102.png"></p><p>7. 内存选择。根据需求选择，没什么需求就按默认推荐的4GB</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111118.png"></p><p>8. 网络选择，这里选择NAT模式或者桥接都可以。</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111131.png"></p><p>模式区别如下：</p><ul><li>桥接模式：虚拟机加入宿主机所在的网络，允许访问Internet互联网（当然宿主机必须可以访问互联网才行）。可以将虚拟机看做一台新电脑，主机、虚拟机和其他电脑三者通过所在局域网，互联互通。</li><li>NAT模式：虚拟机和宿主机组成小局域网，互联互通。虚拟机通过宿主机访问外部网络（此时宿主机起到路由器作用），但外部网络不能访问虚拟机。</li><li>仅主机模式：宿主机与虚拟机组成一个封闭的局域网，虚拟机不能访问外部网络、互联网，外部网络也不能访问虚拟机。</li></ul><ol start="9"><li>磁盘选择，IO控制器和虚拟磁盘类型选择软件推荐即可，影响不大，主要是选择磁盘大小，装Ubuntu建议20G以上，后期也可扩容。</li></ol><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111146.png"></p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111205.png"></p><p>10. 添加Ubuntu系统镜像文件<br>点击自定义硬件-&gt;添加，在添加硬件向导窗口选择“CD&#x2F;DVD驱动器”并按确认。点击CD&#x2F;DVD驱动器，在“使用ISO影像文件”选择前面下载的iso文件</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111222.png"></p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111333.png"></p><p>至此，VMware Ubuntu虚拟机配置部分已经完成，下面开始安装Ubuntu。<br><br/></p><h3 id="2-2-安装Ubuntu系统"><a href="#2-2-安装Ubuntu系统" class="headerlink" title="2.2 安装Ubuntu系统"></a>2.2 安装Ubuntu系统</h3><p>从VMware中选择刚才新建的虚拟机，点击“开启此虚拟机”。虚拟机运行后选择（按回车）“Try or Install Ubuntu”</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111443.png"></p><ol><li>选择系统语言，这里为了方便演示安装过程选择中文，安装好之后系统就是中文的了，不过主文件下的目录也是中文命名（强迫症震怒），然后点击“安装Ubuntu”</li></ol><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111855.png"></p><ol start="2"><li>选择键盘布局</li></ol><p>如果这里这里没有显示“继续”按钮，可能是Ubuntu的分辨率不对导致显示不全，可以关闭安装引导窗口，右键选择“Display Setting”-&gt;Resolution重新选择分辨率即可</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130111939.png"></p><ol start="3"><li>软件更新选择，按需或随意</li></ol><p><img src="https://img.kdsunset.top/img/u22tuits/20240130112013.png"></p><ol start="4"><li>安装类型，可以选择自动分区，清除整个磁盘并安装Ubuntu，由于前面在VMware选择的是虚拟磁盘，可以大胆继续，不会对物理磁盘有影响。</li></ol><p><img src="https://img.kdsunset.top/img/u22tuits/20240130112058.png"></p><ol start="5"><li>选择时区，点击地图选择上海就是<strong>UTC+8</strong>。（为什么没有Asia&#x2F;Beijing？这个大概是中国时区划分的历史原因了，一直没有更新）</li></ol><p><img src="https://img.kdsunset.top/img/u22tuits/20240130112143.png"></p><ol start="6"><li>设置信息和密码</li></ol><p><img src="https://img.kdsunset.top/img/u22tuits/20240130112220.png"></p><ol start="7"><li>等待安装并重启</li></ol><p><img src="https://img.kdsunset.top/img/u22tuits/20240130112254.png"></p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130113250.png"></p><ol start="8"><li>完成~</li></ol><p><img src="https://img.kdsunset.top/img/u22tuits/20240130145446.png"></p><h2 id="3-使用技巧"><a href="#3-使用技巧" class="headerlink" title="3 使用技巧"></a>3 使用技巧</h2><h4 id="3-1-切换系统语言为中文"><a href="#3-1-切换系统语言为中文" class="headerlink" title="3.1 切换系统语言为中文"></a>3.1 切换系统语言为中文</h4><p>如果安装过程选择的是英文，可以通过以下方式切换到中文：<br>右键选择”Display Settings”-&gt;左侧菜单栏切换到”Region&amp;Language”-&gt;在”Language”选项中选择”Chinese”,重启完成<br>如果没有中文选择，则选择Manage Installed Languages 安装中文语言包</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130113538.png"></p><h4 id="3-2-换源"><a href="#3-2-换源" class="headerlink" title="3.2 换源"></a>3.2 换源</h4><p>系统默认的软件源服务器位于国外，如果出现下载软件包很慢或者无法下载的问题，可以将官方源替换成国内镜像源或者设置科学上网以提高软件下载和安装的速度。</p><p>打开系统设置-&gt;关于-&gt;软件更新-&gt;Ubuntu软件，点击“下载自:”-&gt;其他，选择国内的源或者通过“测试最佳服务器”选择网络连接更稳定的源</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130114106.png"></p><h4 id="3-3-虚拟机使用主机的网络代理"><a href="#3-3-虚拟机使用主机的网络代理" class="headerlink" title="3.3 虚拟机使用主机的网络代理"></a>3.3 虚拟机使用主机的网络代理</h4><p>如果主机配置了科学上网，可以通过如下方式使虚拟机也连接上代理，这里以v2ray为例：</p><ol><li>v2ray参数设置勾选“允许来自局域网的连接”</li><li>Ubuntu设置-网络-网络代理，填写Http、Https、Socks设置，</li></ol><p>其中IP地址是主机的IP地址（“以太网适配器-以太网”），端口号是v2ray窗口底部导航栏“局域网[socks:xxxx][http:xxxy]”中的端口号，虚拟机网卡选桥接还是NAT都可以，v2ray也不用选全局路由。</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130114426.png"></p><h4 id="3-4-Ubuntu与宿主机互相复制文本或文件"><a href="#3-4-Ubuntu与宿主机互相复制文本或文件" class="headerlink" title="3.4 Ubuntu与宿主机互相复制文本或文件"></a>3.4 Ubuntu与宿主机互相复制文本或文件</h4><p>如果是Ubuntu server 可以使用lrzsz或其他ftp工具进行文件的上传或下载，在VMware中有更方便的插件<br>：VMware Tools，不过兼容性不好，更推荐使用open-vm-tools，如果是桌面版使用open-vm-tools-desktop功能更多</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查是否安装open-vm-tools有则卸载</span></span><br><span class="line">sudo apt remove open-vm-tools</span><br><span class="line"><span class="comment"># 安装open-vm-tools-desktop</span></span><br><span class="line">sudo apt install open-vm-tools-desktop</span><br></pre></td></tr></table></figure><h4 id="3-5-配置环境变量"><a href="#3-5-配置环境变量" class="headerlink" title="3.5 配置环境变量"></a>3.5 配置环境变量</h4><p>.bashrc文件是用于储存用户的终端配置，包括环境变量等，以配置java环境变量为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查是否安装jdk</span></span><br><span class="line">java -version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装openjdk-11</span></span><br><span class="line">sudo apt-get install openjdk-11-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开bashrc文件</span></span><br><span class="line">sudo gedit ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#在最后一行加上:</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使环境变量马上生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="3-6-快照功能"><a href="#3-6-快照功能" class="headerlink" title="3.6 快照功能"></a>3.6 快照功能</h4><p>快照功能是一个非常实用的功能，类似系统的还原点，不管如何瞎折腾都可以将操作系统快速还原到某个时刻，一般在搭好环境后就可以打个快照。VMware也提供了快照管理功能，位置在菜单栏“虚拟机”-&gt;快照。</p><p><img src="https://img.kdsunset.top/img/u22tuits/20240130142754.png"></p><h4 id="3-7-磁盘扩容"><a href="#3-7-磁盘扩容" class="headerlink" title="3.7 磁盘扩容"></a>3.7 磁盘扩容</h4><p>当Ubuntu的磁盘空间不足时，可以通过扩容的方式（当然物理硬盘还有剩余空间）增加磁盘大小。可以通过<strong>df -h</strong>查看当前磁盘状态。我们使用的是Ubuntu desktop，可以直接通过软件界面进行调整。<br>例如当初分配给Ubuntu的硬盘大小只有25G，现在扩容到30G：</p><ul><li>点击“编辑虚拟机设置”-&gt;硬件-&gt;硬盘-&gt;扩展，设置新容量大小</li><li>Ubuntu侧边栏的显示应用程序-&gt;工具文件夹-&gt;“磁盘”应用，点击Hard Disk，可以发现多了一块未分配空间，<br>在需要扩容的分区点击齿轮图标选择调整大小，输入调整的大小并确认。</li></ul><p><img src="https://img.kdsunset.top/img/u22tuits/20240130115644.png"><br><img src="https://img.kdsunset.top/img/u22tuits/20240130115737.png"></p><h2 id="4-常用命令"><a href="#4-常用命令" class="headerlink" title="4 常用命令"></a>4 常用命令</h2><h4 id="4-1-软件管理"><a href="#4-1-软件管理" class="headerlink" title="4.1 软件管理"></a>4.1 软件管理</h4><p>apt是一个Shell 前端软件包管理器，提供软件包的安装、更新和卸载等功能，使用apt命令需要root权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以git为例</span></span><br><span class="line"><span class="comment"># 检查可用的软件包更新</span></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">sudo apt remove git </span><br></pre></td></tr></table></figure><h4 id="4-2-文件处理"><a href="#4-2-文件处理" class="headerlink" title="4.2 文件处理"></a>4.2 文件处理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建文件</span></span><br><span class="line"><span class="built_in">touch</span> filename.suffix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录，-p：确保目录名称存在，不存在的就建一个，可以用来创建多层目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p app/src/main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动文件</span></span><br><span class="line"><span class="built_in">mv</span> [options] sourcefile directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名</span></span><br><span class="line"><span class="built_in">mv</span> [options] oldname newname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件</span></span><br><span class="line"><span class="built_in">cp</span> [options] sourcefile directory</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件，-r：删除包括所有子文件，-f：直接删除，谨慎使用rm -rf</span></span><br><span class="line"><span class="built_in">rm</span> filename</span><br></pre></td></tr></table></figure><h4 id="4-3-解压文件"><a href="#4-3-解压文件" class="headerlink" title="4.3 解压文件"></a>4.3 解压文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ​.tar.gz 和 .tgz​格式</span></span><br><span class="line">$ tar zxvf FileName.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#.zip格式</span></span><br><span class="line">unzip FileName.zip</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-4-创建root用户"><a href="#4-4-创建root用户" class="headerlink" title="4.4 创建root用户"></a>4.4 创建root用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建root用户，依照提示输入密码</span></span><br><span class="line">sudo passwd root</span><br><span class="line"></span><br><span class="line"><span class="comment">#进入root用户</span></span><br><span class="line">su root</span><br></pre></td></tr></table></figure><h4 id="4-5-同步时间"><a href="#4-5-同步时间" class="headerlink" title="4.5 同步时间"></a>4.5 同步时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看时间</span></span><br><span class="line"><span class="built_in">date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用ntpdate同步网络时间</span></span><br><span class="line">sudo apt install ntpdate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从cn.pool.ntp.org服务器同步网络时间</span></span><br><span class="line">ntpdate -u cn.pool.ntp.org</span><br></pre></td></tr></table></figure><h4 id="4-6-查找文件里符合条件的字符串"><a href="#4-6-查找文件里符合条件的字符串" class="headerlink" title="4.6 查找文件里符合条件的字符串"></a>4.6 查找文件里符合条件的字符串</h4><p>在当前文件夹下搜索文件里面的字符内容，-r表示递归查找子目录中的文件，-w表示只显示全字符合的列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -rw <span class="string">&quot;search&quot;</span> </span><br></pre></td></tr></table></figure><h4 id="4-7-vim-简单使用"><a href="#4-7-vim-简单使用" class="headerlink" title="4.7 vim 简单使用"></a>4.7 vim 简单使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">vim filename.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑文件</span></span><br><span class="line"><span class="comment"># 1.打开文件后默认命令模式，按“i”进入编辑模式</span></span><br><span class="line"><span class="comment"># 2.编辑完成，按“esc”返回命令模式，此时可以进行保存等操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出文件</span></span><br><span class="line"><span class="comment"># 1.保存并退出</span></span><br><span class="line">:wq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.放弃修改并退出</span></span><br><span class="line">:q!</span><br></pre></td></tr></table></figure><h4 id="4-8-其他"><a href="#4-8-其他" class="headerlink" title="4.8 其他"></a>4.8 其他</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改所有用户组对文件的权限为最高权限(可读可写可执行）</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 filename </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件的内容，输出到终端</span></span><br><span class="line"><span class="built_in">cat</span> filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将终端内容输出到文件，免去手动复制终端内容</span></span><br><span class="line">script -f -a /path/log.txt</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上便是Ubuntu从虚拟机配置参数讲解到Ubuntu安装的全过程，以及一些个人认为比较实用的使用技巧。至于命令，如果是体验Linux记不住也没关系，当你有实际需求时，例如交叉编译源码，你会记住的。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown快速上手</title>
      <link href="/235d6111/"/>
      <url>/235d6111/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown快速上手"><a href="#Markdown快速上手" class="headerlink" title="Markdown快速上手"></a>Markdown快速上手</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Markdown是一种轻量的标记语言，它可以使原来的纯文本内容带上排版格式，原理就是用简单的标记符号编辑文本然后转换成HTML，多被用来写博文、README、开发文档、帮助文档，云笔记等。对于更复杂排版还是建议使用专门的如word等文字处理软件，它们各有所长，我们要做的是在不同的场景选择称手的工具。</p><h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1 基本语法"></a>1 基本语法</h2><p>Markdown是如此轻量，语法标签很少，十分钟可以上手。</p><h3 id="1-1-标题"><a href="#1-1-标题" class="headerlink" title="1.1 标题"></a>1.1 标题</h3><p><strong>（1）语法</strong><br>语法：<code>#</code> 标题文字</p><p>要写文章，首先要有个标题，Markdown中用<code>#</code>来标识标题，<code>#</code> 的数量代表了标题的级别，一共有1到6级标题，一个<code>#</code>是字号最大的标题，6个<code>#</code>是字号最小的标题。</p><p><strong>（2）书写规范</strong><br>一般情况下不建议使用超过四层标题。具体什么标题用多大的字号参考：</p><blockquote><p>一级标题：文章的标题<br>二级标题：文章主要部分的大标题<br>三级标题：二级标题下面一级的小标题<br>四级标题：三级标题下面某一方面的小标题</p></blockquote><p><strong>（3）标题序号</strong><br>如果需要为标题加上序号，可以参考论文中的标题序号规范：</p><blockquote><p>第一层：一、汉字数字加顿号<br> 第二层：（一）　括号中包含汉字数字<br> 第三层：1．阿拉伯数字加下脚点<br> 第四层：（1）括号中包含阿拉伯数字</p><p>第五层：① 带圈的阿拉伯数字,或者“1）”<br> 第六层：A. 第六层为大写英文字母，或者“（A）”<br> 第七层：a. 第七层为小写英文字母，或者“（a)”</p></blockquote><p>此外还可用阿拉伯数字连续编码，多用于理科类论文的各层次标题。不同层次的数字之间用半角圆点（.）分隔开，末位数字后面不加点号。如“1”，“1.2”，“1.2.1”等；各层次的标题序号均左顶格排写，最后一个序号之后空一个字距（一个全角空格）接排标题，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 软件手册文档结构</span></span><br><span class="line"><span class="section">## 1 简介</span></span><br><span class="line"><span class="section">### 1.1 入门篇</span></span><br><span class="line"><span class="section">#### 1.1.1 环境准备</span></span><br><span class="line"><span class="section">#### 1.1.2 安装</span></span><br><span class="line"><span class="section">## 2 进阶篇</span></span><br></pre></td></tr></table></figure><h3 id="1-2-段落"><a href="#1-2-段落" class="headerlink" title="1.2 段落"></a>1.2 段落</h3><p>语法：顶格书写，不需要缩进，段与段之间用空行隔开</p><p>在传统的文本编辑中，有些人习惯使用空格或制表符来手动缩进段落，以使文本看起来更整齐，在 Markdown 中采用的是齐头式，段落之间是通过空行来进行分隔的，Markdown 的设计理念是简洁、易读，一般在文章的开头不需要额外的缩进。</p><h3 id="1-3-换行"><a href="#1-3-换行" class="headerlink" title="1.3 换行"></a>1.3 换行</h3><p>语法：在一行的末尾空两个空格或者使用<code>&lt;br&gt;</code>，使用结尾空格在编辑器可能显示不出来，建议还是用<code>&lt;br&gt;</code>。</p><h3 id="1-4-字体效果"><a href="#1-4-字体效果" class="headerlink" title="1.4 字体效果"></a>1.4 字体效果</h3><p>语法：使用星号（<code>*</code>）括起来，中间没有空格，不同数量的星号有不同的效果。</p><ul><li>斜体：一个星号，例如<code>*斜体效果*</code>：<em>斜体效果</em></li><li>粗体：两个星号，例如<code>**加粗效果**</code>：<strong>加粗效果</strong></li><li>斜体并粗体：三个星号：例如<code>***加粗并倾斜***</code>：<em><strong>加粗并倾斜</strong></em></li><li>删除线：用两个波浪号（~）括起来：例如<code>~~这是删除线~~</code>：<del>这是删除线</del></li></ul><h3 id="1-5-引用"><a href="#1-5-引用" class="headerlink" title="1.5 引用"></a>1.5 引用</h3><p>语法：在需要引用的文字前加<code>&gt;</code>，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;我家门前两棵树，一棵是枣树，另一棵也是枣树</span><br></pre></td></tr></table></figure><p>效果：</p><blockquote><p>我家门前两棵树，一棵是枣树，另一棵也是枣树</p></blockquote><h3 id="1-6-列表"><a href="#1-6-列表" class="headerlink" title="1.6 列表"></a>1.6 列表</h3><p><strong>（1）有序列表</strong></p><p>语法：列表项前添加阿拉伯数字并紧跟一个半角句号，中间间隔一个空格。</p><p><strong>（2）无序列表</strong><br>语法：列表项前添加星号 (*) 并间隔一个空格</p><p>破折号 (-)、星号 (*) 或加号 (+)都可以用来表示无序列表，效果相同，为了避免方便记忆，多种表示方式都只介绍一种，下文同。</p><h3 id="1-7-代码"><a href="#1-7-代码" class="headerlink" title="1.7 代码"></a>1.7 代码</h3><p><strong>（1）单行</strong><br>语法：反引号 (`)括起来<br>例如将 <code>http://localhost/</code>用(`)括起来就能作为代码，而不是超链接。</p><p><strong>（2）代码块</strong><br>语法：用三个反引号 (```)括起来，每个（```）单独一行</p><ul><li>语法高亮：在第一个（&#96;&#96;&#96;）指定一种语言<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-8-分割线"><a href="#1-8-分割线" class="headerlink" title="1.8 分割线"></a>1.8 分割线</h3><p>语法：三个或以上的星号(*)，单独一行</p><h3 id="1-9-链接"><a href="#1-9-链接" class="headerlink" title="1.9 链接"></a>1.9 链接</h3><p><strong>（1）普通链接</strong><br>语法：<code>[链接描述](url,&quot;鼠标悬停文字（可选）&quot;)</code>，<br>例如<code>[google](https://www.google.com/，&quot;谷歌官网&quot;)</code>，效果：<a href="https://www.google.com/%EF%BC%8C%22%E8%B0%B7%E6%AD%8C%E5%AE%98%E7%BD%91%22">google</a></p><p><strong>（2）网址和邮箱地址</strong><br>语法：尖括号括起来</p><p><strong>（3）引用类型链接</strong><br>引用类型链接是一种更具可读性和可维护性的方式，可以将链接的定义与文本内容分离，使文档更清晰。<br>语法：<code>[链接描述][链接lable]</code>，然后在文末定义链接<code>[链接lable]:url</code>，<br>例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这是[<span class="string">Google的官方网站</span>][<span class="symbol">1</span>]。</span><br><span class="line"></span><br><span class="line">&lt;!--文末--&gt;</span><br><span class="line">[<span class="symbol">openai</span>]: <span class="link">https://www.google.com/</span></span><br></pre></td></tr></table></figure><p>效果:<br>这是[Google的官方网站] [1]<br>[1]: <a href="https://www.openai.com/">https://www.openai.com</a></p><h3 id="1-10-插入图片"><a href="#1-10-插入图片" class="headerlink" title="1.10 插入图片"></a>1.10 插入图片</h3><p>语法: <code>![图片alt](图片链接 &quot;图片title&quot;)</code>，相比链接语法多了一个叹号（!）</p><h2 id="2-扩展语法（选修）"><a href="#2-扩展语法（选修）" class="headerlink" title="2 扩展语法（选修）"></a>2 扩展语法（选修）</h2><h3 id="2-1-表格"><a href="#2-1-表格" class="headerlink" title="2.1 表格"></a>2.1 表格</h3><p>语法：下面是来自Markdown官方文档的描述</p><blockquote><p>要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用竖线（|）分隔每列。您可以选择在表的任一端添加竖线</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 列名1      | 列名2 |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>描述</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><ul><li>对齐<blockquote><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心</p></blockquote></li></ul><h3 id="2-2-时序图"><a href="#2-2-时序图" class="headerlink" title="2.2 时序图"></a>2.2 时序图</h3><p>Markdown通过扩展插件的方式，支持用文本生成UML图表，可以像写Markdown一样绘制UML图表。例如Mermaid就是这样一个开源的JavaScript库，可以用来绘制类图、饼图、流程图、时序图等，<br>虽然有点丑，但是胜在简单和不用手动拖拽对齐，复杂的时序图还是建议用专门的图表工具。</p><p>对于时序图，有样式时序图（Mermaid）和标准时序图（sequence），两种图表样式差不多，标准时序图连线更为工整。不同的Markdown编辑器支持程度不同，typora两种都支持，有道云笔记只支持Mermaid，根据自己常用的编辑选择。</p><p>时序图是用来描述一个系统之中对象之间交互和协作过程的图表。时序图用角色和对象表示系统中有哪些参与者，用箭头表示事件（消息&#x2F;动作）传递。纵向往下表示时间流逝，横向表示传递方向，往右是发起事件，往左是响应事件。</p><h4 id="2-2-1-样式时序图（Mermaid）"><a href="#2-2-1-样式时序图（Mermaid）" class="headerlink" title="2.2.1 样式时序图（Mermaid）"></a>2.2.1 样式时序图（Mermaid）</h4><p>我们对照UML时序图的常用元素来看Mermaid的时序图是如何实现的：</p><table><thead><tr><th>时序图元素</th><th>表示方式</th><th>Mermaid实现方式</th></tr></thead><tbody><tr><td>角色</td><td>火柴人，可省略</td><td>无</td></tr><tr><td>对象</td><td>矩形</td><td>使用<code>participant</code> 简短别名 <code>as</code> 对象全名创建</td></tr><tr><td>生命线</td><td>角色矩形下方的竖直虚线</td><td>Mermaid创建对象包含生命线</td></tr><tr><td>激活框</td><td>生命线上的一个窄矩形，表示某一阶段</td><td>开始语句：<code>activate</code> 对象A<br>结束语句：<code>deactivate</code> 对象A</td></tr><tr><td>发送消息</td><td><strong>实线</strong>箭头,指向接收者。如果严格区分区分，<br>则实心箭头表示同步消息（阻塞，等待响应），<br>小箭头表示异步，非阻塞。</td><td><code>-&gt;&gt;</code>，例如Ezekiel <code>-&gt;&gt;</code> Tony：What’s your name?</td></tr><tr><td>返回消息</td><td><strong>虚线</strong>小箭头，指向发送者</td><td><code>--&gt;&gt;</code>或者<code>--)</code>，例如Tony <code>--&gt;</code> Ezekiel: tony！</td></tr><tr><td>自关联消息</td><td>指向对象自身的箭头<br>即自我调用</td><td>对象A <code>-&gt;&gt;</code> 对象A</td></tr><tr><td>组合片段-循环</td><td>表示该片段重复执行，类似于for语句</td><td><code>Iterator-&gt;&gt;Array: 初始化遍历</code><br><code>loop  遍历数组&lt;br&gt;&amp;emsp;&amp;emsp; Array</code>–&gt;&gt;<code>Iterator: 返回下一个元素</code><br><code>Iterator--&gt;&gt;Iterator: 读取元素的值</code><br><code>end</code><br></td></tr><tr><td>组合片段-分支</td><td>选项（Opt）：可能发生，相当于单个if<br>抉择（Alt）:发生其中一个，相当于多个if</td><td><code>Client-&gt;&gt;Server: 发起 HTTP 请求</code><br><code>alt 请求成功 (200 OK)</code><br>&emsp;&emsp;<code>Server--&gt;&gt;Client: 返回 200 OK</code><br><code>else 请求失败 (404 Not Found) </code><br>&emsp;&emsp;<code>Server--&gt;&gt;Client: 返回 404 Not Found</code><br><code>end</code>，注<code>else</code>是可选的，省略则变成选项（Opt）&#96;</td></tr></tbody></table><p>Mermaid的时序图中还有各种箭头，以区别不同的消息类型，<del>不过简单使用的话我觉得没必要分这么细</del><br>代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">\<span class="code">```mermaid</span></span><br><span class="line"><span class="code">sequenceDiagram</span></span><br><span class="line"><span class="code">    title: 演示mermaid时序图中的各种箭头</span></span><br><span class="line"><span class="code">    participant E as Ezekiel</span></span><br><span class="line"><span class="code">    participant T as Tony</span></span><br><span class="line"><span class="code">    E-&gt;T: What&#x27;s your name?</span></span><br><span class="line"><span class="code">    T--&gt;E: WHAT?!</span></span><br><span class="line"><span class="code">    E-&gt;&gt;T:What is your name?!!</span></span><br><span class="line"><span class="code">    T--&gt;&gt;E:Tony!</span></span><br><span class="line"><span class="code">    E-xT:Fuck you Tony!</span></span><br><span class="line"><span class="code">    T--xE:What&#x27;s your name?</span></span><br><span class="line"><span class="code">    E-)T:Ezekiel!!</span></span><br><span class="line"><span class="code">    T--)E:Fuck you Ezekiel!</span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://img.kdsunset.top/img/markdown/20231230003624.png"></p><p>使用Mermaid绘制时序图基本步骤：</p><ol><li>使用<code>sequenceDiagram</code> 关键字定义一个时序图。</li><li>使用<code>participant 角色别名 as 角色全名</code>定义时序图中的出现对象，可以不声明直接使用。</li><li>依次绘制消息流。</li></ol><p>以画一个客户端通过浏览器访问Google首页的基本过程的时序图为例子，<br>代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">\<span class="code">```mermaid</span></span><br><span class="line"><span class="code">sequenceDiagram</span></span><br><span class="line"><span class="code">    title: 客户端通过浏览器访问Google首页的基本过程</span></span><br><span class="line"><span class="code">    participant c as 浏览器</span></span><br><span class="line"><span class="code">    participant r as 路由器</span></span><br><span class="line"><span class="code">    participant s as 谷歌服务器</span></span><br><span class="line"><span class="code">    participant dns as DNS服务器</span></span><br><span class="line"><span class="code">    c-&gt;&gt;r: 1.请求DNS查询：&lt;br&gt;google的ip地址</span></span><br><span class="line"><span class="code">    r-&gt;&gt;dns: 2.查询google的ip地址</span></span><br><span class="line"><span class="code">    dns-&gt;&gt;dns:逐级查询</span></span><br><span class="line"><span class="code">    dns--&gt;&gt;r:3.返回google的ip</span></span><br><span class="line"><span class="code">    r--&gt;&gt;c:告知google的ip</span></span><br><span class="line"><span class="code">    c-&gt;&gt;r:4.发起连接：google的ip地址</span></span><br><span class="line"><span class="code">    r-&gt;&gt;s:连接</span></span><br><span class="line"><span class="code">    s--&gt;&gt;r:告知连接成功</span></span><br><span class="line"><span class="code">    r--&gt;&gt;c:5.告知连接成功</span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://img.kdsunset.top/img/markdown/20231230000717.png"></p><h4 id="2-2-2-标准时序图（sequence）"><a href="#2-2-2-标准时序图（sequence）" class="headerlink" title="2.2.2 标准时序图（sequence）"></a>2.2.2 标准时序图（sequence）</h4><p>标准流程的样式和Mermaid的时序图差不多，语法略有差异：</p><ul><li>使用用<code>sequence</code>表明绘制标准时序图</li><li>对象定义的别名和Mermaid相反，为<code>participant 全名 as 别名</code></li><li>箭头表示含义不同，简单来说在Mermaid中使用<code>-&gt;&gt;</code>发送消息，在sequence中要换成<code>-&gt;</code></li></ul><p>代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">\<span class="code">```sequence</span></span><br><span class="line"><span class="code">    title: 客户端通过浏览器访问Google首页的基本过程</span></span><br><span class="line"><span class="code">    participant 浏览器 as c</span></span><br><span class="line"><span class="code">    participant 路由器 as r</span></span><br><span class="line"><span class="code">    participant 谷歌服务器 as s</span></span><br><span class="line"><span class="code">    participant DNS服务器 as dns</span></span><br><span class="line"><span class="code">    c-&gt;r: 1.请求DNS查询：&lt;br&gt;google的ip地址</span></span><br><span class="line"><span class="code">    r-&gt;dns: 2.查询google的ip地址</span></span><br><span class="line"><span class="code">    dns-&gt;dns:逐级查询</span></span><br><span class="line"><span class="code">    dns--&gt;&gt;r:3.返回google的ip</span></span><br><span class="line"><span class="code">    r--&gt;&gt;c:告知google的ip</span></span><br><span class="line"><span class="code">    c-&gt;r:4.发起连接：google的ip地址</span></span><br><span class="line"><span class="code">    r-&gt;s:连接</span></span><br><span class="line"><span class="code">    s--&gt;&gt;r:告知连接成功</span></span><br><span class="line"><span class="code">    r--&gt;&gt;c:5.告知连接成功</span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://img.kdsunset.top/img/markdown/20231230000747.png">   </p><h3 id="2-3-流程图"><a href="#2-3-流程图" class="headerlink" title="2.3 流程图"></a>2.3 流程图</h3><p>流程图是描述一个系统或者功能的步骤、过程的图表。<br>流程图也有样式流程图（Mermaid）和标准流程图（flow）两种。Mermaid的路程图语法较简单，用不同的括号表示不同的图形，flow则使用关键字定义，语法较为复杂，但是连线排布较为工整。</p><h4 id="2-3-1-样式流程图（Mermaid）"><a href="#2-3-1-样式流程图（Mermaid）" class="headerlink" title="2.3.1 样式流程图（Mermaid）"></a>2.3.1 样式流程图（Mermaid）</h4><p>Mermaid创建流程基本步骤：</p><ol><li>创建流程图：<code>flowchart 方向</code>，TD表示纵向，LR表示横向</li><li>使用<code>ID(描述)</code>绘制图形，使用<code>--&gt;</code>流程线进行连接。id作用是为流程图中出现首次出现的图形模块命名，以后就可以使用这个id来表示这个已创建的图形。</li><li>重复步骤2绘制各步骤图形。</li></ol><p> UML流程图中元素在Mermaid中的表示（为了方便对比，flow中的表示也一并放在这个表格）：</p><table><thead><tr><th>元素</th><th>UML表示</th><th>样式流程图（Mermaid）</th><th>标准流程图（flow）</th></tr></thead><tbody><tr><td>起止框</td><td>圆角矩形</td><td>语法:<code>图形ID(描述)</code>，不同的括号表示不同的形状<br>起止框是小括号，例如<code>A(开始)</code>，下同</td><td>关键字<code>start </code>、<code>stop</code>，例如<code>id=&gt;start: 描述</code></td></tr><tr><td>流程</td><td>直角矩形</td><td><code>[]</code>,<code>图形Iid[描述]</code></td><td>关键字<code>operation</code>，<code>id=&gt;operation: 描述</code></td></tr><tr><td>判断</td><td>菱形</td><td><code>&#123;&#125;</code>，<code>图形Iid[描述]</code></td><td>关键字<code>condition</code>，<code>id=&gt;condition: 描述</code>，<br>分支用id(yes),id(no)表示</td></tr><tr><td>输入&#x2F;输出</td><td>平行四边形</td><td>&#x2F;</td><td>关键字<code>inputoutput</code>，<code>id=&gt;inputoutput: 描述</code></td></tr><tr><td>流程线</td><td>实心实线箭头</td><td><code>-- 描述 --&gt;</code></td><td><code>-&gt;</code>，<code>a-&gt;b</code></td></tr></tbody></table><p>代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\<span class="code">```mermaid</span></span><br><span class="line"><span class="code">flowchart TD</span></span><br><span class="line"><span class="code">    a(开始) --&gt; b[用户输入数字]</span></span><br><span class="line"><span class="code">    b --&gt; c&#123;数字是否&lt;br&gt;能被2整除?&#125;</span></span><br><span class="line"><span class="code">    c -- 是 --&gt; d1[是偶数]</span></span><br><span class="line"><span class="code">    c -- 否 --&gt; d2[不是偶数]</span></span><br><span class="line"><span class="code">    d1 --&gt; e(结束)</span></span><br><span class="line"><span class="code">    d2 --&gt; e</span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://img.kdsunset.top/img/markdown/20231230000804.png"></p><h4 id="2-3-2标准流程图-flow"><a href="#2-3-2标准流程图-flow" class="headerlink" title="2.3.2标准流程图(flow)"></a>2.3.2标准流程图(flow)</h4><p>flow流程图的图形创建和连接是分开的，基本步骤：</p><ol><li>使用<code>id=&gt;start: 描述</code>创建流程图各步骤的图形</li><li>使用<code>-&gt;</code>流程线进行连接</li></ol><p>代码：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">\<span class="code">```flow</span></span><br><span class="line"><span class="code">    s=&gt;start: 开始</span></span><br><span class="line"><span class="code">    b=&gt;inputoutput: 用户输入数字</span></span><br><span class="line"><span class="code">    if=&gt;condition: 数字是否&lt;br&gt;能被2整除?</span></span><br><span class="line"><span class="code">    t=&gt;operation: 是偶数</span></span><br><span class="line"><span class="code">    f=&gt;operation: 不是偶数</span></span><br><span class="line"><span class="code">    e=&gt;end: 结束</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    s-&gt;b-&gt;if</span></span><br><span class="line"><span class="code">    if(yes)-&gt;t</span></span><br><span class="line"><span class="code">    if(no)-&gt;f</span></span><br><span class="line"><span class="code">    t-&gt;e</span></span><br><span class="line"><span class="code">    f-&gt;e</span></span><br><span class="line"><span class="code">\```</span></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://img.kdsunset.top/img/markdown/20231230000813.png"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://markdown.com.cn/">Markdown 官方教程</a><br>[2] <a href="https://github.com/ruanyf/document-style-guide">中文技术文档的写作规范</a>，by 阮一峰</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 时序图 </tag>
            
            <tag> 流程图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Github Pages 搭建个人博客2 优化篇 SEO及图床</title>
      <link href="/hxpghbseo/"/>
      <url>/hxpghbseo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github-Pages-搭建个人博客2-优化篇-SEO及图床"><a href="#Hexo-Github-Pages-搭建个人博客2-优化篇-SEO及图床" class="headerlink" title="Hexo + Github Pages 搭建个人博客2 优化篇 SEO及图床"></a>Hexo + Github Pages 搭建个人博客2 优化篇 SEO及图床</h1><p>SEO（搜索引擎优化）可以提升博客在 Google、Bing、百度 等搜索引擎的排名，提高曝光度，吸引更多访客。<br> 在搜索引擎输入以下内容：<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看是否被收录</span><br><span class="line">site:你的网站</span><br></pre></td></tr></table></figure><br>如果提示<code>抱歉，未找到相关结果。</code>即还未收录。</p><h2 id="1-网站收录"><a href="#1-网站收录" class="headerlink" title="1 网站收录"></a>1 网站收录</h2><p>理论上，只要我们的网站网站可被外部访问，内容有价值，搜索引擎都会通过爬虫自动发现并收录，但是对于我们的新网站可能会比较慢。手动提交 Sitemap 能加快收录。</p><h3 id="1-1-在搜索引擎添加站点"><a href="#1-1-在搜索引擎添加站点" class="headerlink" title="1.1 在搜索引擎添加站点"></a>1.1 在搜索引擎添加站点</h3><ul><li><strong>百度</strong></li></ul><ol><li>注册并登录<a href="https://ziyuan.baidu.com/">百度站长平台</a></li><li>添加站点。用户中心-&gt;站点管理-&gt;添加站点，输入你的域名</li><li>验证域名<br>以 HTML 标签验证为例子，复制标签到首页的header区域，由butterfly主题集成了这个功能，只需要将content 的值复制到<br>主题配置文件<code>_config.butterfly.yml</code> 中的<code>site_verification</code>字段<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line"><span class="attr">site_verification:</span></span><br><span class="line">  <span class="comment"># - name: google-site-verification</span></span><br><span class="line">  <span class="comment">#   content: xxxxxx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">baidu-site-verification</span></span><br><span class="line">    <span class="attr">content:</span>  <span class="comment"># 在这里填上面的字符串</span></span><br></pre></td></tr></table></figure></li><li>网站重新部署完后，在百度站长平台完成 HTML 标签验证即完成添加。</li></ol><ul><li><strong>谷歌收录</strong></li></ul><ol><li>注册并登录<a href="https://search.google.com/search-console/welcome">Google Search Console</a></li><li>添加站点，大体同上。</li><li>输入网址并验证，以“网址前缀” 为例子，输入网址 <a href="https://youwebsite.top/">https://youwebsite.top</a> ，验证方式可选择 HTML 标签验证，方法同百度验证。</li></ol><h3 id="1-2-生成站点地图（sitemap）"><a href="#1-2-生成站点地图（sitemap）" class="headerlink" title="1.2 生成站点地图（sitemap）"></a>1.2 生成站点地图（sitemap）</h3><p>站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。</p><ol><li>安装百度和 Google 的站点地图生成插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></li><li>在配置文件<code>config.yml</code>添加以下字段：<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 站点地图</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>3 hexo g -d 重新部署并访问以下URL,看看网页中有没有出现代码。有的话就成功<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://你的域名/sitemap.xml</span><br><span class="line">https://你的域名/baidusitemap.xml</span><br></pre></td></tr></table></figure>虽然搜索引擎会自动爬取网站内容，但手动提交 sitemap.xml 更快发现你的博客，并提高收录效率。</li></ol><h2 id="1-3-提交链接"><a href="#1-3-提交链接" class="headerlink" title="1.3 提交链接"></a>1.3 提交链接</h2><ul><li><strong>谷歌</strong></li></ul><p>在 <code>Search Console</code>-&gt; <code>Sitemaps</code> 页面，提交 上一步获得sitemap，即<code>https://你的域名.com/sitemap.xml</code></p><ul><li><strong>百度</strong></li></ul><p>百度站长平台的链接提交方式分为自动提交和手动提交两种，此处只讲自动提交，手动提交按照要求操作即可<br>主动推送最为快速的提交方式，是被百度收录最快的推送方式。</p><ol><li>主动推送可以通过安装插件实现<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>在 hexo 根目录配置文件_config.yml 中，添加<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主动推送百度，被百度收录</span></span><br><span class="line"><span class="attr">baidu_url_submit:</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">10</span> <span class="comment"># 提交最新的10个链接</span></span><br><span class="line">  <span class="attr">host:</span> <span class="comment"># 百度站长平台中注册的域名</span></span><br><span class="line">  <span class="attr">token:</span> <span class="comment"># 秘钥，百度站长平台 &gt; 普通收录 &gt; 推送接口 &gt; 接口调用地址中token字段</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidu_urls.txt</span> <span class="comment"># 文本文档的地址， 新链接会保存在此文本文档里，不用改  </span></span><br><span class="line"> </span><br></pre></td></tr></table></figure>其次，记得查看 hexo 根目录中_config.yml 文件中 url 的值， 必须包含是百度站长平台注册的域名<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://kdsunset.top</span></span><br></pre></td></tr></table></figure>deploy 加入新的 type<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span> </span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:kdsunset/kdsunset.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">baidu_url_submitter</span> </span><br></pre></td></tr></table></figure>若要实现手动提交，则把下面的代码粘贴到百度站长平台的 “手动收录” 地址窗口即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://你的域名/sitemap.xml</span><br><span class="line">https://你的域名/baidusitemap.xml</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-4-robots"><a href="#1-4-robots" class="headerlink" title="1.4 robots"></a>1.4 robots</h3><p>robots.txt 是一个网站爬虫协议文件，用于告诉搜索引擎哪些页面可以爬取，哪些页面不能爬取，从而控制搜索引擎的行为。例如通常我们希望搜索引擎爬取我们的文章页面，而目录、关于页这些可以忽略，则可以在这个文件指定。</p><ol><li>博客根目录下的 source 文件夹新建robots.txt文件，填写以下内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># hexo robots.txt</span><br><span class="line"># 允许所有用户代理的浏览器爬虫进行访问（爬取数据）</span><br><span class="line">User-agent: *</span><br><span class="line"></span><br><span class="line">Allow: /</span><br><span class="line">Allow: /posts/</span><br><span class="line"></span><br><span class="line">Disallow: /tags/</span><br><span class="line">Disallow: /categories/</span><br><span class="line">Disallow: /about/</span><br><span class="line">Disallow: /archives/</span><br><span class="line"># 如果js和fonts这些加了disallow的话，会出现谷歌抓取问题的话，就取消</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /lib/</span><br><span class="line"></span><br><span class="line"># 最后面两行是site-map</span><br><span class="line">Sitemap: https://kdsunset.top/sitemap.xml</span><br><span class="line">Sitemap: https://kdsunset.top/baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li>将<code>robots.txt</code>加到<code>heox</code>配置的<code>skip_render</code>字段，避免渲染。</li></ol><p>通常Hexo会将解析 Markdown 文件并渲染成html，<code>skip_render</code>则可以指定需要忽略的内容，避免格式错误。<br>在博客根目录下的配置文件<code>_config.yml</code>中的<code>skip_render</code>字段添加以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跳过渲染</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;robots.txt&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-图床"><a href="#2-图床" class="headerlink" title="2 图床"></a>2 图床</h2><p>我们写的博客文章可能使用到很多图片，如果图片直接放在Hexo目录下，会占用仓库空间，而且<code>GitHub Pages</code> 有容量限制。另外每次 <code>Hexo</code> 部署都会重新上传所有图片，影响效率。因此比较好的方案是使用图床。<br>图床方案可以分为第三方图床和自建图床两大类。国内诸如xx云的服务商大都提供了图片存储服务，但是质量好的基本都要付费。自建方面，由于<code>gitee</code>现在不支持图床外链作为公共仓库；<code>jsdelivr</code> 国内被墙。因此我们选择<code>Github</code>私有仓库+<code>Cloudflare Workers</code>搭建个人图床，Github私有仓库来负责存储图片，通过<br><code>Cloudflare Workers</code> 代理访问<code>GitHub Raw</code> 文件，并且提供 CDN 缓存。</p><h3 id="2-1-Github部分"><a href="#2-1-Github部分" class="headerlink" title="2.1 Github部分"></a>2.1 Github部分</h3><h4 id="2-1-1-Github建立一个仓库"><a href="#2-1-1-Github建立一个仓库" class="headerlink" title="2.1.1 Github建立一个仓库"></a>2.1.1 Github建立一个仓库</h4><p>新建仓库作为图床，由于使用了Cloudflare反向代理了github仓库，可以选择私有仓库，文件不会暴露，增加安全性。这里以建立<code>imagehosting</code>仓库为例</p><h4 id="2-1-2-生成Github-Tokens"><a href="#2-1-2-生成Github-Tokens" class="headerlink" title="2.1.2 生成Github Tokens"></a>2.1.2 生成Github Tokens</h4><p><code>GitHub Personal Access Tokens</code>（个人访问令牌）是一种用于进行身份验证的安全凭证，允许您通过命令行或应用程序与 GitHub 进行交互。这是一种替代使用用户名和密码的方式，通常用于通过 API 访问 GitHub 资源或执行与 GitHub 相关的操作。</p><ol><li>点击Github 用户设置setting-&gt;Developer Settings-&gt;Personal access tokens 进行仓库，字段可按如下填写，然后点击生成。注意这个token只展示一次，所以请复制下来并保存<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Note: # token 标识，随意</span><br><span class="line">Expiration: # 过期时间，自行选择，可选No expiration（永久）</span><br><span class="line">Select scopes: # 选择权限范,勾选 repo</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2-Cloudflare-部分"><a href="#2-2-Cloudflare-部分" class="headerlink" title="2.2 Cloudflare 部分"></a>2.2 Cloudflare 部分</h3><h4 id="2-2-1-创建用于代理的Worker"><a href="#2-2-1-创建用于代理的Worker" class="headerlink" title="2.2.1 创建用于代理的Worker"></a>2.2.1 创建用于代理的Worker</h4><ol><li>Cloudflare 的管理界面后，点击侧边栏的 “Workers” 选项，然后点击 “创建服务” 创建一个 Worker,修改名称并部署.</li><li>点击编辑，粘贴以下代码，并将代理路径和Github令牌修改为自己的值。 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//这段代码作用：1.反向代理了github仓库。</span></span><br><span class="line"><span class="comment">//2.使用令牌获取文件。</span></span><br><span class="line"><span class="comment">//3开启了缓存，避免重复请求图片。</span></span><br><span class="line"> <span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">&quot;raw.githubusercontent.com&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="comment">// (1) 填写代理的路径，格式为 /&lt;用户&gt;/&lt;仓库名&gt;/&lt;分支&gt;</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">&quot;****&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// github personal access token.</span></span><br><span class="line"><span class="comment">// (2) 填写github令牌</span></span><br><span class="line"><span class="keyword">const</span> github_token = <span class="string">&quot;****&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Website you intended to retrieve for users using mobile devices.</span></span><br><span class="line"><span class="keyword">const</span> upstream_mobile = upstream;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Countries and regions where you wish to suspend your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_region = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// IP addresses which you wish to block from using your service.</span></span><br><span class="line"><span class="keyword">const</span> blocked_ip_address = [<span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to disable cache.</span></span><br><span class="line"><span class="keyword">const</span> disable_cache = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">  <span class="attr">$upstream</span>: <span class="string">&quot;$custom_domain&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&quot;fetch&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">  event.<span class="title function_">respondWith</span>(<span class="title function_">fetchAndApply</span>(event.<span class="property">request</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchAndApply</span>(<span class="params">request</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> region = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;cf-ipcountry&quot;</span>)?.<span class="title function_">toUpperCase</span>();</span><br><span class="line">  <span class="keyword">const</span> ip_address = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;cf-connecting-ip&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> user_agent = request.<span class="property">headers</span>.<span class="title function_">get</span>(<span class="string">&quot;user-agent&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>);</span><br><span class="line">  <span class="keyword">let</span> url_hostname = url.<span class="property">hostname</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (https == <span class="literal">true</span>) &#123;</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">&quot;https:&quot;</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url.<span class="property">protocol</span> = <span class="string">&quot;http:&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">await</span> <span class="title function_">device_status</span>(user_agent)) &#123;</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream_mobile;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  url.<span class="property">host</span> = upstream_domain;</span><br><span class="line">  <span class="keyword">if</span> (url.<span class="property">pathname</span> == <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">    url.<span class="property">pathname</span> = upstream_path;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url.<span class="property">pathname</span> = upstream_path + url.<span class="property">pathname</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (blocked_region.<span class="title function_">includes</span>(region)) &#123;</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">&quot;Access denied: WorkersProxy is not available in your region yet.&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (blocked_ip_address.<span class="title function_">includes</span>(ip_address)) &#123;</span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(</span><br><span class="line">      <span class="string">&quot;Access denied: Your IP address is blocked by WorkersProxy.&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">403</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> method = request.<span class="property">method</span>;</span><br><span class="line">    <span class="keyword">let</span> request_headers = request.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(request_headers);</span><br><span class="line"></span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">&quot;Host&quot;</span>, upstream_domain);</span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">&quot;Referer&quot;</span>, url.<span class="property">protocol</span> + <span class="string">&quot;//&quot;</span> + url_hostname);</span><br><span class="line">    new_request_headers.<span class="title function_">set</span>(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;token &quot;</span> + github_token);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url.<span class="property">href</span>, &#123;</span><br><span class="line">      <span class="attr">method</span>: method,</span><br><span class="line">      <span class="attr">headers</span>: new_request_headers,</span><br><span class="line">      <span class="attr">body</span>: request.<span class="property">body</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> connection_upgrade = new_request_headers.<span class="title function_">get</span>(<span class="string">&quot;Upgrade&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (connection_upgrade &amp;&amp; connection_upgrade.<span class="title function_">toLowerCase</span>() == <span class="string">&quot;websocket&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> original_response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response_clone = original_response.<span class="title function_">clone</span>();</span><br><span class="line">    <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> response_headers = original_response.<span class="property">headers</span>;</span><br><span class="line">    <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> <span class="title class_">Headers</span>(response_headers);</span><br><span class="line">    <span class="keyword">let</span> status = original_response.<span class="property">status</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (disable_cache) &#123;</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;max-age=43200000&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;access-control-allow-origin&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">set</span>(<span class="string">&quot;access-control-allow-credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">&quot;content-security-policy&quot;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">&quot;content-security-policy-report-only&quot;</span>);</span><br><span class="line">    new_response_headers.<span class="title function_">delete</span>(<span class="string">&quot;clear-site-data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;x-pjax-url&quot;</span>)) &#123;</span><br><span class="line">      new_response_headers.<span class="title function_">set</span>(</span><br><span class="line">        <span class="string">&quot;x-pjax-url&quot;</span>,</span><br><span class="line">        response_headers</span><br><span class="line">          .<span class="title function_">get</span>(<span class="string">&quot;x-pjax-url&quot;</span>)</span><br><span class="line">          .<span class="title function_">replace</span>(<span class="string">&quot;//&quot;</span> + upstream_domain, <span class="string">&quot;//&quot;</span> + url_hostname)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> content_type = new_response_headers.<span class="title function_">get</span>(<span class="string">&quot;content-type&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      content_type != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">&quot;text/html&quot;</span>) &amp;&amp;</span><br><span class="line">      content_type.<span class="title function_">includes</span>(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    ) &#123;</span><br><span class="line">      original_text = <span class="keyword">await</span> <span class="title function_">replace_response_text</span>(</span><br><span class="line">        original_response_clone,</span><br><span class="line">        upstream_domain,</span><br><span class="line">        url_hostname</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      original_text = original_response_clone.<span class="property">body</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">new</span> <span class="title class_">Response</span>(original_text, &#123;</span><br><span class="line">      status,</span><br><span class="line">      <span class="attr">headers</span>: new_response_headers,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">replace_response_text</span>(<span class="params">response, upstream_domain, host_name</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="keyword">await</span> response.<span class="title function_">text</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i <span class="keyword">in</span> replace_dict) &#123;</span><br><span class="line">    j = replace_dict[i];</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="string">&quot;$upstream&quot;</span>) &#123;</span><br><span class="line">      i = upstream_domain;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="string">&quot;$custom_domain&quot;</span>) &#123;</span><br><span class="line">      i = host_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j == <span class="string">&quot;$upstream&quot;</span>) &#123;</span><br><span class="line">      j = upstream_domain;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="string">&quot;$custom_domain&quot;</span>) &#123;</span><br><span class="line">      j = host_name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> re = <span class="keyword">new</span> <span class="title class_">RegExp</span>(i, <span class="string">&quot;g&quot;</span>);</span><br><span class="line">    text = text.<span class="title function_">replace</span>(re, j);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">device_status</span>(<span class="params">user_agent_info</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> agents = [</span><br><span class="line">    <span class="string">&quot;Android&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iPhone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;SymbianOS&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Windows Phone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iPad&quot;</span>,</span><br><span class="line">    <span class="string">&quot;iPod&quot;</span>,</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">var</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> v = <span class="number">0</span>; v &lt; agents.<span class="property">length</span>; v++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (user_agent_info.<span class="title function_">indexOf</span>(agents[v]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-2-将域名-NS-转到-Cloudflare"><a href="#2-2-2-将域名-NS-转到-Cloudflare" class="headerlink" title="2.2.2 将域名 NS 转到 Cloudflare"></a>2.2.2 将域名 NS 转到 Cloudflare</h4><p>Cloudflare Workers 的域名绑定仅支持托管在 Cloudflare 上的域名，所以得先将域名的 NS 转到 Cloudflare。如果使用了Cloudflare进行CDN加速，这一步已经设置过了，没有则参考<a href="https://kdsunset.top/hxpghblog/">Hexo教程第一篇</a>。</p><h4 id="2-2-3-给创建的-Worker-服务绑定自己的域名"><a href="#2-2-3-给创建的-Worker-服务绑定自己的域名" class="headerlink" title="2.2.3 给创建的 Worker 服务绑定自己的域名"></a>2.2.3 给创建的 Worker 服务绑定自己的域名</h4><p>域名 NS 转到 Cloudflare成功后，在 Worker 服务的详情页点击“触发器”，然后点击“添加自定义域”，输入想要绑定的域名后，点击“添加自定义域”。这里以kdsunset.top域名为例子，可以填写自定义域名为”img.kdsunset.top”</p><h3 id="2-4-配置-picgo-图床软件"><a href="#2-4-配置-picgo-图床软件" class="headerlink" title="2.4 配置 picgo 图床软件"></a>2.4 配置 picgo 图床软件</h3><p>PicGo 是一款开源的图片上传工具，主要用于将本地图片上传到云存储服务，并生成可访问的链接。<br>按以下描述填写Github仓库信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">仓库名：&lt;Github用户名/仓库名&gt;</span><br><span class="line">分支名：现在GitHub默认主分支是 &quot;main&quot;，以前是&quot;master&quot;</span><br><span class="line">token：Github token，github-&gt;settings-&gt;tokens-&gt;Generate new token</span><br><span class="line">存储路径：设置文件夹目录，可选,例如&quot;img/&quot;，</span><br><span class="line">自定义域名：自定义域名，可选，我的配置是https://img.kdsunset.top</span><br></pre></td></tr></table></figure><p>成功上传图片后，图片链接为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://img.kdsunset.top/img3031c4ae8f0be9933017b40af93dda1.png)</span><br></pre></td></tr></table></figure><h2 id="3-其他"><a href="#3-其他" class="headerlink" title="3 其他"></a>3 其他</h2><h3 id="3-1-给博客图片添加水印"><a href="#3-1-给博客图片添加水印" class="headerlink" title="3.1 给博客图片添加水印"></a>3.1 给博客图片添加水印</h3><p>使用hexo-images-watermark插件，这个插件不对原图产生任何影响，在网站静态页构建过程中将原图读取，输出添加了水印的图片。但是目前这个插件只支持本地的source&#x2F;_post下的图片生成水印，不支持网络图片。<br><strong>1. 安装<code>sharp</code>和<code>hexo-images-watermark</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个插件依赖`sharp`</span></span><br><span class="line">npm install sharp</span><br><span class="line"></span><br><span class="line">npm install hexo-images-watermark</span><br></pre></td></tr></table></figure><p>这个插件依赖<code>sharp</code>，<code>npm</code> 安装 <code>sharp</code> 时，必须先安装 <code>windows-build-tools</code> ，如果还没安装，可以选择从<a href="https://visualstudio.microsoft.com/zh-hans/downloads/">Visual Studio官网</a>，选择“用于 Visual Studio 的工具”-&gt;Visual Studio 2022 生成工具，下载安装包，并选择安装C++ 桌面工具。</p><p><strong>2 在hexo主配置文件，添加：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watermark:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">textEnable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">rotate:</span> <span class="number">-45</span></span><br><span class="line">    <span class="attr">gravity:</span> <span class="string">centre</span></span><br></pre></td></tr></table></figure><h3 id="3-2-静态资源压缩"><a href="#3-2-静态资源压缩" class="headerlink" title="3.2 静态资源压缩"></a>3.2 静态资源压缩</h3><p>静态资源压缩是指对 Hexo生成如HTML、CSS、JavaScript和图片等静态文件进行压缩，以减小文件大小，提高网页加载速度，节省带宽资源的目的。这主要包括对 、图片等静态文件的压缩。</p><p>Gulp 是一种流行的 JavaScript 任务自动化工具，广泛用于 Web 开发中的构建和自动化任务，如压缩 CSS、JavaScript 文件、优化图片、自动刷新浏览器等。</p><ul><li>常用gulp 插件：<ul><li>gulp-htmlclean：清理html</li><li>gulp-htmlmin：压缩html</li><li>gulp-minify-css：压缩css</li><li>gulp-uglify：混淆js</li><li>gulp-imagemin：压缩图片</li></ul></li></ul><ol><li>安装gulp<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 项目根目录安装gulp</span></span><br><span class="line">npm install gulp --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装gulp 模块（项目目录）</span></span><br><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>在Hexo博客根目录下新建 gulpfile.js ，并填入以下内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="comment">// var imagemin = require(&#x27;gulp-imagemin&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//从字面意思应该可以看出来，清除空格，压缩html，这一条比较重要，作用比较大，引起的改变压缩量也特别大</span></span><br><span class="line">            <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值，比如：&lt;input checked=&quot;checked&quot;/&gt;,那么设置这个属性后，就会变成 &lt;input checked/&gt;</span></span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除html中注释的部分</span></span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">//清除所有的空属性</span></span><br><span class="line">            <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//清除所有script标签中的type=&quot;text/javascript&quot;属性。</span></span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//清楚所有Link标签上的type属性。</span></span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie8&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩js !代表排除的js,例如[&#x27;!./public/js/**/*min.js&#x27;]</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/js/**/.js&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>()) <span class="comment">//压缩混淆</span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line"><span class="comment">//已在在上传时压缩</span></span><br><span class="line"><span class="comment">// gulp.task(&#x27;minify-images&#x27;, function() &#123;</span></span><br><span class="line"><span class="comment">//     return gulp.src(&#x27;./public/images/**/*.*&#x27;)</span></span><br><span class="line"><span class="comment">//         .pipe(imagemin(</span></span><br><span class="line"><span class="comment">//         [imagemin.gifsicle(&#123;&#x27;optimizationLevel&#x27;: 3&#125;),</span></span><br><span class="line"><span class="comment">//         imagemin.jpegtran(&#123;&#x27;progressive&#x27;: true&#125;),</span></span><br><span class="line"><span class="comment">//         imagemin.optipng(&#123;&#x27;optimizationLevel&#x27;: 7&#125;),</span></span><br><span class="line"><span class="comment">//         imagemin.svgo()],</span></span><br><span class="line"><span class="comment">//         &#123;&#x27;verbose&#x27;: true&#125;))</span></span><br><span class="line"><span class="comment">//         .pipe(gulp.dest(&#x27;./public/images&#x27;));</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>,gulp.<span class="title function_">series</span>(gulp.<span class="title function_">parallel</span>(<span class="string">&#x27;minify-html&#x27;</span>,<span class="string">&#x27;minify-css&#x27;</span>,<span class="string">&#x27;minify-js&#x27;</span>)));</span><br><span class="line"></span><br></pre></td></tr></table></figure>3.生成博文时执行gulp命令就会根据 gulpfile.js 中的配置，对 public 目录中的静态资源文件进行压缩。重新部署即可看到css文件等被压缩了（不生效清一下浏览器缓存）<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Starting Hexo cmd&quot;</span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hexo deploy success !&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-文章目录禁用自动编号"><a href="#3-3-文章目录禁用自动编号" class="headerlink" title="3.3 文章目录禁用自动编号"></a>3.3 文章目录禁用自动编号</h3><p>默认情况下，butterfly会对文章目录自动编号，这可能跟我们自定义的目录标题冲突，可通过设置butterfly配置文件的top字段进行配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">false</span>  <span class="comment"># 自动编号</span></span><br></pre></td></tr></table></figure><h3 id="3-4-开启内置的404页面"><a href="#3-4-开启内置的404页面" class="headerlink" title="3.4 开启内置的404页面"></a>3.4 开启内置的404页面</h3><p>修改enable开启</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;页面沒有找到&#x27;</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br></pre></td></tr></table></figure><p>修改页面的样式，打开butterfly主题文件&#x2F;layout&#x2F;include&#x2F;404.pug</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">var</span> top_img_404 = theme.<span class="property">error_404</span>.<span class="property">background</span> || theme.<span class="property">default_top_img</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">body</span>(style=<span class="string">&#x27;background-image: url(&#x27;</span> + <span class="title function_">url_for</span>(theme.<span class="property">default_top_img</span>) + <span class="string">&#x27;); background-size: cover; background-position: center center;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  #body-wrap.<span class="property">error404</span></span><br><span class="line">    include ./header/index.<span class="property">pug</span></span><br><span class="line"></span><br><span class="line">    #error-wrap</span><br><span class="line">      .<span class="property">error</span>-content</span><br><span class="line">        .<span class="property">error</span>-img</span><br><span class="line">          <span class="title function_">img</span>(src=<span class="title function_">url_for</span>(top_img_404) alt=<span class="string">&#x27;Page not found&#x27;</span>)</span><br><span class="line">        .<span class="property">error</span>-info</span><br><span class="line">          h1.<span class="property">error_title</span>= <span class="string">&#x27;404&#x27;</span></span><br><span class="line">          .<span class="property">error_subtitle</span>= theme.<span class="property">error_404</span>.<span class="property">subtitle</span> || <span class="title function_">_p</span>(<span class="string">&#x27;error404&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-5-解决国内线路-valine-评论区无法加载的问题"><a href="#3-5-解决国内线路-valine-评论区无法加载的问题" class="headerlink" title="3.5 解决国内线路 valine 评论区无法加载的问题"></a>3.5 解决国内线路 valine 评论区无法加载的问题</h3><p>经过F12控制台定位是Valine.min.js引用的av-min.js 无法下载导致，原来的url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//unpkg.com/leancloud-storage@3/dist/av-min.js</span><br></pre></td></tr></table></figure><p>替换成其他cdn，对于butterfly主题，替换方式是修改主题配置文件中的inject字段，插入饿了么的cnd链接</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/my_bg_color.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;//github.elemecdn.com/leancloud-storage@3/dist/av-min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-添加RSS订阅"><a href="#3-6-添加RSS订阅" class="headerlink" title="3.6 添加RSS订阅"></a>3.6 添加RSS订阅</h3><p>RSS用来订阅网站的最新文章、新闻和博客更新，相比算法推荐，它相当的古老，但是既然博客还存在，RSS订阅也一定有存在的理由。<br><strong>1 安装RSS生成插件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装hexo-generator-feed（https://github.com/hexojs/hexo-generator-feed）</span></span><br><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p><strong>2 配置hexo，添加feed字段</strong><br>在 hexo-blog&#x2F;_config.yml 文件中，找到 feed 配置部分（如果没有，请添加）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 启用 RSS 订阅功能</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span>  <span class="comment"># 订阅源格式，可选值：atom、rss2</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span>  <span class="comment"># 订阅源的生成路径（默认 `atom.xml`，最终访问路径为 `https://your-blog.com/atom.xml`）</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span>  <span class="comment"># 订阅源中最多包含的文章数量，默认 20（可根据需求调整）</span></span><br><span class="line">  <span class="attr">hub:</span>  <span class="comment"># WebSub（以前的 PubSubHubbub）通知中心的 URL（通常留空）</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span>  <span class="comment"># 是否在订阅源中包含文章正文内容</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span>  <span class="comment"># 文章内容的最大字数限制（默认 140，可调整或设为 0 以显示全文）</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span>  <span class="comment"># 文章内容截断时使用的分隔符（默认为空格）</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span>  <span class="comment"># 文章排序方式，`-date` 表示按发布时间倒序排列</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">/img/avatar.jpg</span>  <span class="comment"># RSS 订阅图标（建议使用博客的 LOGO 或头像）</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span>  <span class="comment"># 启用自动发现功能，使浏览器或 RSS 阅读器可以自动检测订阅源</span></span><br></pre></td></tr></table></figure><p><strong>3 在 Butterfly 主题中添加 RSS 链接</strong><br>在Butterfly 主题的配置文件<code>_config.butterfly.yml</code>中menu字段增加：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">RSS:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure><p><strong>4 发布更新</strong><br>重新部署后，可以看到在首页menu菜单中增加了RSS选项，点击得到类似<code>https://your-blog.com/atom.xml</code>的网页。使用方式是，在RSS 订阅平台例如<a href="https://feedly.com/">Feedly</a>、<a href="https://www.inoreader.com/">inoreader</a>（有国内版本）、<a href="https://www.theoldreader.com/en/">The Old Reader</a>。<br>例如inoreader，注册完成后在<code>add feed</code>-&gt;<code>Website</code>中输入刚才的atom.xml网站，即可添加订阅。</p><h2 id="3-7-发布原生网页"><a href="#3-7-发布原生网页" class="headerlink" title="3.7 发布原生网页"></a>3.7 发布原生网页</h2><p>有时我们写的不是md文章，也不需要butterfly主题的网页布局，而是想直接发布一个自定义样式的html网页，可以通过指定跳过渲染实现。<br>在<code>hexo/source</code>中创建or粘贴你需要的html网页，如果是子目录则对应网站二级目录，例如<code>raw/hello.html</code><br>然后再hexo配置中，添加跳过渲染：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;robots.txt&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;raw/index.html&#x27;</span></span><br></pre></td></tr></table></figure><p>注意如果网页使用到了外部js，需要从<code>\themes\butterfly\source\js</code>目录下引入。<br>重新部署后可以通过<code>https://your-blog.com/raw/index.html</code>访问</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub Pages 搭建个人博客网站</title>
      <link href="/hxpghblog/"/>
      <url>/hxpghblog/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-GitHub-Pages-搭建个人博客网站"><a href="#Hexo-GitHub-Pages-搭建个人博客网站" class="headerlink" title="Hexo + GitHub Pages 搭建个人博客网站"></a>Hexo + GitHub Pages 搭建个人博客网站</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;Hexo [&#x2F;hækso&#x2F;]是一个基于 Node.js 构建的静态博客框架。它能够根据 Markdown 文件生成静态的 HTML 网页，方便快速搭建静态网站。GitHub Pages 是 GitHub 提供的一项上免费托管和发布静态网站的服务，有了它可以省去自己购买和维护服务器的成本。<br>&emsp;&emsp;如果你想搭建一个个人网站或者博客，GitHub Pages + Hexo是一个不错且主流的方案。你只需要掌握一点markdown语法和git使用配合教程就可以快速上手，同时这也是本站的搭建过程~</p><h4 id="本文环境"><a href="#本文环境" class="headerlink" title="本文环境"></a>本文环境</h4><ul><li>Win 10</li><li>NodeJS v21.4.0</li><li>git</li></ul><h2 id="1-安装软件"><a href="#1-安装软件" class="headerlink" title="1 安装软件"></a>1 安装软件</h2><h3 id="1-1-安装git"><a href="#1-1-安装git" class="headerlink" title="1.1 安装git"></a>1.1 安装git</h3><p>如果还没有安装git，在<a href="https://git-scm.com/">官网</a>下载并安装git，安装过程全部选软件推荐的选项就好</p><h3 id="1-2-安装NodeJS"><a href="#1-2-安装NodeJS" class="headerlink" title="1.2 安装NodeJS"></a>1.2 安装NodeJS</h3><ul><li>在<a href="https://nodejs.org/zh-cn/download/">NodeJS官网</a>下载安装包并安装</li><li>配置环境变量，如果选择的是msi格式的安装包会自动添加环境变量</li></ul><h3 id="1-3-安装-Hexo"><a href="#1-3-安装-Hexo" class="headerlink" title="1.3 安装 Hexo"></a>1.3 安装 Hexo</h3><p>新建一个文件夹作为你网站的根目录，打开命令提示符（或者git bash）并cd到当前目录，使用以下命令安装Hexo<br>ps：在地址栏输入”cmd”即可打开一个定位到当前目录的命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 npm 安装 Hexo</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"># 查看版本</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3 id="1-3-创建一个hexo项目并初始化"><a href="#1-3-创建一个hexo项目并初始化" class="headerlink" title="1.3 创建一个hexo项目并初始化"></a>1.3 创建一个hexo项目并初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 初始化一个名为&quot;hexo-blog&quot;的 Hexo 项目</span><br><span class="line">hexo init hexo-blog</span><br><span class="line"></span><br><span class="line">cd hexo-blog</span><br><span class="line"></span><br><span class="line"># 安装 Hexo 项目所需的依赖包</span><br><span class="line">npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hexo 初始化完成后，会生成一个包含基本文件和目录的项目结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hexo-blog/         # 项目根目录</span><br><span class="line">|-- _config.yml    # 主配置文件</span><br><span class="line">|-- node_modules/  # Node.js 模块目录，通过 npm install 安装</span><br><span class="line">|-- public/        # 自动生成的静态文件，部署时上传到服务器</span><br><span class="line">|-- scaffolds/     # 模版文件</span><br><span class="line">|-- source/        # 存放源文件的目录，包括文章、图片等</span><br><span class="line">|   |-- _drafts/   # 草稿目录，未发布的文章</span><br><span class="line">|   |-- _posts/    # 存放正式发布的文章</span><br><span class="line">|-- themes/        # 存放主题的目录</span><br><span class="line">|-- .gitignore     # Git 版本控制的忽略文件列表</span><br><span class="line">|-- package.json   # 项目的 Node.js 包配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-Hexo配置"><a href="#2-Hexo配置" class="headerlink" title="2 Hexo配置"></a>2 Hexo配置</h2><p>hexo-blog&#x2F;_config.yml是heox的主配置文件，用来定义博客的各种设置和选项，包括站点设置、目录设置、部署设置等等，下面是一些重要的配置选项：<br>ps：yaml是一个方便人类阅读的数据序列化格式，通常用来做配置文件，主要用缩进来表示层次结构，另外注意”key: value”的value前面有一个空格</p><h3 id="2-1-网站Site信息"><a href="#2-1-网站Site信息" class="headerlink" title="2.1 网站Site信息"></a>2.1 网站Site信息</h3><ul><li>打开_config.yml主配置文件，找到site字段，修改网站基本信息<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment"># 网站作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>  <span class="comment"># 指定语言，会影响主题显示的语言，按需修改</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-开启文章资源文件夹（可选-推荐）"><a href="#2-2-开启文章资源文件夹（可选-推荐）" class="headerlink" title="2.2 开启文章资源文件夹（可选&#x2F;推荐）"></a>2.2 开启文章资源文件夹（可选&#x2F;推荐）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动创建同名文件夹</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="2-3-配置永久链接（可选-推荐）"><a href="#2-3-配置永久链接（可选-推荐）" class="headerlink" title="2.3 配置永久链接（可选&#x2F;推荐）"></a>2.3 配置永久链接（可选&#x2F;推荐）</h3><p>Hexo 默认的链接格式是permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;，配置永久链接有助于优化网站的 SEO：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装插件</span><br><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>修改主配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:abbrlink/</span> <span class="comment">#文章的永久链接 </span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment">#算法: crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment">#进制: dec(default) and hex</span></span><br></pre></td></tr></table></figure><ul><li>更多配置字段参考<a href="https://hexo.io/zh-cn/docs/configuration">Hexo配置</a></li></ul><h3 id="2-4-预览效果"><a href="#2-4-预览效果" class="headerlink" title="2.4 预览效果"></a>2.4 预览效果</h3><p>打开命令提示符，输入以下命令启动hexo本地服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>待终端输出类似以下字样说明启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>在浏览器访问 <a href="http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello">http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello</a> World”的文章。</p><p><img src="https://img.kdsunset.top/img/article01/70321.png" alt="默认主题的预览效果"></p><h3 id="3-Hexo-使用"><a href="#3-Hexo-使用" class="headerlink" title="3 Hexo 使用"></a>3 Hexo 使用</h3><h3 id="3-1-写作"><a href="#3-1-写作" class="headerlink" title="3.1 写作"></a>3.1 写作</h3><h4 id="3-1-1-编辑文章"><a href="#3-1-1-编辑文章" class="headerlink" title="3.1.1 编辑文章"></a>3.1.1 编辑文章</h4><p>source&#x2F;_posts 目录是用于存放博客文章的地方，每篇博客文章对应一个 Markdown 文件。可以通过在此文件夹手动创建和编辑文章，也可以使用命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><ul><li>打开使用命令创建好的文章，在文件最上方有一块以 — 分隔的区域，称为<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter </a>，作用是配置文章标题、日期、分类、标签等属性。</li></ul><h4 id="3-1-2-草稿箱"><a href="#3-1-2-草稿箱" class="headerlink" title="3.1.2 草稿箱"></a>3.1.2 草稿箱</h4><p>在编辑过程中如果需要将文件作为草稿而不是直接发布，可以使用drafts。source&#x2F;_drafts 文件夹用于存放草稿，等到完成并决定发布时再将其移动到 source&#x2F;_posts 文件夹或者使用命令进行发布</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个新的草稿</span><br><span class="line">hexo new draft &lt;title&gt;</span><br><span class="line"></span><br><span class="line"># 将草稿发布为正式文章</span><br><span class="line">hexo publish draft &lt;title&gt;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-文章中插入图片"><a href="#3-1-3-文章中插入图片" class="headerlink" title="3.1.3 文章中插入图片"></a>3.1.3 文章中插入图片</h4><ul><li><p>方式1：使用markdown标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 外链</span><br><span class="line">![图片描述](url)</span><br><span class="line"></span><br><span class="line"># 相对于博客的根目录：source/imgs/a.jpg</span><br><span class="line">![图片描述](/imgs/a.jpg)</span><br><span class="line"></span><br><span class="line"># Hexo 配置文件 _config.yaml 将 post_asset_folder 选项设为 true,hexo new xxx 新建文章时，Hexo 便会在 source/_posts 目录下新建与文章同名的文件夹</span><br><span class="line"># 相对于某篇文章的目，例如./article_1/a.jpg的目录</span><br><span class="line">![图片描述](a.jpg)</span><br></pre></td></tr></table></figure></li><li><p>方式2：使用 Hexo asset_img 标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>缺点：无法在 Markdown 编辑器中正常显示图片<br>改进：插件hexo-renderer-marked解决了这个问题<br>可以只用npm install hexo-renderer-marked命令直接安装，之后在config.yaml中更改配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-启动预览服务器"><a href="#3-2-启动预览服务器" class="headerlink" title="3.2 启动预览服务器"></a>3.2 启动预览服务器</h3><p>博客文章表写好就可以进行发布了，hexo提供了本地预览服务器，上一步预览效果的时候已经启动过服务器，以下是相关的命令解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 清除缓存文件，在某些情况（尤其是更换主题后），如果对站点的更改无论如何也不生效可能用到</span><br><span class="line"># hexo clean</span><br><span class="line"></span><br><span class="line"># 将md和配置等源文件生成网页静态文件，存储到public目录，简写成hexo g</span><br><span class="line">hexo generate </span><br><span class="line"></span><br><span class="line"># 启动服务器 默认访问地址： http://localhost:4000/</span><br><span class="line">hexo server</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>可以将指令编写到批处理文件，省去每次输入命令:<br>在项目根目录创建start_server.bat文件，添加以下内容并保存，之后通过双击运行来启动服务器。<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> Stopping Hexo server...</span><br><span class="line"><span class="built_in">taskkill</span> /IM &quot;node.exe&quot; /F</span><br><span class="line"><span class="built_in">echo</span> Hexo server stopped.</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Starting Hexo server...</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo server </span><br><span class="line"><span class="built_in">echo</span> Hexo server started.</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-部署到服务器"><a href="#3-3-部署到服务器" class="headerlink" title="3.3 部署到服务器"></a>3.3 部署到服务器</h3><p>以上只是本地预览，想要别人访问得到这个博客，还需要部署到服务器上自己的服务器上或者GitHub Pages等托管服务。<br>以下以发布到Github Pages为例：</p><ol><li>创建github仓库</li></ol><p>填写仓库名，名称为”username.github.io”，username是你的Github用户名，仓库属性为public  </p><p>如果你的 GitHub 仓库命名为 username.github.io，GitHub Pages 将会默认将站点托管在 username.github.io 这个域名下，否则会托管在username.github.io&#x2F;仓库名 这个路径下</p><ol start="2"><li>Hexo 提供了一键部署功能，首先使用以下命令安装插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装插件用于将生成的静态网站文件（通常位于 public 目录）部署到 GitHub</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>修改网站配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxxx/xxxx.github.io.git</span> <span class="comment"># 仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># 分支</span></span><br></pre></td></tr></table></figure></li><li>运行部署命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 一键部署</span><br><span class="line">hexo deploy </span><br><span class="line"></span><br><span class="line"># 生成静态文件并部署</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>为了方便发布，我们将上面的启动服务器脚本修改一下，移除本地预览并在生成后同时部署，新建deploy.bat文件（如果使用git bash则将文件后缀改成.sh，运行时执行”.&#x2F;deploy.sh”），使用文本编辑器增加以下内容:<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Starting Hexo deploy...</span><br><span class="line">hexo clean &amp;&amp; hexo g -d</span><br><span class="line"><span class="built_in">echo</span> Hexo deploy success !</span><br></pre></td></tr></table></figure>，<br>双击运行deploy.bat，待终端输出“INFO  Deploy done: git”字样说明网页已经提到到Github，在浏览器访问 <code>https://username.github.io/</code>，部署成功，这就是你的个人博客了，Congratulations！</li></ol><h2 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4 更换主题"></a>4 更换主题</h2><p>以上我们通过Hexo和Github搭建了一个简单的博客，但是这个博客页面样式还很简陋，很多功能如访问统计、评论功能也没有，下面就开始我们博客的美（折）化（腾）之旅。</p><p>Hexo提供了非常多的主题供选择，可以在github 搜索”hexo theme”可以根据star看到比较受欢迎的主题。</p><p>下面以butterfly为例子</p><h3 id="4-1-下载butterfly"><a href="#4-1-下载butterfly" class="headerlink" title="4.1 下载butterfly"></a>4.1 下载butterfly</h3><p>通过git clone 或者直接下载zip包并复制到项目theme目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-应用主题"><a href="#4-2-应用主题" class="headerlink" title="4.2 应用主题"></a>4.2 应用主题</h3><ul><li>修改 Hexo 根目录下的 _config.yml，把主題改为 butterfly<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-安装渲染器插件"><a href="#4-3-安装渲染器插件" class="headerlink" title="4.3 安装渲染器插件"></a>4.3 安装渲染器插件</h3><p> 如果你沒有 pug 以及 stylus 的渲染器，可能报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装渲染器插件</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>双击start_server.bat 重新启动服务器，可以看到主题效果生效了</p><p><img src="https://img.kdsunset.top/img/article01/70521.png" alt="butterfly主题预览效果"></p><h3 id="4-4-butterfly-主题配置"><a href="#4-4-butterfly-主题配置" class="headerlink" title="4.4 butterfly 主题配置"></a>4.4 butterfly 主题配置</h3><p>butterfly的配置文件在butterfly文件夹下的_config.yml，更多配置内容参考<a href="https://butterfly.js.org/">butterfly官方教程</a><br>butterfly升级主题可能会覆盖主题下的_config.yml配置文件，官方建议将butterfly主题下的配置文件重名并复制到项目根目录，在项目根目录进行配置</p><p>以下是一些比较常用的配置</p><h4 id="4-4-1-配置导航栏"><a href="#4-4-1-配置导航栏" class="headerlink" title="4.4.1 配置导航栏"></a>4.4.1 配置导航栏</h4><p>butterfly 提供了默认的导航栏tab，只需要将menu字段下的tab去掉前面的#注释即可，形式是”名称：链接地址 || 图标(<a href="https://fontawesome.com/">Font Awesome</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">   <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">   <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">   <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">   <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="comment"># List||fas fa-list:</span></span><br><span class="line">  <span class="comment">#   Music: /music/ || fas fa-music</span></span><br><span class="line">  <span class="comment">#   Movie: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="comment"># Link: /link/ || fas fa-link</span></span><br><span class="line">   <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h4 id="4-4-2-添加子页面"><a href="#4-4-2-添加子页面" class="headerlink" title="4.4.2 添加子页面"></a>4.4.2 添加子页面</h4><p>刷新页面，发现导航栏已经展示出来了，但是点击其中tab，发现报错了，这是因为还没添加页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot GET /about/</span><br></pre></td></tr></table></figure><h5 id="关于页"><a href="#关于页" class="headerlink" title="关于页"></a>关于页</h5><p>在项目根目录使用cmd命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>使用该命令后会生成&#x2F;source&#x2F;about&#x2F;index.md文件，打开并添加layout: about属性以及更多正文信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-02-23 19:20:33</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">about</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="string">这里写关于页的正文我是xxx，支持</span> <span class="string">Markdown,</span> <span class="string">HTML</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h5><p>其他子页面同理，分类页创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>同样在source&#x2F;categories&#x2F;index.md 这个文件添加属性type: “categories”</p><h5 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在 source&#x2F;tags&#x2F;index.md 中添加标签属性type: “tags”</p><h5 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h5><p>在文章的开头的Front-matter区域，添加以下字段即可新增分类或者标签：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span> <span class="string">技术</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br></pre></td></tr></table></figure><h4 id="4-4-3-头像"><a href="#4-4-3-头像" class="headerlink" title="4.4.3 头像"></a>4.4.3 头像</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span> <span class="comment"># 头像图片</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span> <span class="comment"># 头像动效</span></span><br></pre></td></tr></table></figure><h4 id="4-4-4-顶部图"><a href="#4-4-4-顶部图" class="headerlink" title="4.4.4 顶部图"></a>4.4.4 顶部图</h4><ul><li>如果不需要显示顶部图，可直接配置 disable_top_img: true</li><li>显示优先级：文章的front-matter的top_img属性 &gt;ront-matter的 cover属性 &gt; 配置文件的 default_top_img属性</li><li>主页顶部图高度：index_top_img_height:  # 例如 300px&#x2F;300em&#x2F;300rem</li></ul><h4 id="4-4-5-评论功能"><a href="#4-4-5-评论功能" class="headerlink" title="4.4.5 评论功能"></a>4.4.5 评论功能</h4><p>一般的主题都支持多个评论插件，如disqus、gitalk、valine、 waline、twikoo等</p><h5 id="以Valine为例"><a href="#以Valine为例" class="headerlink" title="以Valine为例"></a>以Valine为例</h5><ol><li><p>Valine需要LeanCloud支持，登录或注册 LeanCloud，如果是国内版需要实名，国际版不需要实名认证，然而国际版共享域名不再向中国大陆提供服务（国区IP用户无法评论），需要使用自定义域名。进入控制台后点击左下角创建应用</p></li><li><p>应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，复制APP ID、APP Key和serverURLs，由于国际版通用域名失效了，所以现在serverUrl也是要填的</p></li><li><p>在主题配置文件的comments字段下的user设置为Valine,valine填写以下内容，重新部署刷新页面即可看到评论区</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Valine</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="comment"># your appId</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="comment"># your appKey</span></span><br><span class="line">  <span class="attr">serverURLs:</span>          </span><br></pre></td></tr></table></figure></li><li><p>LeanCloud 使用自定义域名（可选）<br>这里请配合下文的绑定域名使用，可以先跳过。如果自己申请了域名，可以为LeanCloud绑定api域名。</p></li></ol><ul><li>在应用控制台 &gt; 设置 &gt; 域名绑定 &gt; API 访问域名 绑定 API 域名，填入自定义的二级域名例如<code>api.kdsunset.top </code>，勾选ssl和强制https，点击绑定后会生成一条推荐 DNS 配置</li><li>在域名管理后台新增一条CNAME记录，将刚才生成推荐 DNS 配置填入</li></ul><table><thead><tr><th>HOSTNAME</th><th>TYPE</th><th>ADDRESS</th></tr></thead><tbody><tr><td>api</td><td>CNAME</td><td>username.github.io</td></tr></tbody></table><ul><li>最后将serverURLs的值修改成自定义域名。</li></ul><p> butterfly 支持双评论系统，我们再配置一个Gitalk：</p><h5 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h5><ol><li>创建 Github 应用：登录Github，打开Settings-&gt;Developer Settings-&gt;OAuth Apps-&gt;New OAuth Apps，填写以下信息，创建成功后会生成Client ID和Client Secret<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application name：应用名，方便起见直接填github用户名</span><br><span class="line">Homepage URL：网站地址</span><br><span class="line">Application description：应用描述</span><br><span class="line">Authorization callback URL：网站地址</span><br></pre></td></tr></table></figure></li><li>修改butterfly的主题配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  #开启双评论</span><br><span class="line">  use: Valine,Gitalk</span><br><span class="line"></span><br><span class="line"># https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  client_id: # 上一步创建的Github 应用的Client ID</span><br><span class="line">  client_secret: # 上一步创建的Github 应用的Client Secret</span><br><span class="line">  repo: # 关联的Github Pages的仓库名（本文3.3小节部署服务器）</span><br><span class="line">  owner: # 你的Github 用户名</span><br><span class="line">  admin: # 你的Github 用户名</span><br><span class="line">  option:</span><br></pre></td></tr></table></figure></li><li>重新部署，在文章下的评论区即可看到gitalk评论功能。如果提示“未找到相关Issue进行评论”，则点击下方的“使用GitHub登录”，然后刷新一下页面即可，缺点就是每篇文章发布后都需要手动初始化以下，或者使用自动初始化脚本</li></ol><h4 id="4-4-6-访问人数和阅读统计"><a href="#4-4-6-访问人数和阅读统计" class="headerlink" title="4.4.6 访问人数和阅读统计"></a>4.4.6 访问人数和阅读统计</h4><p>butterfly的默认调用busuanzi的进行统计，设置以下字段，刷新页面后在侧边栏的网站资讯看到本站访客数和本站总访问量。文章标题后面带有阅读量次数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-7-字数统计"><a href="#4-4-7-字数统计" class="headerlink" title="4.4.7 字数统计"></a>4.4.7 字数统计</h4><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wordcount字数统计插件</span><br><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>配置以下字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-8-分析统计"><a href="#4-4-8-分析统计" class="headerlink" title="4.4.8 分析统计"></a>4.4.8 分析统计</h4><ul><li>以百度统计为例</li><li>登录百度统计官网管理后台，使用设置-&gt;账户设置-&gt;网站列表-&gt;新增网站</li><li>复制应用的统计代码中的key到配置中的baidu_analytics字段<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填写百度统计代码的key（形如“  hm.src = &quot;https://hm.baidu.com/hm.js?28e4ea7748d7403e4bf35f897a5e67e0&quot;;）</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-4-9-中文字和半形的英文、数字、符号之间插入空白"><a href="#4-4-9-中文字和半形的英文、数字、符号之间插入空白" class="headerlink" title="4.4.9 中文字和半形的英文、数字、符号之间插入空白"></a>4.4.9 中文字和半形的英文、数字、符号之间插入空白</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># https://github.com/vinta/pangu.js</span><br><span class="line"># Insert a space between Chinese character and English character (中英文之間添加空格)</span><br><span class="line">pangu:</span><br><span class="line">  enable: false</span><br><span class="line">  field: post # site/post</span><br></pre></td></tr></table></figure><h4 id="4-4-10-图片压缩"><a href="#4-4-10-图片压缩" class="headerlink" title="4.4.10 图片压缩"></a>4.4.10 图片压缩</h4><p>Butterfly主题需要使用到很多图片。如果图片太大，会严重拖慢网站的加载速度，以下是常用压缩工具</p><ul><li><a href="https://tinypng.com/">tinypng</a></li><li>caesium</li></ul><h2 id="5-其他优化"><a href="#5-其他优化" class="headerlink" title="5 其他优化"></a>5 其他优化</h2><p>一通操作下来，相信你的博客样式已经变得称心如意了，但是优化还远不止如此，如果觉得username.github.io格调不够高可以绑定自己的域名；如果想在搜索引擎更容易搜索到自己的博客需要做SEO优化；如果图片越来越多需要优化加载速度就需要使用图床来管理图片。</p><h3 id="5-1-绑定域名"><a href="#5-1-绑定域名" class="headerlink" title="5.1 绑定域名"></a>5.1 绑定域名</h3><p>域名注册商国内有阿里云、腾讯等，国外有GoDaddy、namesilo等，我选的是namesilo，国外的服务不需要备案，namesilo也支持支付宝，下面以namesilo为例  </p><ol><li>注册namesilo或者其他服务商，购买一个你钟意的域名。注册和购买域名不是本文重点就不展开了，网站有很多教程。</li><li>配置DNS，在namesilo点击个人头像进入Domain Manager页面,点击你的刚注册的域名，找到DNS Records，点击update，</li></ol><ul><li><p>添加以下A记录，A记录是将域名解析到ip地址，即将域名指向你的username.github.io的ip地址，注意这里<strong>不要用ping</strong> 的方式获取username.github.io的ip，因为这个ip是动态的，而是使用Github 官方文档<a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">管理 GitHub Pages 站点的自定义域</a>提供的ip。</p></li><li><p>添加CNAME记录，将你的域名解析到另一个域名，即username.github.io域名</p></li></ul><table><thead><tr><th>HOSTNAME</th><th>TYPE</th><th>ADDRESS</th></tr></thead><tbody><tr><td></td><td>A</td><td>185.199.108.153</td></tr><tr><td></td><td>A</td><td>185.199.109.153</td></tr><tr><td></td><td>A</td><td>185.199.110.153</td></tr><tr><td></td><td>A</td><td>185.199.111.153</td></tr><tr><td>www</td><td>CNAME</td><td>username.github.io</td></tr></tbody></table><ol start="4"><li>设置的CNAME文件<br>在source文件夹中下创名为”CNAME”的文件（删除后缀名），使用文本编辑器该文件，内容就是你的域名,例如<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxx.com</span><br></pre></td></tr></table></figure></li><li>设置Github仓库<br>Github支持自定义域的HTTPS，打开Github 仓库，点击Settings-&gt;Pages-&gt;GitHub Pages，你会发现已经指向你的自定义域名了，勾选Enforce HTTPS ，使用Github Page自带的证书，稍等片刻（DNS生效需要时间），就可以使用HTTPS协议访问你的域名了。</li></ol><h3 id="5-2-CDN加速"><a href="#5-2-CDN加速" class="headerlink" title="5.2 CDN加速"></a>5.2 CDN加速</h3><p>由于Github在国内的访问速度是比较慢的，为了优化访问网站的速度，可以使用Github pages+国内托管平台，如gitee、coding，双线部署的方式，这两个都需要实名备案，另一种方式是使用cdn加速，目前cloudfare有免费的服务，对国内用户来说访问速度应该好于直接访问Github （吧）。</p><p>1 登录（注册）<a href="%22https://cloudflare.com/%22">cloudflare</a>，<br>2. 添加站点。进入控制台，点击”添加站点”填写你的域名（不需要www），下一步选择个人免费版，等待系统扫描DNS记录，然后会分配 Cloudflare 名称服务器，根据提示将原来dns服务器替换成Cloudflare 名称服务器<br>3. 更改DNS服务器<br>登录注册博客的域名的服务商管理后台，本例是namesilo，打开namesilo管理后台，点击NameServer Manager，备份一下原来的dns服务器，以免cloudfare免费版不可用了时方便还原回去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NS1.DNSOWL.COM</span><br><span class="line">NS2.DNSOWL.COM</span><br><span class="line">NS3.DNSOWL.COM</span><br></pre></td></tr></table></figure><p>然后全部删除，替换成Cloudflare提供的 名称服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kristina.ns.cloudflare.com</span><br><span class="line">mario.ns.cloudflare.com</span><br></pre></td></tr></table></figure><p>4.等待激活<br>修改DNS的解析后，需要一个生效时间，回到Cloudflare平台查看更新状态，激活后会发送电子邮件到注册Cloudflare的邮箱。<br>如果激活以后访问博客首页出现“重定向次数过多的”错误，则需要将cloudflare管理后台的SSL&#x2F;TLS设置成“完全”模式。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是使用hexo + GitHub Pages 的搭建博客网站的教程，<br>seo优化的内容和图床的配置篇幅比较多，将在新文章中展开。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]. Hexo : <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>[2]. Butterfly : <a href="https://butterfly.js.org/">https://butterfly.js.org/</a><br>[3]. Valine : <a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub Pages </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
