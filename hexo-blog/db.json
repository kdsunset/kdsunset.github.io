{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/images/article01/70321.png","path":"images/article01/70321.png","modified":1,"renderable":0},{"_id":"source/images/article01/70521.png","path":"images/article01/70521.png","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/my_bg_color.css","path":"css/my_bg_color.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404_cat.jpg","path":"img/404_cat.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/bg_moon.png","path":"img/bg_moon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"4307e4f7ca7bdbc9c51f7bee573c18eb3f1efcf7","modified":1703043886036},{"_id":"source/robots.txt","hash":"9eef57568f4f4b83468b0d140b24cbc3846d8dfd","modified":1703664433486},{"_id":"source/_drafts/Ubuntu 22.04详细安装教程及使用技巧.md","hash":"843a7363a989e2581bfbff2882c3f7b7a2140ed9","modified":1703727158271},{"_id":"source/_drafts/hello-world.md","hash":"61339bf0b82182703fc09c17ea375857c46651fe","modified":1702812032613},{"_id":"source/_drafts/测试文章.md","hash":"395fbc075ed89363ffdbef9a096ac3af15b87ff6","modified":1702862654834},{"_id":"source/_posts/GitHub Pages + Hexo 搭建个人博客网站.md","hash":"b36148789d773c3262c74a5b960230a3e916fe8d","modified":1703669511385},{"_id":"source/_posts/如何使用Markdown写作.md","hash":"b098adfc66710badd3c7b141199875aed53f407a","modified":1703838042454},{"_id":"source/about/index.md","hash":"6f9d66fb30a18851f3ab7a1af819fccf0d846072","modified":1703734641349},{"_id":"source/categories/index.md","hash":"d1f8264f3590da5f99a83733b9064120d953af53","modified":1702808082057},{"_id":"source/tags/index.md","hash":"6650e7e89aded78c07253272fef17031030d3d40","modified":1702802403952},{"_id":"source/_drafts/测试文章/avatar.jpg","hash":"ba9efac8b44d3c807e5cbfab17fa54fe00e73687","modified":1701747026536},{"_id":"source/images/article01/70321.png","hash":"47126de5d77d013f672829dbcb0f73a38fc3a8ab","modified":1702976622191},{"_id":"source/images/article01/70521.png","hash":"9be6668bf9d5ace676c424cfc97652e78e5b26b1","modified":1702976735715},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1700815386000},{"_id":"themes/butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":1700815386000},{"_id":"themes/butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1700815386000},{"_id":"themes/butterfly/package.json","hash":"806ede300bb0d8a12b23af1d64a639ad09cb29f9","modified":1700815386000},{"_id":"themes/butterfly/_config.yml","hash":"4eba8bed0c9a51dd30e5c780ff71cfac2530bad4","modified":1703163276757},{"_id":"themes/butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1700815386000},{"_id":"themes/butterfly/plugins.yml","hash":"3b3b5fa56c0211a52530a99a69137027245c21b0","modified":1700815386000},{"_id":"themes/butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1700815386000},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1700815386000},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1700815386000},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1700815386000},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1700815386000},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1700815386000},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1700815386000},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1700815386000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1700815386000},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1700815386000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1700815386000},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1700815386000},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1700815386000},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"bb708def9357fc67d4b6a97eb5c4e122d88f0647","modified":1703683074233},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ecec62305aaa596bb1dfbb46c13d06fb5a9628cf","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1700815386000},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1700815386000},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1700815386000},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1700815386000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1700815386000},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"351df17e06bb5c5788cd36105ecaa849d43edcce","modified":1700815386000},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1700815386000},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1700815386000},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1700815386000},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1700815386000},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1700815386000},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1700815386000},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1700815386000},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1700815386000},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1700815386000},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1700815386000},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1700815386000},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1700815386000},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1700815386000},{"_id":"themes/butterfly/source/css/my_bg_color.css","hash":"c6b2feff6941bd9463a889b4ddaff65de6d4b1ec","modified":1702807005703},{"_id":"themes/butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1700815386000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1700815386000},{"_id":"themes/butterfly/source/img/avatar.jpg","hash":"ba9efac8b44d3c807e5cbfab17fa54fe00e73687","modified":1701747026536},{"_id":"themes/butterfly/source/img/bg_moon.png","hash":"63bb211a795541721f964264430eafc6379956f1","modified":1703129070892},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1700815386000},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1700815386000},{"_id":"themes/butterfly/source/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1700815386000},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1700815386000},{"_id":"themes/butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"a5c7d362ae63474c1a4e3eb5cd09804b3684e984","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"50d1b08367f709e5416140043933e79cd8d77559","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"3ec354778f6a4ac97fb64d5629c83b293ccceb5e","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1700815386000},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1700815386000},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1700815386000},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1700815386000},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"029eebbdcb3c682780d1de629fa06858cbe9782b","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"ef0fd5e3fe04a50e4386bb3f22e2ccd9290c6653","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":1700815386000},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1700815386000},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1700815386000},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1700815386000},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1700815386000},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1700815386000},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1700815386000},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1700815386000},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1700815386000},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1700815386000},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1700815386000},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1700815386000},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1700815386000},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1700815386000},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1700815386000},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1700815386000},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1700815386000},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1700815386000},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1700815386000},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1700815386000},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1700815386000},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1700815386000},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1700815386000},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1700815386000},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1700815386000},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5b73920843ce858df6e3b03325d5d1f43cdab3","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"894bf60ff5170cf1e4f276a8cedaf8301bceb824","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"ad7f1ee2e67deee0706e0838b5724dd37fc30a34","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"9a3617f5e90c4e4176aa2ee2e904c22466e9663b","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e434bcfb7fee59c7be2dac58a9b3a1989f21caa8","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1700815386000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1700815386000},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1700815386000},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1700815386000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1700815386000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1700815386000},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1700815386000},{"_id":"themes/butterfly/source/img/404_cat.jpg","hash":"2882ae9c53c17df49a61ed96ee4872ce58600e02","modified":1703681024650},{"_id":"public/baidu_urls.txt","hash":"2cf2462f52094302122c0da22b1111b445a84ac6","modified":1703838058548},{"_id":"public/baidusitemap.xml","hash":"824ca00e92870e964870de52e442e34229ca07ce","modified":1703838058548},{"_id":"public/search.xml","hash":"d45bb686e924acbc1b51499a5173305a20e53857","modified":1703838058548},{"_id":"public/sitemap.xml","hash":"7c85e1906eee624b319f7718fab651b89e4acdfd","modified":1703838058548},{"_id":"public/404.html","hash":"56816e43c6847507faecd3496f08378d7957ebb9","modified":1703838058548},{"_id":"public/about/index.html","hash":"702187de74078808d6720b523c476a604f21cfa1","modified":1703838058548},{"_id":"public/categories/index.html","hash":"8bfc45909175fd5267767f399bc8fcf35be1861b","modified":1703838058548},{"_id":"public/tags/index.html","hash":"9e9ee7d90f2776f1e4c2bd478311a9e26d217675","modified":1703838058548},{"_id":"public/235d6111/index.html","hash":"b09fa994ecafc14295791e9ac305d375e67c3ba3","modified":1703838058548},{"_id":"public/hxpghblog/index.html","hash":"d7865347fa86789b3373f8265c26fbd2c72219eb","modified":1703838058548},{"_id":"public/archives/index.html","hash":"3e85246b1223f7a9b15e503f64eb789a1e8ebdfc","modified":1703838058548},{"_id":"public/archives/2023/index.html","hash":"e1823cb80d68fafa4de75235fb630aa9b59d0f58","modified":1703838058548},{"_id":"public/archives/2023/12/index.html","hash":"24114cf16b42d3a4980756d7cd7e23ecb7bad236","modified":1703838058548},{"_id":"public/categories/技术/index.html","hash":"f5ff946ffde338fb75732bf53460f499effb549c","modified":1703838058548},{"_id":"public/index.html","hash":"0c71023cafc5e48d14687c1294562b3bdb80dde8","modified":1703838058548},{"_id":"public/tags/Hexo/index.html","hash":"545e6f753d3658c61f87a970ee85f81cd89881fe","modified":1703838058548},{"_id":"public/tags/Markdown/index.html","hash":"ade428e3d0a5101e4ae543af44cb1e5f7e77c28b","modified":1703838058548},{"_id":"public/tags/时序图/index.html","hash":"f17bdeccc1fd2ea4c8ebf6cb05239042804263ae","modified":1703838058548},{"_id":"public/CNAME","hash":"4307e4f7ca7bdbc9c51f7bee573c18eb3f1efcf7","modified":1703838058548},{"_id":"public/robots.txt","hash":"9eef57568f4f4b83468b0d140b24cbc3846d8dfd","modified":1703838058548},{"_id":"public/images/article01/70321.png","hash":"47126de5d77d013f672829dbcb0f73a38fc3a8ab","modified":1703838058548},{"_id":"public/images/article01/70521.png","hash":"9be6668bf9d5ace676c424cfc97652e78e5b26b1","modified":1703838058548},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1703838058548},{"_id":"public/img/bg_moon.png","hash":"63bb211a795541721f964264430eafc6379956f1","modified":1703838058548},{"_id":"public/img/avatar.jpg","hash":"ba9efac8b44d3c807e5cbfab17fa54fe00e73687","modified":1703838058548},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1703838058548},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1703838058548},{"_id":"public/img/404_cat.jpg","hash":"2882ae9c53c17df49a61ed96ee4872ce58600e02","modified":1703838058548},{"_id":"public/css/index.css","hash":"9ce30aab37bda737fbc4e58dd8ea2e0a662df69d","modified":1703838058548},{"_id":"public/css/my_bg_color.css","hash":"0b7a92d4b47f9e9b870130caed6f9f5ee43c6924","modified":1703838058548},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1703838058548},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1703838058548},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1703838058548},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1703838058548},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1703838058548},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1703838058548}],"Category":[{"name":"技术","_id":"clqqd6se50006qska1uxm2jpb"}],"Data":[],"Page":[{"title":"关于","layout":"about","date":"2023-12-15T02:11:11.000Z","_content":"\n### 关于我\n一个Android工程师，多年应用开发和系统开发以及摸鱼经验，目前从事应用沙箱和网络安全方面的工作。\n\n### 联系方式：\n* github：https://github.com/kdsunset\n* 掘金：https://juejin.cn/user/2189882891176455/posts\n* E-Mail：<fyr89757@gmail.com>\n\n### 关于本站\n以前整理资料都是写在云笔记里，很少分享出来。笔记往往是基于当时的学习状态，对于其他人或者一段时间后的自己很可能已经忘记了当时的思路和细节，~~TM这破代码是谁写？原来是我，那没事了~~，搭建这个博客的初衷就是为了更好的积累和沉淀。\n* 架构：Hexo + Github Pages + Butterfly + Cloudflare CDN\n* 目的：技术总结、分享和交流，偶有闲言碎语\n* 地址：https://kdsunset.top\n* 备用：https://kdsunset.github.io\n\n**版权声明: 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明来自 [kdsunset](https://kdsunset.top) 的个人博客！**","source":"about/index.md","raw":"---\ntitle: 关于\nlayout: about\ndate: 2023-12-15 10:11:11\n---\n\n### 关于我\n一个Android工程师，多年应用开发和系统开发以及摸鱼经验，目前从事应用沙箱和网络安全方面的工作。\n\n### 联系方式：\n* github：https://github.com/kdsunset\n* 掘金：https://juejin.cn/user/2189882891176455/posts\n* E-Mail：<fyr89757@gmail.com>\n\n### 关于本站\n以前整理资料都是写在云笔记里，很少分享出来。笔记往往是基于当时的学习状态，对于其他人或者一段时间后的自己很可能已经忘记了当时的思路和细节，~~TM这破代码是谁写？原来是我，那没事了~~，搭建这个博客的初衷就是为了更好的积累和沉淀。\n* 架构：Hexo + Github Pages + Butterfly + Cloudflare CDN\n* 目的：技术总结、分享和交流，偶有闲言碎语\n* 地址：https://kdsunset.top\n* 备用：https://kdsunset.github.io\n\n**版权声明: 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明来自 [kdsunset](https://kdsunset.top) 的个人博客！**","updated":"2023-12-28T03:37:21.349Z","path":"about/index.html","comments":1,"_id":"clqqd6sdu0000qskagwex3zo6","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>一个Android工程师，多年应用开发和系统开发以及摸鱼经验，目前从事应用沙箱和网络安全方面的工作。</p>\n<h3 id=\"联系方式：\"><a href=\"#联系方式：\" class=\"headerlink\" title=\"联系方式：\"></a>联系方式：</h3><ul>\n<li>github：<a href=\"https://github.com/kdsunset\">https://github.com/kdsunset</a></li>\n<li>掘金：<a href=\"https://juejin.cn/user/2189882891176455/posts\">https://juejin.cn/user/2189882891176455/posts</a></li>\n<li>E-Mail：<a href=\"mailto:&#102;&#121;&#x72;&#56;&#x39;&#55;&#x35;&#55;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;\">&#102;&#121;&#x72;&#56;&#x39;&#55;&#x35;&#55;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></li>\n</ul>\n<h3 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h3><p>以前整理资料都是写在云笔记里，很少分享出来。笔记往往是基于当时的学习状态，对于其他人或者一段时间后的自己很可能已经忘记了当时的思路和细节，<del>TM这破代码是谁写？原来是我，那没事了</del>，搭建这个博客的初衷就是为了更好的积累和沉淀。</p>\n<ul>\n<li>架构：Hexo + Github Pages + Butterfly + Cloudflare CDN</li>\n<li>目的：技术总结、分享和交流，偶有闲言碎语</li>\n<li>地址：<a href=\"https://kdsunset.top/\">https://kdsunset.top</a></li>\n<li>备用：<a href=\"https://kdsunset.github.io/\">https://kdsunset.github.io</a></li>\n</ul>\n<p><strong>版权声明: 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明来自 <a href=\"https://kdsunset.top/\">kdsunset</a> 的个人博客！</strong></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>一个Android工程师，多年应用开发和系统开发以及摸鱼经验，目前从事应用沙箱和网络安全方面的工作。</p>\n<h3 id=\"联系方式：\"><a href=\"#联系方式：\" class=\"headerlink\" title=\"联系方式：\"></a>联系方式：</h3><ul>\n<li>github：<a href=\"https://github.com/kdsunset\">https://github.com/kdsunset</a></li>\n<li>掘金：<a href=\"https://juejin.cn/user/2189882891176455/posts\">https://juejin.cn/user/2189882891176455/posts</a></li>\n<li>E-Mail：<a href=\"mailto:&#102;&#121;&#x72;&#56;&#x39;&#55;&#x35;&#55;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;\">&#102;&#121;&#x72;&#56;&#x39;&#55;&#x35;&#55;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></li>\n</ul>\n<h3 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h3><p>以前整理资料都是写在云笔记里，很少分享出来。笔记往往是基于当时的学习状态，对于其他人或者一段时间后的自己很可能已经忘记了当时的思路和细节，<del>TM这破代码是谁写？原来是我，那没事了</del>，搭建这个博客的初衷就是为了更好的积累和沉淀。</p>\n<ul>\n<li>架构：Hexo + Github Pages + Butterfly + Cloudflare CDN</li>\n<li>目的：技术总结、分享和交流，偶有闲言碎语</li>\n<li>地址：<a href=\"https://kdsunset.top/\">https://kdsunset.top</a></li>\n<li>备用：<a href=\"https://kdsunset.github.io/\">https://kdsunset.github.io</a></li>\n</ul>\n<p><strong>版权声明: 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 4.0 许可协议。转载请注明来自 <a href=\"https://kdsunset.top/\">kdsunset</a> 的个人博客！</strong></p>\n"},{"title":"分类","date":"2023-12-17T10:14:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2023-12-17 18:14:16\ntype: \"categories\"\n---\n","updated":"2023-12-17T10:14:42.057Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clqqd6se10002qska5it4ecng","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"标签","type":"tags","date":"2023-12-17T08:37:57.000Z","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\ndate: 2023-12-17 16:37:57\norderby: random\norder: 1\n---\n","updated":"2023-12-17T08:40:03.952Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clqqd6se30004qska2ldk60ii","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"Post":[{"_content":"# Ubuntu 22.04安装教程及使用技巧\n\n## 前言\n通常所说的 Linux 其是指Linux内核，Linux 系统是指基于 Linux 内核的操作系统的泛称，而不是一个具体的操作系统。Ubuntu 则是 Linux 其中一个发行版，其他比较知名的还有 Debian、Fedora、CentOS等。<br/>\n\n作为程序员，我们可以用使用 Ubuntu 系统来体验 Linux、 熟悉命令行操作、部署服务器、搭建梯子和交叉编译，如编译 Android 项目所需的so库，编译 Android 系统源码等等。本文将面向新手介绍在 VMware 中安装和配置 Ubuntu 的过程，以及一些常用的技巧和命令。\n\n本文所用环境\n*   VMware Workstation 17 Pro\n*   Ubuntu 22.04.3 LTS Desktop 64-bit\n\n## 1 下载镜像\n```\n# Ubuntu官方网站\nhttps://cn.ubuntu.com/download/desktop\n```\n在Ubuntu官网下iso镜像文件，同时也可看到官方推荐的Ubuntu配置要求\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7ff944fe4d14327b69e05f19b442e53~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553\\&h=189\\&s=419018\\&e=png\\&b=f6f5f5)\n\n## 2 安装\n### 2.1 VMware虚拟机安装\n如果对性能要求不是很严格，通常选择在虚拟机环境中使用Ubuntu即可。如果有一台电脑专门用来安装Ubuntu，则跟Windows重装系统的前置步骤是一样的：制作Ubuntu的U盘启动盘->bios设置U盘启动->进入菜单开始安装，这里主要讲虚拟机的安装方式。  \nps：VMware Workstation 有Player和pro两款，pro功能更多，带有快照功能。\n1. 打开VMware，选择新建虚拟机->自定义，方便我们进行详细配置\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/327abb2bc1324ac8885814beb99f82f8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513\\&h=440\\&s=904864\\&e=png\\&b=fbfbfb)\n\n2. 点击下一步，虚拟机兼容性保持默认\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deecba778054403582011c776448583a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f1f1f1)\n\n3. 安装来源区别就是，选择Ubuntu镜像文件会自动开启简易安装，默认开启英文的Ubuntu安装引导，这里选择“稍后安装操作系统”\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cb1a7e60ec345fdb37cfcffd05213f2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f0f0f0)\n\n4. 根据下载的镜像文件选择操作系统类型Linux，默认下载的是64位镜像\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c6ed3c13ffa4a5eb9eaf2257bafb2a8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f0f0f0)\n\n5. 选择安装位置，如果是需要进行编译等需要频繁读写磁盘的操作，强烈建议安装到SSD硬盘。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8037f487f01c462a93f476c7ede2cc46~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f3f3f3)\n\n6. 选择CPU配置\n*   处理器数量 ：想要虚拟的CPU颗数。对应物理主机的cpu插槽数，除了多路服务器，家用机一般一个U，\n*   每个处理器的内核数量：想要虚拟的CPU内核数。对应物理主机的超线程支持的线程数\n*   处理器内核总数：处理器数量x每个处理器的内核数量\n\n总的原则是：虚拟机处理器内核总数：< 物理主机CPU实际的线程数，例如对于6核12线程的cpu能使用的最大处理器内核总数为12个\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc948e1ec94748eab5d5ed503f975a70~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2)\n\n7. 内存选择。根据需求选择，没什么需求就按默认推荐的4GB\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1d8a2758aec4aa995c52575aff1df68~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2)\n\n8. 网络选择，这里选择NAT模式或者桥接都可以。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3128ab236be4f2d96a4589a618fbf5e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2)\n\n模式区别如下：\n* 桥接模式：虚拟机加入宿主机所在的网络，允许访问Internet互联网（当然宿主机必须可以访问互联网才行）。可以将虚拟机看做一台新电脑，主机、虚拟机和其他电脑三者通过所在局域网，互联互通。\n* NAT模式：虚拟机和宿主机组成小局域网，互联互通。虚拟机通过宿主机访问外部网络（此时宿主机起到路由器作用），但外部网络不能访问虚拟机。\n* 仅主机模式：宿主机与虚拟机组成一个封闭的局域网，虚拟机不能访问外部网络、互联网，外部网络也不能访问虚拟机。\n\n9. 磁盘选择，IO控制器和虚拟磁盘类型选择软件推荐即可，影响不大，主要是选择磁盘大小，装Ubuntu建议20G以上，后期也可扩容。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aabb363e547845338dc46bf692cfd709~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f1f1f1)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b1b1d08b910468baf7ca9b446afd674~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2)\n\n10. 添加Ubuntu系统镜像文件\n点击自定义硬件->添加，在添加硬件向导窗口选择“CD/DVD驱动器”并按确认。点击CD/DVD驱动器，在“使用ISO影像文件”选择前面下载的iso文件\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90ed3831a1734cfb849c0d378e430138~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f6f6f6)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ec64c2071624c29a8ae8fb93d1cded3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=234&s=519698&e=png&b=fbfbfb)\n\n至此，VMware Ubuntu虚拟机配置部分已经完成，下面开始安装Ubuntu。\n<br/>\n\n### 2.2 安装Ubuntu系统\n从VMware中选择刚才新建的虚拟机，点击“开启此虚拟机”。虚拟机运行后选择（按回车）“Try or Install Ubuntu”\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8eb37f981da44efa836345c8b38458a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=306&s=679575&e=png&b=020202)\n\n1. 选择系统语言，这里为了方便演示安装过程选择中文，安装好之后系统就是中文的了，不过主文件下的目录也是中文命名（强迫症震怒），然后点击“安装Ubuntu”\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84223b5fd073413a87783263aebf4f9c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=f8f7f7)\n\n2. 选择键盘布局\n\n如果这里这里没有显示“继续”按钮，可能是Ubuntu的分辨率不对导致显示不全，可以关闭安装引导窗口，右键选择“Display Setting”->Resolution重新选择分辨率即可\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d16b9f66535440d48bbcd5c233e0dfc3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=faf9f9)\n\n3. 软件更新选择，按需或随意\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd1309f47e354276afd9fa1705223bae~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=f9f9f9)\n\n4. 安装类型，可以选择自动分区，清除整个磁盘并安装Ubuntu，由于前面在VMware选择的是虚拟磁盘，可以大胆继续，不会对物理磁盘有影响。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c19020789a9e43ff90ad23f260e1b714~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=501&s=1112591&e=png&b=abaaaa)\n\n5. 选择时区，点击地图选择上海就是**UTC+8**。（为什么没有Asia/Beijing？这个大概是中国时区划分的历史原因了，一直没有更新）\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa853c4d979e4de4a7e1205006edb4ec~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=497&s=1103711&e=png&b=fafafa)\n\n6. 设置信息和密码\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7687c58d4f94446bb4c6d5343616461e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=501&s=1112591&e=png&b=f9f9f9)\n\n7. 等待安装并重启\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c54c7cfbee141fc9312d7b0b243650b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=421&s=934942&e=png&b=5f1a3f)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/933a2c1e878f4b53b7e2a92545eb8026~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=415&s=921623&e=png&b=6b1d4c)\n\n8. 完成~\n\n![1702280297691.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48f458c8eb9e49ec8f71f330c2547293~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=816&h=545&s=434735&e=png&b=822855)\n\n## 3 使用技巧\n\n#### 3.1 切换系统语言为中文\n如果安装过程选择的是英文，可以通过以下方式切换到中文：\n右键选择\"Display Settings\"->左侧菜单栏切换到\"Region&Language\"->在\"Language\"选项中选择\"Chinese\",重启完成\n如果没有中文选择，则选择Manage Installed Languages 安装中文语言包\n\n![6b5198bad92d57352d2af16f7b0208b.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ceb2b0c3e5ef43339a243867b71c4a0f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=806&h=481&s=43203&e=png&b=fafafa)\n\n#### 3.2 换源\n系统默认的软件源服务器位于国外，如果出现下载软件包很慢或者无法下载的问题，可以将官方源替换成国内镜像源或者设置科学上网以提高软件下载和安装的速度。\n\n打开系统设置->关于->软件更新->Ubuntu软件，点击“下载自:”->其他，选择国内的源或者通过“测试最佳服务器”选择网络连接更稳定的源\n\n![1702281722636.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56e1d9e1fdd54836baf7584305771a6e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=706&h=664&s=74817&e=png&b=d0d0d0)\n\n#### 3.3 虚拟机使用主机的网络代理\n如果主机配置了科学上网，可以通过如下方式使虚拟机也连接上代理，这里以v2ray为例：\n\n1. v2ray参数设置勾选“允许来自局域网的连接”\n2. Ubuntu设置-网络-网络代理，填写Http、Https、Socks设置，\n\n其中IP地址是主机的IP地址（“以太网适配器-以太网”），端口号是v2ray窗口底部导航栏“局域网[socks:xxxx][http:xxxy]”中的端口号，虚拟机网卡选桥接还是NAT都可以，v2ray也不用选全局路由。\n\n![1702282703329.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5600d45ebe024c87a7972706f0b63d3b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=980&h=579&s=59461&e=png&b=cdcdcd)\n\n#### 3.4 Ubuntu与宿主机互相复制文本或文件\n如果是Ubuntu server 可以使用lrzsz或其他ftp工具进行文件的上传或下载，在VMware中有更方便的插件\n：VMware Tools，不过兼容性不好，更推荐使用open-vm-tools，如果是桌面版使用open-vm-tools-desktop功能更多\n```\n# 检查是否安装open-vm-tools有则卸载\nsudo apt remove open-vm-tools\n# 安装open-vm-tools-desktop\nsudo apt install open-vm-tools-desktop\n```\n\n#### 3.5 配置环境变量\n.bashrc文件是用于储存用户的终端配置，包括环境变量等，以配置java环境变量为例：\n```\n# 检查是否安装jdk\njava -version\n\n# 安装openjdk-11\nsudo apt-get install openjdk-11-jdk\n\n# 打开bashrc文件\nsudo gedit ~/.bashrc\n\n#在最后一行加上:\nexport JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\n# 使环境变量马上生效\nsource ~/.bashrc\n```\n\n#### 3.6 快照功能\n快照功能是一个非常实用的功能，类似系统的还原点，不管如何瞎折腾都可以将操作系统快速还原到某个时刻，一般在搭好环境后就可以打个快照。VMware也提供了快照管理功能，位置在菜单栏“虚拟机”->快照。\n\n![3f064fcf1a767f77f100639ff75c48a.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f1c9b80fc274118a0ba2b7b22ce85f1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=935&h=442&s=219302&e=png&b=f1f0f0)\n\n#### 3.7 磁盘扩容\n当Ubuntu的磁盘空间不足时，可以通过扩容的方式（当然物理硬盘还有剩余空间）增加磁盘大小。可以通过**df -h**查看当前磁盘状态。我们使用的是Ubuntu desktop，可以直接通过软件界面进行调整。\n例如当初分配给Ubuntu的硬盘大小只有25G，现在扩容到30G：\n* 点击“编辑虚拟机设置”->硬件->硬盘->扩展，设置新容量大小\n* Ubuntu侧边栏的显示应用程序->工具文件夹->“磁盘”应用，点击Hard Disk，可以发现多了一块未分配空间，\n在需要扩容的分区点击齿轮图标选择调整大小，输入调整的大小并确认。\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/103aebe81b11419392b91b437b9769b2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=896&h=516&s=121387&e=png&b=f8f7f7)\n![338dee9d28573dee0f979f6979469fd.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3526b065ca6e4f89897133ca0d7747f2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=902&h=601&s=93392&e=png&b=d6d6d6)\n\n## 4 常用命令\n#### 4.1 软件管理\napt是一个Shell 前端软件包管理器，提供软件包的安装、更新和卸载等功能，使用apt命令需要root权限。\n```\n# 以git为例\n# 检查可用的软件包更新\nsudo apt update\n\n# 安装\nsudo apt install git\n\n# 卸载\nsudo apt remove git \n```\n\n#### 4.2 文件处理\n```\n# 新建文件\ntouch filename.suffix\n\n# 创建目录，-p：确保目录名称存在，不存在的就建一个，可以用来创建多层目录\nmkdir -p app/src/main\n\n# 移动文件\nmv [options] sourcefile directory\n\n# 重命名\nmv [options] oldname newname\n\n# 复制文件\ncp [options] sourcefile directory\n\n# 删除文件，-r：删除包括所有子文件，-f：直接删除，谨慎使用rm -rf\nrm filename\n```\n\n#### 4.3 解压文件 \n```\n# ​.tar.gz 和 .tgz​格式\n$ tar zxvf FileName.tar.gz\n\n#.zip格式\nunzip FileName.zip\n\n```\n\n#### 4.4 创建root用户\n```\n# 创建root用户，依照提示输入密码\nsudo passwd root\n\n#进入root用户\nsu root\n```\n\n#### 4.5 同步时间\n```\n# 查看时间\ndate\n\n# 使用ntpdate同步网络时间\nsudo apt install ntpdate\n\n# 从cn.pool.ntp.org服务器同步网络时间\nntpdate -u cn.pool.ntp.org\n```\n\n#### 4.6 查找文件里符合条件的字符串\n在当前文件夹下搜索文件里面的字符内容，-r表示递归查找子目录中的文件，-w表示只显示全字符合的列\n```\ngrep -rw \"search\" \n```\n\n#### 4.7 vim 简单使用\n\n```\n# 打开文件\nvim filename.txt\n\n# 编辑文件\n# 1.打开文件后默认命令模式，按“i”进入编辑模式\n# 2.编辑完成，按“esc”返回命令模式，此时可以进行保存等操作\n\n# 退出文件\n# 1.保存并退出\n:wq\n\n# 2.放弃修改并退出\n:q!\n```\n\n#### 4.8 其他\n```\n# 修改所有用户组对文件的权限为最高权限(可读可写可执行）\nchmod -R 777 filename \n\n# 查看文件的内容，输出到终端\ncat filename\n\n# 将终端内容输出到文件，免去手动复制终端内容\nscript -f -a /path/log.txt\n```\n\n## 总结\n以上便是Ubuntu从虚拟机配置参数讲解到Ubuntu安装的全过程，以及一些个人认为比较实用的使用技巧。至于命令，如果是体验Linux记不住也没关系，当你有实际需求时，例如交叉编译源码，你会记住的。","source":"_drafts/Ubuntu 22.04详细安装教程及使用技巧.md","raw":"# Ubuntu 22.04安装教程及使用技巧\n\n## 前言\n通常所说的 Linux 其是指Linux内核，Linux 系统是指基于 Linux 内核的操作系统的泛称，而不是一个具体的操作系统。Ubuntu 则是 Linux 其中一个发行版，其他比较知名的还有 Debian、Fedora、CentOS等。<br/>\n\n作为程序员，我们可以用使用 Ubuntu 系统来体验 Linux、 熟悉命令行操作、部署服务器、搭建梯子和交叉编译，如编译 Android 项目所需的so库，编译 Android 系统源码等等。本文将面向新手介绍在 VMware 中安装和配置 Ubuntu 的过程，以及一些常用的技巧和命令。\n\n本文所用环境\n*   VMware Workstation 17 Pro\n*   Ubuntu 22.04.3 LTS Desktop 64-bit\n\n## 1 下载镜像\n```\n# Ubuntu官方网站\nhttps://cn.ubuntu.com/download/desktop\n```\n在Ubuntu官网下iso镜像文件，同时也可看到官方推荐的Ubuntu配置要求\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7ff944fe4d14327b69e05f19b442e53~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553\\&h=189\\&s=419018\\&e=png\\&b=f6f5f5)\n\n## 2 安装\n### 2.1 VMware虚拟机安装\n如果对性能要求不是很严格，通常选择在虚拟机环境中使用Ubuntu即可。如果有一台电脑专门用来安装Ubuntu，则跟Windows重装系统的前置步骤是一样的：制作Ubuntu的U盘启动盘->bios设置U盘启动->进入菜单开始安装，这里主要讲虚拟机的安装方式。  \nps：VMware Workstation 有Player和pro两款，pro功能更多，带有快照功能。\n1. 打开VMware，选择新建虚拟机->自定义，方便我们进行详细配置\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/327abb2bc1324ac8885814beb99f82f8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513\\&h=440\\&s=904864\\&e=png\\&b=fbfbfb)\n\n2. 点击下一步，虚拟机兼容性保持默认\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deecba778054403582011c776448583a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f1f1f1)\n\n3. 安装来源区别就是，选择Ubuntu镜像文件会自动开启简易安装，默认开启英文的Ubuntu安装引导，这里选择“稍后安装操作系统”\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cb1a7e60ec345fdb37cfcffd05213f2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f0f0f0)\n\n4. 根据下载的镜像文件选择操作系统类型Linux，默认下载的是64位镜像\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c6ed3c13ffa4a5eb9eaf2257bafb2a8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f0f0f0)\n\n5. 选择安装位置，如果是需要进行编译等需要频繁读写磁盘的操作，强烈建议安装到SSD硬盘。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8037f487f01c462a93f476c7ede2cc46~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f3f3f3)\n\n6. 选择CPU配置\n*   处理器数量 ：想要虚拟的CPU颗数。对应物理主机的cpu插槽数，除了多路服务器，家用机一般一个U，\n*   每个处理器的内核数量：想要虚拟的CPU内核数。对应物理主机的超线程支持的线程数\n*   处理器内核总数：处理器数量x每个处理器的内核数量\n\n总的原则是：虚拟机处理器内核总数：< 物理主机CPU实际的线程数，例如对于6核12线程的cpu能使用的最大处理器内核总数为12个\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc948e1ec94748eab5d5ed503f975a70~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2)\n\n7. 内存选择。根据需求选择，没什么需求就按默认推荐的4GB\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1d8a2758aec4aa995c52575aff1df68~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2)\n\n8. 网络选择，这里选择NAT模式或者桥接都可以。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3128ab236be4f2d96a4589a618fbf5e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2)\n\n模式区别如下：\n* 桥接模式：虚拟机加入宿主机所在的网络，允许访问Internet互联网（当然宿主机必须可以访问互联网才行）。可以将虚拟机看做一台新电脑，主机、虚拟机和其他电脑三者通过所在局域网，互联互通。\n* NAT模式：虚拟机和宿主机组成小局域网，互联互通。虚拟机通过宿主机访问外部网络（此时宿主机起到路由器作用），但外部网络不能访问虚拟机。\n* 仅主机模式：宿主机与虚拟机组成一个封闭的局域网，虚拟机不能访问外部网络、互联网，外部网络也不能访问虚拟机。\n\n9. 磁盘选择，IO控制器和虚拟磁盘类型选择软件推荐即可，影响不大，主要是选择磁盘大小，装Ubuntu建议20G以上，后期也可扩容。\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aabb363e547845338dc46bf692cfd709~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f1f1f1)\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b1b1d08b910468baf7ca9b446afd674~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2)\n\n10. 添加Ubuntu系统镜像文件\n点击自定义硬件->添加，在添加硬件向导窗口选择“CD/DVD驱动器”并按确认。点击CD/DVD驱动器，在“使用ISO影像文件”选择前面下载的iso文件\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90ed3831a1734cfb849c0d378e430138~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f6f6f6)\n\n![image.png](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ec64c2071624c29a8ae8fb93d1cded3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=234&s=519698&e=png&b=fbfbfb)\n\n至此，VMware Ubuntu虚拟机配置部分已经完成，下面开始安装Ubuntu。\n<br/>\n\n### 2.2 安装Ubuntu系统\n从VMware中选择刚才新建的虚拟机，点击“开启此虚拟机”。虚拟机运行后选择（按回车）“Try or Install Ubuntu”\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8eb37f981da44efa836345c8b38458a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=306&s=679575&e=png&b=020202)\n\n1. 选择系统语言，这里为了方便演示安装过程选择中文，安装好之后系统就是中文的了，不过主文件下的目录也是中文命名（强迫症震怒），然后点击“安装Ubuntu”\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84223b5fd073413a87783263aebf4f9c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=f8f7f7)\n\n2. 选择键盘布局\n\n如果这里这里没有显示“继续”按钮，可能是Ubuntu的分辨率不对导致显示不全，可以关闭安装引导窗口，右键选择“Display Setting”->Resolution重新选择分辨率即可\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d16b9f66535440d48bbcd5c233e0dfc3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=faf9f9)\n\n3. 软件更新选择，按需或随意\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd1309f47e354276afd9fa1705223bae~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=f9f9f9)\n\n4. 安装类型，可以选择自动分区，清除整个磁盘并安装Ubuntu，由于前面在VMware选择的是虚拟磁盘，可以大胆继续，不会对物理磁盘有影响。\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c19020789a9e43ff90ad23f260e1b714~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=501&s=1112591&e=png&b=abaaaa)\n\n5. 选择时区，点击地图选择上海就是**UTC+8**。（为什么没有Asia/Beijing？这个大概是中国时区划分的历史原因了，一直没有更新）\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa853c4d979e4de4a7e1205006edb4ec~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=497&s=1103711&e=png&b=fafafa)\n\n6. 设置信息和密码\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7687c58d4f94446bb4c6d5343616461e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=501&s=1112591&e=png&b=f9f9f9)\n\n7. 等待安装并重启\n\n![image.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c54c7cfbee141fc9312d7b0b243650b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=421&s=934942&e=png&b=5f1a3f)\n\n![image.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/933a2c1e878f4b53b7e2a92545eb8026~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=415&s=921623&e=png&b=6b1d4c)\n\n8. 完成~\n\n![1702280297691.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48f458c8eb9e49ec8f71f330c2547293~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=816&h=545&s=434735&e=png&b=822855)\n\n## 3 使用技巧\n\n#### 3.1 切换系统语言为中文\n如果安装过程选择的是英文，可以通过以下方式切换到中文：\n右键选择\"Display Settings\"->左侧菜单栏切换到\"Region&Language\"->在\"Language\"选项中选择\"Chinese\",重启完成\n如果没有中文选择，则选择Manage Installed Languages 安装中文语言包\n\n![6b5198bad92d57352d2af16f7b0208b.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ceb2b0c3e5ef43339a243867b71c4a0f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=806&h=481&s=43203&e=png&b=fafafa)\n\n#### 3.2 换源\n系统默认的软件源服务器位于国外，如果出现下载软件包很慢或者无法下载的问题，可以将官方源替换成国内镜像源或者设置科学上网以提高软件下载和安装的速度。\n\n打开系统设置->关于->软件更新->Ubuntu软件，点击“下载自:”->其他，选择国内的源或者通过“测试最佳服务器”选择网络连接更稳定的源\n\n![1702281722636.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56e1d9e1fdd54836baf7584305771a6e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=706&h=664&s=74817&e=png&b=d0d0d0)\n\n#### 3.3 虚拟机使用主机的网络代理\n如果主机配置了科学上网，可以通过如下方式使虚拟机也连接上代理，这里以v2ray为例：\n\n1. v2ray参数设置勾选“允许来自局域网的连接”\n2. Ubuntu设置-网络-网络代理，填写Http、Https、Socks设置，\n\n其中IP地址是主机的IP地址（“以太网适配器-以太网”），端口号是v2ray窗口底部导航栏“局域网[socks:xxxx][http:xxxy]”中的端口号，虚拟机网卡选桥接还是NAT都可以，v2ray也不用选全局路由。\n\n![1702282703329.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5600d45ebe024c87a7972706f0b63d3b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=980&h=579&s=59461&e=png&b=cdcdcd)\n\n#### 3.4 Ubuntu与宿主机互相复制文本或文件\n如果是Ubuntu server 可以使用lrzsz或其他ftp工具进行文件的上传或下载，在VMware中有更方便的插件\n：VMware Tools，不过兼容性不好，更推荐使用open-vm-tools，如果是桌面版使用open-vm-tools-desktop功能更多\n```\n# 检查是否安装open-vm-tools有则卸载\nsudo apt remove open-vm-tools\n# 安装open-vm-tools-desktop\nsudo apt install open-vm-tools-desktop\n```\n\n#### 3.5 配置环境变量\n.bashrc文件是用于储存用户的终端配置，包括环境变量等，以配置java环境变量为例：\n```\n# 检查是否安装jdk\njava -version\n\n# 安装openjdk-11\nsudo apt-get install openjdk-11-jdk\n\n# 打开bashrc文件\nsudo gedit ~/.bashrc\n\n#在最后一行加上:\nexport JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\n# 使环境变量马上生效\nsource ~/.bashrc\n```\n\n#### 3.6 快照功能\n快照功能是一个非常实用的功能，类似系统的还原点，不管如何瞎折腾都可以将操作系统快速还原到某个时刻，一般在搭好环境后就可以打个快照。VMware也提供了快照管理功能，位置在菜单栏“虚拟机”->快照。\n\n![3f064fcf1a767f77f100639ff75c48a.png](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f1c9b80fc274118a0ba2b7b22ce85f1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=935&h=442&s=219302&e=png&b=f1f0f0)\n\n#### 3.7 磁盘扩容\n当Ubuntu的磁盘空间不足时，可以通过扩容的方式（当然物理硬盘还有剩余空间）增加磁盘大小。可以通过**df -h**查看当前磁盘状态。我们使用的是Ubuntu desktop，可以直接通过软件界面进行调整。\n例如当初分配给Ubuntu的硬盘大小只有25G，现在扩容到30G：\n* 点击“编辑虚拟机设置”->硬件->硬盘->扩展，设置新容量大小\n* Ubuntu侧边栏的显示应用程序->工具文件夹->“磁盘”应用，点击Hard Disk，可以发现多了一块未分配空间，\n在需要扩容的分区点击齿轮图标选择调整大小，输入调整的大小并确认。\n\n![image.png](https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/103aebe81b11419392b91b437b9769b2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=896&h=516&s=121387&e=png&b=f8f7f7)\n![338dee9d28573dee0f979f6979469fd.png](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3526b065ca6e4f89897133ca0d7747f2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=902&h=601&s=93392&e=png&b=d6d6d6)\n\n## 4 常用命令\n#### 4.1 软件管理\napt是一个Shell 前端软件包管理器，提供软件包的安装、更新和卸载等功能，使用apt命令需要root权限。\n```\n# 以git为例\n# 检查可用的软件包更新\nsudo apt update\n\n# 安装\nsudo apt install git\n\n# 卸载\nsudo apt remove git \n```\n\n#### 4.2 文件处理\n```\n# 新建文件\ntouch filename.suffix\n\n# 创建目录，-p：确保目录名称存在，不存在的就建一个，可以用来创建多层目录\nmkdir -p app/src/main\n\n# 移动文件\nmv [options] sourcefile directory\n\n# 重命名\nmv [options] oldname newname\n\n# 复制文件\ncp [options] sourcefile directory\n\n# 删除文件，-r：删除包括所有子文件，-f：直接删除，谨慎使用rm -rf\nrm filename\n```\n\n#### 4.3 解压文件 \n```\n# ​.tar.gz 和 .tgz​格式\n$ tar zxvf FileName.tar.gz\n\n#.zip格式\nunzip FileName.zip\n\n```\n\n#### 4.4 创建root用户\n```\n# 创建root用户，依照提示输入密码\nsudo passwd root\n\n#进入root用户\nsu root\n```\n\n#### 4.5 同步时间\n```\n# 查看时间\ndate\n\n# 使用ntpdate同步网络时间\nsudo apt install ntpdate\n\n# 从cn.pool.ntp.org服务器同步网络时间\nntpdate -u cn.pool.ntp.org\n```\n\n#### 4.6 查找文件里符合条件的字符串\n在当前文件夹下搜索文件里面的字符内容，-r表示递归查找子目录中的文件，-w表示只显示全字符合的列\n```\ngrep -rw \"search\" \n```\n\n#### 4.7 vim 简单使用\n\n```\n# 打开文件\nvim filename.txt\n\n# 编辑文件\n# 1.打开文件后默认命令模式，按“i”进入编辑模式\n# 2.编辑完成，按“esc”返回命令模式，此时可以进行保存等操作\n\n# 退出文件\n# 1.保存并退出\n:wq\n\n# 2.放弃修改并退出\n:q!\n```\n\n#### 4.8 其他\n```\n# 修改所有用户组对文件的权限为最高权限(可读可写可执行）\nchmod -R 777 filename \n\n# 查看文件的内容，输出到终端\ncat filename\n\n# 将终端内容输出到文件，免去手动复制终端内容\nscript -f -a /path/log.txt\n```\n\n## 总结\n以上便是Ubuntu从虚拟机配置参数讲解到Ubuntu安装的全过程，以及一些个人认为比较实用的使用技巧。至于命令，如果是体验Linux记不住也没关系，当你有实际需求时，例如交叉编译源码，你会记住的。","slug":"Ubuntu 22.04详细安装教程及使用技巧","published":0,"date":"2023-12-18T01:54:36.429Z","updated":"2023-12-28T01:32:38.271Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clqqd6sdy0001qskaby8qed0h","content":"<h1 id=\"Ubuntu-22-04安装教程及使用技巧\"><a href=\"#Ubuntu-22-04安装教程及使用技巧\" class=\"headerlink\" title=\"Ubuntu 22.04安装教程及使用技巧\"></a>Ubuntu 22.04安装教程及使用技巧</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>通常所说的 Linux 其是指Linux内核，Linux 系统是指基于 Linux 内核的操作系统的泛称，而不是一个具体的操作系统。Ubuntu 则是 Linux 其中一个发行版，其他比较知名的还有 Debian、Fedora、CentOS等。<br/></p>\n<p>作为程序员，我们可以用使用 Ubuntu 系统来体验 Linux、 熟悉命令行操作、部署服务器、搭建梯子和交叉编译，如编译 Android 项目所需的so库，编译 Android 系统源码等等。本文将面向新手介绍在 VMware 中安装和配置 Ubuntu 的过程，以及一些常用的技巧和命令。</p>\n<p>本文所用环境</p>\n<ul>\n<li>VMware Workstation 17 Pro</li>\n<li>Ubuntu 22.04.3 LTS Desktop 64-bit</li>\n</ul>\n<h2 id=\"1-下载镜像\"><a href=\"#1-下载镜像\" class=\"headerlink\" title=\"1 下载镜像\"></a>1 下载镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ubuntu官方网站</span><br><span class=\"line\">https://cn.ubuntu.com/download/desktop</span><br></pre></td></tr></table></figure>\n<p>在Ubuntu官网下iso镜像文件，同时也可看到官方推荐的Ubuntu配置要求<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7ff944fe4d14327b69e05f19b442e53~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=189&s=419018&e=png&b=f6f5f5\" alt=\"image.png\"></p>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2 安装\"></a>2 安装</h2><h3 id=\"2-1-VMware虚拟机安装\"><a href=\"#2-1-VMware虚拟机安装\" class=\"headerlink\" title=\"2.1 VMware虚拟机安装\"></a>2.1 VMware虚拟机安装</h3><p>如果对性能要求不是很严格，通常选择在虚拟机环境中使用Ubuntu即可。如果有一台电脑专门用来安装Ubuntu，则跟Windows重装系统的前置步骤是一样的：制作Ubuntu的U盘启动盘-&gt;bios设置U盘启动-&gt;进入菜单开始安装，这里主要讲虚拟机的安装方式。<br>ps：VMware Workstation 有Player和pro两款，pro功能更多，带有快照功能。</p>\n<ol>\n<li>打开VMware，选择新建虚拟机-&gt;自定义，方便我们进行详细配置</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/327abb2bc1324ac8885814beb99f82f8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=fbfbfb\" alt=\"image.png\"></p>\n<p>2. 点击下一步，虚拟机兼容性保持默认</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deecba778054403582011c776448583a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f1f1f1\" alt=\"image.png\"></p>\n<p>3. 安装来源区别就是，选择Ubuntu镜像文件会自动开启简易安装，默认开启英文的Ubuntu安装引导，这里选择“稍后安装操作系统”</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cb1a7e60ec345fdb37cfcffd05213f2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f0f0f0\" alt=\"image.png\"></p>\n<p>4. 根据下载的镜像文件选择操作系统类型Linux，默认下载的是64位镜像</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c6ed3c13ffa4a5eb9eaf2257bafb2a8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f0f0f0\" alt=\"image.png\"></p>\n<p>5. 选择安装位置，如果是需要进行编译等需要频繁读写磁盘的操作，强烈建议安装到SSD硬盘。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8037f487f01c462a93f476c7ede2cc46~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f3f3f3\" alt=\"image.png\"></p>\n<p>6. 选择CPU配置</p>\n<ul>\n<li>处理器数量 ：想要虚拟的CPU颗数。对应物理主机的cpu插槽数，除了多路服务器，家用机一般一个U，</li>\n<li>每个处理器的内核数量：想要虚拟的CPU内核数。对应物理主机的超线程支持的线程数</li>\n<li>处理器内核总数：处理器数量x每个处理器的内核数量</li>\n</ul>\n<p>总的原则是：虚拟机处理器内核总数：&lt; 物理主机CPU实际的线程数，例如对于6核12线程的cpu能使用的最大处理器内核总数为12个</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc948e1ec94748eab5d5ed503f975a70~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2\" alt=\"image.png\"></p>\n<p>7. 内存选择。根据需求选择，没什么需求就按默认推荐的4GB</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1d8a2758aec4aa995c52575aff1df68~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2\" alt=\"image.png\"></p>\n<p>8. 网络选择，这里选择NAT模式或者桥接都可以。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3128ab236be4f2d96a4589a618fbf5e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2\" alt=\"image.png\"></p>\n<p>模式区别如下：</p>\n<ul>\n<li>桥接模式：虚拟机加入宿主机所在的网络，允许访问Internet互联网（当然宿主机必须可以访问互联网才行）。可以将虚拟机看做一台新电脑，主机、虚拟机和其他电脑三者通过所在局域网，互联互通。</li>\n<li>NAT模式：虚拟机和宿主机组成小局域网，互联互通。虚拟机通过宿主机访问外部网络（此时宿主机起到路由器作用），但外部网络不能访问虚拟机。</li>\n<li>仅主机模式：宿主机与虚拟机组成一个封闭的局域网，虚拟机不能访问外部网络、互联网，外部网络也不能访问虚拟机。</li>\n</ul>\n<ol start=\"9\">\n<li>磁盘选择，IO控制器和虚拟磁盘类型选择软件推荐即可，影响不大，主要是选择磁盘大小，装Ubuntu建议20G以上，后期也可扩容。</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aabb363e547845338dc46bf692cfd709~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f1f1f1\" alt=\"image.png\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b1b1d08b910468baf7ca9b446afd674~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2\" alt=\"image.png\"></p>\n<p>10. 添加Ubuntu系统镜像文件<br>点击自定义硬件-&gt;添加，在添加硬件向导窗口选择“CD&#x2F;DVD驱动器”并按确认。点击CD&#x2F;DVD驱动器，在“使用ISO影像文件”选择前面下载的iso文件</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90ed3831a1734cfb849c0d378e430138~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f6f6f6\" alt=\"image.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ec64c2071624c29a8ae8fb93d1cded3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=234&s=519698&e=png&b=fbfbfb\" alt=\"image.png\"></p>\n<p>至此，VMware Ubuntu虚拟机配置部分已经完成，下面开始安装Ubuntu。<br><br/></p>\n<h3 id=\"2-2-安装Ubuntu系统\"><a href=\"#2-2-安装Ubuntu系统\" class=\"headerlink\" title=\"2.2 安装Ubuntu系统\"></a>2.2 安装Ubuntu系统</h3><p>从VMware中选择刚才新建的虚拟机，点击“开启此虚拟机”。虚拟机运行后选择（按回车）“Try or Install Ubuntu”</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8eb37f981da44efa836345c8b38458a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=306&s=679575&e=png&b=020202\" alt=\"image.png\"></p>\n<ol>\n<li>选择系统语言，这里为了方便演示安装过程选择中文，安装好之后系统就是中文的了，不过主文件下的目录也是中文命名（强迫症震怒），然后点击“安装Ubuntu”</li>\n</ol>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84223b5fd073413a87783263aebf4f9c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=f8f7f7\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>选择键盘布局</li>\n</ol>\n<p>如果这里这里没有显示“继续”按钮，可能是Ubuntu的分辨率不对导致显示不全，可以关闭安装引导窗口，右键选择“Display Setting”-&gt;Resolution重新选择分辨率即可</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d16b9f66535440d48bbcd5c233e0dfc3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=faf9f9\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>软件更新选择，按需或随意</li>\n</ol>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd1309f47e354276afd9fa1705223bae~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=f9f9f9\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>安装类型，可以选择自动分区，清除整个磁盘并安装Ubuntu，由于前面在VMware选择的是虚拟磁盘，可以大胆继续，不会对物理磁盘有影响。</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c19020789a9e43ff90ad23f260e1b714~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=501&s=1112591&e=png&b=abaaaa\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>选择时区，点击地图选择上海就是<strong>UTC+8</strong>。（为什么没有Asia&#x2F;Beijing？这个大概是中国时区划分的历史原因了，一直没有更新）</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa853c4d979e4de4a7e1205006edb4ec~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=497&s=1103711&e=png&b=fafafa\" alt=\"image.png\"></p>\n<ol start=\"6\">\n<li>设置信息和密码</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7687c58d4f94446bb4c6d5343616461e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=501&s=1112591&e=png&b=f9f9f9\" alt=\"image.png\"></p>\n<ol start=\"7\">\n<li>等待安装并重启</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c54c7cfbee141fc9312d7b0b243650b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=421&s=934942&e=png&b=5f1a3f\" alt=\"image.png\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/933a2c1e878f4b53b7e2a92545eb8026~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=415&s=921623&e=png&b=6b1d4c\" alt=\"image.png\"></p>\n<ol start=\"8\">\n<li>完成~</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48f458c8eb9e49ec8f71f330c2547293~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=816&h=545&s=434735&e=png&b=822855\" alt=\"1702280297691.png\"></p>\n<h2 id=\"3-使用技巧\"><a href=\"#3-使用技巧\" class=\"headerlink\" title=\"3 使用技巧\"></a>3 使用技巧</h2><h4 id=\"3-1-切换系统语言为中文\"><a href=\"#3-1-切换系统语言为中文\" class=\"headerlink\" title=\"3.1 切换系统语言为中文\"></a>3.1 切换系统语言为中文</h4><p>如果安装过程选择的是英文，可以通过以下方式切换到中文：<br>右键选择”Display Settings”-&gt;左侧菜单栏切换到”Region&amp;Language”-&gt;在”Language”选项中选择”Chinese”,重启完成<br>如果没有中文选择，则选择Manage Installed Languages 安装中文语言包</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ceb2b0c3e5ef43339a243867b71c4a0f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=806&h=481&s=43203&e=png&b=fafafa\" alt=\"6b5198bad92d57352d2af16f7b0208b.png\"></p>\n<h4 id=\"3-2-换源\"><a href=\"#3-2-换源\" class=\"headerlink\" title=\"3.2 换源\"></a>3.2 换源</h4><p>系统默认的软件源服务器位于国外，如果出现下载软件包很慢或者无法下载的问题，可以将官方源替换成国内镜像源或者设置科学上网以提高软件下载和安装的速度。</p>\n<p>打开系统设置-&gt;关于-&gt;软件更新-&gt;Ubuntu软件，点击“下载自:”-&gt;其他，选择国内的源或者通过“测试最佳服务器”选择网络连接更稳定的源</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56e1d9e1fdd54836baf7584305771a6e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=706&h=664&s=74817&e=png&b=d0d0d0\" alt=\"1702281722636.png\"></p>\n<h4 id=\"3-3-虚拟机使用主机的网络代理\"><a href=\"#3-3-虚拟机使用主机的网络代理\" class=\"headerlink\" title=\"3.3 虚拟机使用主机的网络代理\"></a>3.3 虚拟机使用主机的网络代理</h4><p>如果主机配置了科学上网，可以通过如下方式使虚拟机也连接上代理，这里以v2ray为例：</p>\n<ol>\n<li>v2ray参数设置勾选“允许来自局域网的连接”</li>\n<li>Ubuntu设置-网络-网络代理，填写Http、Https、Socks设置，</li>\n</ol>\n<p>其中IP地址是主机的IP地址（“以太网适配器-以太网”），端口号是v2ray窗口底部导航栏“局域网[socks:xxxx][http:xxxy]”中的端口号，虚拟机网卡选桥接还是NAT都可以，v2ray也不用选全局路由。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5600d45ebe024c87a7972706f0b63d3b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=980&h=579&s=59461&e=png&b=cdcdcd\" alt=\"1702282703329.png\"></p>\n<h4 id=\"3-4-Ubuntu与宿主机互相复制文本或文件\"><a href=\"#3-4-Ubuntu与宿主机互相复制文本或文件\" class=\"headerlink\" title=\"3.4 Ubuntu与宿主机互相复制文本或文件\"></a>3.4 Ubuntu与宿主机互相复制文本或文件</h4><p>如果是Ubuntu server 可以使用lrzsz或其他ftp工具进行文件的上传或下载，在VMware中有更方便的插件<br>：VMware Tools，不过兼容性不好，更推荐使用open-vm-tools，如果是桌面版使用open-vm-tools-desktop功能更多</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检查是否安装open-vm-tools有则卸载</span><br><span class=\"line\">sudo apt remove open-vm-tools</span><br><span class=\"line\"># 安装open-vm-tools-desktop</span><br><span class=\"line\">sudo apt install open-vm-tools-desktop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-5-配置环境变量\"><a href=\"#3-5-配置环境变量\" class=\"headerlink\" title=\"3.5 配置环境变量\"></a>3.5 配置环境变量</h4><p>.bashrc文件是用于储存用户的终端配置，包括环境变量等，以配置java环境变量为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检查是否安装jdk</span><br><span class=\"line\">java -version</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装openjdk-11</span><br><span class=\"line\">sudo apt-get install openjdk-11-jdk</span><br><span class=\"line\"></span><br><span class=\"line\"># 打开bashrc文件</span><br><span class=\"line\">sudo gedit ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">#在最后一行加上:</span><br><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\"></span><br><span class=\"line\"># 使环境变量马上生效</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-6-快照功能\"><a href=\"#3-6-快照功能\" class=\"headerlink\" title=\"3.6 快照功能\"></a>3.6 快照功能</h4><p>快照功能是一个非常实用的功能，类似系统的还原点，不管如何瞎折腾都可以将操作系统快速还原到某个时刻，一般在搭好环境后就可以打个快照。VMware也提供了快照管理功能，位置在菜单栏“虚拟机”-&gt;快照。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f1c9b80fc274118a0ba2b7b22ce85f1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=935&h=442&s=219302&e=png&b=f1f0f0\" alt=\"3f064fcf1a767f77f100639ff75c48a.png\"></p>\n<h4 id=\"3-7-磁盘扩容\"><a href=\"#3-7-磁盘扩容\" class=\"headerlink\" title=\"3.7 磁盘扩容\"></a>3.7 磁盘扩容</h4><p>当Ubuntu的磁盘空间不足时，可以通过扩容的方式（当然物理硬盘还有剩余空间）增加磁盘大小。可以通过<strong>df -h</strong>查看当前磁盘状态。我们使用的是Ubuntu desktop，可以直接通过软件界面进行调整。<br>例如当初分配给Ubuntu的硬盘大小只有25G，现在扩容到30G：</p>\n<ul>\n<li>点击“编辑虚拟机设置”-&gt;硬件-&gt;硬盘-&gt;扩展，设置新容量大小</li>\n<li>Ubuntu侧边栏的显示应用程序-&gt;工具文件夹-&gt;“磁盘”应用，点击Hard Disk，可以发现多了一块未分配空间，<br>在需要扩容的分区点击齿轮图标选择调整大小，输入调整的大小并确认。</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/103aebe81b11419392b91b437b9769b2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=896&h=516&s=121387&e=png&b=f8f7f7\" alt=\"image.png\"><br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3526b065ca6e4f89897133ca0d7747f2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=902&h=601&s=93392&e=png&b=d6d6d6\" alt=\"338dee9d28573dee0f979f6979469fd.png\"></p>\n<h2 id=\"4-常用命令\"><a href=\"#4-常用命令\" class=\"headerlink\" title=\"4 常用命令\"></a>4 常用命令</h2><h4 id=\"4-1-软件管理\"><a href=\"#4-1-软件管理\" class=\"headerlink\" title=\"4.1 软件管理\"></a>4.1 软件管理</h4><p>apt是一个Shell 前端软件包管理器，提供软件包的安装、更新和卸载等功能，使用apt命令需要root权限。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以git为例</span><br><span class=\"line\"># 检查可用的软件包更新</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装</span><br><span class=\"line\">sudo apt install git</span><br><span class=\"line\"></span><br><span class=\"line\"># 卸载</span><br><span class=\"line\">sudo apt remove git </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-文件处理\"><a href=\"#4-2-文件处理\" class=\"headerlink\" title=\"4.2 文件处理\"></a>4.2 文件处理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文件</span><br><span class=\"line\">touch filename.suffix</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建目录，-p：确保目录名称存在，不存在的就建一个，可以用来创建多层目录</span><br><span class=\"line\">mkdir -p app/src/main</span><br><span class=\"line\"></span><br><span class=\"line\"># 移动文件</span><br><span class=\"line\">mv [options] sourcefile directory</span><br><span class=\"line\"></span><br><span class=\"line\"># 重命名</span><br><span class=\"line\">mv [options] oldname newname</span><br><span class=\"line\"></span><br><span class=\"line\"># 复制文件</span><br><span class=\"line\">cp [options] sourcefile directory</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除文件，-r：删除包括所有子文件，-f：直接删除，谨慎使用rm -rf</span><br><span class=\"line\">rm filename</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-解压文件\"><a href=\"#4-3-解压文件\" class=\"headerlink\" title=\"4.3 解压文件\"></a>4.3 解压文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ​.tar.gz 和 .tgz​格式</span><br><span class=\"line\">$ tar zxvf FileName.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">#.zip格式</span><br><span class=\"line\">unzip FileName.zip</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4-创建root用户\"><a href=\"#4-4-创建root用户\" class=\"headerlink\" title=\"4.4 创建root用户\"></a>4.4 创建root用户</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建root用户，依照提示输入密码</span><br><span class=\"line\">sudo passwd root</span><br><span class=\"line\"></span><br><span class=\"line\">#进入root用户</span><br><span class=\"line\">su root</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5-同步时间\"><a href=\"#4-5-同步时间\" class=\"headerlink\" title=\"4.5 同步时间\"></a>4.5 同步时间</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看时间</span><br><span class=\"line\">date</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用ntpdate同步网络时间</span><br><span class=\"line\">sudo apt install ntpdate</span><br><span class=\"line\"></span><br><span class=\"line\"># 从cn.pool.ntp.org服务器同步网络时间</span><br><span class=\"line\">ntpdate -u cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-6-查找文件里符合条件的字符串\"><a href=\"#4-6-查找文件里符合条件的字符串\" class=\"headerlink\" title=\"4.6 查找文件里符合条件的字符串\"></a>4.6 查找文件里符合条件的字符串</h4><p>在当前文件夹下搜索文件里面的字符内容，-r表示递归查找子目录中的文件，-w表示只显示全字符合的列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -rw &quot;search&quot; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-7-vim-简单使用\"><a href=\"#4-7-vim-简单使用\" class=\"headerlink\" title=\"4.7 vim 简单使用\"></a>4.7 vim 简单使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">vim filename.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\"># 1.打开文件后默认命令模式，按“i”进入编辑模式</span><br><span class=\"line\"># 2.编辑完成，按“esc”返回命令模式，此时可以进行保存等操作</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出文件</span><br><span class=\"line\"># 1.保存并退出</span><br><span class=\"line\">:wq</span><br><span class=\"line\"></span><br><span class=\"line\"># 2.放弃修改并退出</span><br><span class=\"line\">:q!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-8-其他\"><a href=\"#4-8-其他\" class=\"headerlink\" title=\"4.8 其他\"></a>4.8 其他</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改所有用户组对文件的权限为最高权限(可读可写可执行）</span><br><span class=\"line\">chmod -R 777 filename </span><br><span class=\"line\"></span><br><span class=\"line\"># 查看文件的内容，输出到终端</span><br><span class=\"line\">cat filename</span><br><span class=\"line\"></span><br><span class=\"line\"># 将终端内容输出到文件，免去手动复制终端内容</span><br><span class=\"line\">script -f -a /path/log.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上便是Ubuntu从虚拟机配置参数讲解到Ubuntu安装的全过程，以及一些个人认为比较实用的使用技巧。至于命令，如果是体验Linux记不住也没关系，当你有实际需求时，例如交叉编译源码，你会记住的。</p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Ubuntu-22-04安装教程及使用技巧\"><a href=\"#Ubuntu-22-04安装教程及使用技巧\" class=\"headerlink\" title=\"Ubuntu 22.04安装教程及使用技巧\"></a>Ubuntu 22.04安装教程及使用技巧</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>通常所说的 Linux 其是指Linux内核，Linux 系统是指基于 Linux 内核的操作系统的泛称，而不是一个具体的操作系统。Ubuntu 则是 Linux 其中一个发行版，其他比较知名的还有 Debian、Fedora、CentOS等。<br/></p>\n<p>作为程序员，我们可以用使用 Ubuntu 系统来体验 Linux、 熟悉命令行操作、部署服务器、搭建梯子和交叉编译，如编译 Android 项目所需的so库，编译 Android 系统源码等等。本文将面向新手介绍在 VMware 中安装和配置 Ubuntu 的过程，以及一些常用的技巧和命令。</p>\n<p>本文所用环境</p>\n<ul>\n<li>VMware Workstation 17 Pro</li>\n<li>Ubuntu 22.04.3 LTS Desktop 64-bit</li>\n</ul>\n<h2 id=\"1-下载镜像\"><a href=\"#1-下载镜像\" class=\"headerlink\" title=\"1 下载镜像\"></a>1 下载镜像</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Ubuntu官方网站</span><br><span class=\"line\">https://cn.ubuntu.com/download/desktop</span><br></pre></td></tr></table></figure>\n<p>在Ubuntu官网下iso镜像文件，同时也可看到官方推荐的Ubuntu配置要求<br><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7ff944fe4d14327b69e05f19b442e53~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=189&s=419018&e=png&b=f6f5f5\" alt=\"image.png\"></p>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2 安装\"></a>2 安装</h2><h3 id=\"2-1-VMware虚拟机安装\"><a href=\"#2-1-VMware虚拟机安装\" class=\"headerlink\" title=\"2.1 VMware虚拟机安装\"></a>2.1 VMware虚拟机安装</h3><p>如果对性能要求不是很严格，通常选择在虚拟机环境中使用Ubuntu即可。如果有一台电脑专门用来安装Ubuntu，则跟Windows重装系统的前置步骤是一样的：制作Ubuntu的U盘启动盘-&gt;bios设置U盘启动-&gt;进入菜单开始安装，这里主要讲虚拟机的安装方式。<br>ps：VMware Workstation 有Player和pro两款，pro功能更多，带有快照功能。</p>\n<ol>\n<li>打开VMware，选择新建虚拟机-&gt;自定义，方便我们进行详细配置</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/327abb2bc1324ac8885814beb99f82f8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=fbfbfb\" alt=\"image.png\"></p>\n<p>2. 点击下一步，虚拟机兼容性保持默认</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/deecba778054403582011c776448583a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f1f1f1\" alt=\"image.png\"></p>\n<p>3. 安装来源区别就是，选择Ubuntu镜像文件会自动开启简易安装，默认开启英文的Ubuntu安装引导，这里选择“稍后安装操作系统”</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cb1a7e60ec345fdb37cfcffd05213f2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f0f0f0\" alt=\"image.png\"></p>\n<p>4. 根据下载的镜像文件选择操作系统类型Linux，默认下载的是64位镜像</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c6ed3c13ffa4a5eb9eaf2257bafb2a8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f0f0f0\" alt=\"image.png\"></p>\n<p>5. 选择安装位置，如果是需要进行编译等需要频繁读写磁盘的操作，强烈建议安装到SSD硬盘。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8037f487f01c462a93f476c7ede2cc46~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f3f3f3\" alt=\"image.png\"></p>\n<p>6. 选择CPU配置</p>\n<ul>\n<li>处理器数量 ：想要虚拟的CPU颗数。对应物理主机的cpu插槽数，除了多路服务器，家用机一般一个U，</li>\n<li>每个处理器的内核数量：想要虚拟的CPU内核数。对应物理主机的超线程支持的线程数</li>\n<li>处理器内核总数：处理器数量x每个处理器的内核数量</li>\n</ul>\n<p>总的原则是：虚拟机处理器内核总数：&lt; 物理主机CPU实际的线程数，例如对于6核12线程的cpu能使用的最大处理器内核总数为12个</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc948e1ec94748eab5d5ed503f975a70~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2\" alt=\"image.png\"></p>\n<p>7. 内存选择。根据需求选择，没什么需求就按默认推荐的4GB</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1d8a2758aec4aa995c52575aff1df68~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2\" alt=\"image.png\"></p>\n<p>8. 网络选择，这里选择NAT模式或者桥接都可以。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3128ab236be4f2d96a4589a618fbf5e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2\" alt=\"image.png\"></p>\n<p>模式区别如下：</p>\n<ul>\n<li>桥接模式：虚拟机加入宿主机所在的网络，允许访问Internet互联网（当然宿主机必须可以访问互联网才行）。可以将虚拟机看做一台新电脑，主机、虚拟机和其他电脑三者通过所在局域网，互联互通。</li>\n<li>NAT模式：虚拟机和宿主机组成小局域网，互联互通。虚拟机通过宿主机访问外部网络（此时宿主机起到路由器作用），但外部网络不能访问虚拟机。</li>\n<li>仅主机模式：宿主机与虚拟机组成一个封闭的局域网，虚拟机不能访问外部网络、互联网，外部网络也不能访问虚拟机。</li>\n</ul>\n<ol start=\"9\">\n<li>磁盘选择，IO控制器和虚拟磁盘类型选择软件推荐即可，影响不大，主要是选择磁盘大小，装Ubuntu建议20G以上，后期也可扩容。</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aabb363e547845338dc46bf692cfd709~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f1f1f1\" alt=\"image.png\"></p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b1b1d08b910468baf7ca9b446afd674~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f2f2f2\" alt=\"image.png\"></p>\n<p>10. 添加Ubuntu系统镜像文件<br>点击自定义硬件-&gt;添加，在添加硬件向导窗口选择“CD&#x2F;DVD驱动器”并按确认。点击CD&#x2F;DVD驱动器，在“使用ISO影像文件”选择前面下载的iso文件</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/90ed3831a1734cfb849c0d378e430138~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=513&h=440&s=904864&e=png&b=f6f6f6\" alt=\"image.png\"></p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ec64c2071624c29a8ae8fb93d1cded3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=234&s=519698&e=png&b=fbfbfb\" alt=\"image.png\"></p>\n<p>至此，VMware Ubuntu虚拟机配置部分已经完成，下面开始安装Ubuntu。<br><br/></p>\n<h3 id=\"2-2-安装Ubuntu系统\"><a href=\"#2-2-安装Ubuntu系统\" class=\"headerlink\" title=\"2.2 安装Ubuntu系统\"></a>2.2 安装Ubuntu系统</h3><p>从VMware中选择刚才新建的虚拟机，点击“开启此虚拟机”。虚拟机运行后选择（按回车）“Try or Install Ubuntu”</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d8eb37f981da44efa836345c8b38458a~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=306&s=679575&e=png&b=020202\" alt=\"image.png\"></p>\n<ol>\n<li>选择系统语言，这里为了方便演示安装过程选择中文，安装好之后系统就是中文的了，不过主文件下的目录也是中文命名（强迫症震怒），然后点击“安装Ubuntu”</li>\n</ol>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84223b5fd073413a87783263aebf4f9c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=f8f7f7\" alt=\"image.png\"></p>\n<ol start=\"2\">\n<li>选择键盘布局</li>\n</ol>\n<p>如果这里这里没有显示“继续”按钮，可能是Ubuntu的分辨率不对导致显示不全，可以关闭安装引导窗口，右键选择“Display Setting”-&gt;Resolution重新选择分辨率即可</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d16b9f66535440d48bbcd5c233e0dfc3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=faf9f9\" alt=\"image.png\"></p>\n<ol start=\"3\">\n<li>软件更新选择，按需或随意</li>\n</ol>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd1309f47e354276afd9fa1705223bae~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=553&h=346&s=767018&e=png&b=f9f9f9\" alt=\"image.png\"></p>\n<ol start=\"4\">\n<li>安装类型，可以选择自动分区，清除整个磁盘并安装Ubuntu，由于前面在VMware选择的是虚拟磁盘，可以大胆继续，不会对物理磁盘有影响。</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c19020789a9e43ff90ad23f260e1b714~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=501&s=1112591&e=png&b=abaaaa\" alt=\"image.png\"></p>\n<ol start=\"5\">\n<li>选择时区，点击地图选择上海就是<strong>UTC+8</strong>。（为什么没有Asia&#x2F;Beijing？这个大概是中国时区划分的历史原因了，一直没有更新）</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa853c4d979e4de4a7e1205006edb4ec~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=497&s=1103711&e=png&b=fafafa\" alt=\"image.png\"></p>\n<ol start=\"6\">\n<li>设置信息和密码</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7687c58d4f94446bb4c6d5343616461e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=501&s=1112591&e=png&b=f9f9f9\" alt=\"image.png\"></p>\n<ol start=\"7\">\n<li>等待安装并重启</li>\n</ol>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c54c7cfbee141fc9312d7b0b243650b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=421&s=934942&e=png&b=5f1a3f\" alt=\"image.png\"></p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/933a2c1e878f4b53b7e2a92545eb8026~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=554&h=415&s=921623&e=png&b=6b1d4c\" alt=\"image.png\"></p>\n<ol start=\"8\">\n<li>完成~</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/48f458c8eb9e49ec8f71f330c2547293~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=816&h=545&s=434735&e=png&b=822855\" alt=\"1702280297691.png\"></p>\n<h2 id=\"3-使用技巧\"><a href=\"#3-使用技巧\" class=\"headerlink\" title=\"3 使用技巧\"></a>3 使用技巧</h2><h4 id=\"3-1-切换系统语言为中文\"><a href=\"#3-1-切换系统语言为中文\" class=\"headerlink\" title=\"3.1 切换系统语言为中文\"></a>3.1 切换系统语言为中文</h4><p>如果安装过程选择的是英文，可以通过以下方式切换到中文：<br>右键选择”Display Settings”-&gt;左侧菜单栏切换到”Region&amp;Language”-&gt;在”Language”选项中选择”Chinese”,重启完成<br>如果没有中文选择，则选择Manage Installed Languages 安装中文语言包</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ceb2b0c3e5ef43339a243867b71c4a0f~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=806&h=481&s=43203&e=png&b=fafafa\" alt=\"6b5198bad92d57352d2af16f7b0208b.png\"></p>\n<h4 id=\"3-2-换源\"><a href=\"#3-2-换源\" class=\"headerlink\" title=\"3.2 换源\"></a>3.2 换源</h4><p>系统默认的软件源服务器位于国外，如果出现下载软件包很慢或者无法下载的问题，可以将官方源替换成国内镜像源或者设置科学上网以提高软件下载和安装的速度。</p>\n<p>打开系统设置-&gt;关于-&gt;软件更新-&gt;Ubuntu软件，点击“下载自:”-&gt;其他，选择国内的源或者通过“测试最佳服务器”选择网络连接更稳定的源</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56e1d9e1fdd54836baf7584305771a6e~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=706&h=664&s=74817&e=png&b=d0d0d0\" alt=\"1702281722636.png\"></p>\n<h4 id=\"3-3-虚拟机使用主机的网络代理\"><a href=\"#3-3-虚拟机使用主机的网络代理\" class=\"headerlink\" title=\"3.3 虚拟机使用主机的网络代理\"></a>3.3 虚拟机使用主机的网络代理</h4><p>如果主机配置了科学上网，可以通过如下方式使虚拟机也连接上代理，这里以v2ray为例：</p>\n<ol>\n<li>v2ray参数设置勾选“允许来自局域网的连接”</li>\n<li>Ubuntu设置-网络-网络代理，填写Http、Https、Socks设置，</li>\n</ol>\n<p>其中IP地址是主机的IP地址（“以太网适配器-以太网”），端口号是v2ray窗口底部导航栏“局域网[socks:xxxx][http:xxxy]”中的端口号，虚拟机网卡选桥接还是NAT都可以，v2ray也不用选全局路由。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5600d45ebe024c87a7972706f0b63d3b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=980&h=579&s=59461&e=png&b=cdcdcd\" alt=\"1702282703329.png\"></p>\n<h4 id=\"3-4-Ubuntu与宿主机互相复制文本或文件\"><a href=\"#3-4-Ubuntu与宿主机互相复制文本或文件\" class=\"headerlink\" title=\"3.4 Ubuntu与宿主机互相复制文本或文件\"></a>3.4 Ubuntu与宿主机互相复制文本或文件</h4><p>如果是Ubuntu server 可以使用lrzsz或其他ftp工具进行文件的上传或下载，在VMware中有更方便的插件<br>：VMware Tools，不过兼容性不好，更推荐使用open-vm-tools，如果是桌面版使用open-vm-tools-desktop功能更多</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检查是否安装open-vm-tools有则卸载</span><br><span class=\"line\">sudo apt remove open-vm-tools</span><br><span class=\"line\"># 安装open-vm-tools-desktop</span><br><span class=\"line\">sudo apt install open-vm-tools-desktop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-5-配置环境变量\"><a href=\"#3-5-配置环境变量\" class=\"headerlink\" title=\"3.5 配置环境变量\"></a>3.5 配置环境变量</h4><p>.bashrc文件是用于储存用户的终端配置，包括环境变量等，以配置java环境变量为例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检查是否安装jdk</span><br><span class=\"line\">java -version</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装openjdk-11</span><br><span class=\"line\">sudo apt-get install openjdk-11-jdk</span><br><span class=\"line\"></span><br><span class=\"line\"># 打开bashrc文件</span><br><span class=\"line\">sudo gedit ~/.bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">#在最后一行加上:</span><br><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class=\"line\"></span><br><span class=\"line\"># 使环境变量马上生效</span><br><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-6-快照功能\"><a href=\"#3-6-快照功能\" class=\"headerlink\" title=\"3.6 快照功能\"></a>3.6 快照功能</h4><p>快照功能是一个非常实用的功能，类似系统的还原点，不管如何瞎折腾都可以将操作系统快速还原到某个时刻，一般在搭好环境后就可以打个快照。VMware也提供了快照管理功能，位置在菜单栏“虚拟机”-&gt;快照。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f1c9b80fc274118a0ba2b7b22ce85f1~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=935&h=442&s=219302&e=png&b=f1f0f0\" alt=\"3f064fcf1a767f77f100639ff75c48a.png\"></p>\n<h4 id=\"3-7-磁盘扩容\"><a href=\"#3-7-磁盘扩容\" class=\"headerlink\" title=\"3.7 磁盘扩容\"></a>3.7 磁盘扩容</h4><p>当Ubuntu的磁盘空间不足时，可以通过扩容的方式（当然物理硬盘还有剩余空间）增加磁盘大小。可以通过<strong>df -h</strong>查看当前磁盘状态。我们使用的是Ubuntu desktop，可以直接通过软件界面进行调整。<br>例如当初分配给Ubuntu的硬盘大小只有25G，现在扩容到30G：</p>\n<ul>\n<li>点击“编辑虚拟机设置”-&gt;硬件-&gt;硬盘-&gt;扩展，设置新容量大小</li>\n<li>Ubuntu侧边栏的显示应用程序-&gt;工具文件夹-&gt;“磁盘”应用，点击Hard Disk，可以发现多了一块未分配空间，<br>在需要扩容的分区点击齿轮图标选择调整大小，输入调整的大小并确认。</li>\n</ul>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/103aebe81b11419392b91b437b9769b2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=896&h=516&s=121387&e=png&b=f8f7f7\" alt=\"image.png\"><br><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3526b065ca6e4f89897133ca0d7747f2~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=902&h=601&s=93392&e=png&b=d6d6d6\" alt=\"338dee9d28573dee0f979f6979469fd.png\"></p>\n<h2 id=\"4-常用命令\"><a href=\"#4-常用命令\" class=\"headerlink\" title=\"4 常用命令\"></a>4 常用命令</h2><h4 id=\"4-1-软件管理\"><a href=\"#4-1-软件管理\" class=\"headerlink\" title=\"4.1 软件管理\"></a>4.1 软件管理</h4><p>apt是一个Shell 前端软件包管理器，提供软件包的安装、更新和卸载等功能，使用apt命令需要root权限。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 以git为例</span><br><span class=\"line\"># 检查可用的软件包更新</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装</span><br><span class=\"line\">sudo apt install git</span><br><span class=\"line\"></span><br><span class=\"line\"># 卸载</span><br><span class=\"line\">sudo apt remove git </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-文件处理\"><a href=\"#4-2-文件处理\" class=\"headerlink\" title=\"4.2 文件处理\"></a>4.2 文件处理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 新建文件</span><br><span class=\"line\">touch filename.suffix</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建目录，-p：确保目录名称存在，不存在的就建一个，可以用来创建多层目录</span><br><span class=\"line\">mkdir -p app/src/main</span><br><span class=\"line\"></span><br><span class=\"line\"># 移动文件</span><br><span class=\"line\">mv [options] sourcefile directory</span><br><span class=\"line\"></span><br><span class=\"line\"># 重命名</span><br><span class=\"line\">mv [options] oldname newname</span><br><span class=\"line\"></span><br><span class=\"line\"># 复制文件</span><br><span class=\"line\">cp [options] sourcefile directory</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除文件，-r：删除包括所有子文件，-f：直接删除，谨慎使用rm -rf</span><br><span class=\"line\">rm filename</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-3-解压文件\"><a href=\"#4-3-解压文件\" class=\"headerlink\" title=\"4.3 解压文件\"></a>4.3 解压文件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ​.tar.gz 和 .tgz​格式</span><br><span class=\"line\">$ tar zxvf FileName.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">#.zip格式</span><br><span class=\"line\">unzip FileName.zip</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4-创建root用户\"><a href=\"#4-4-创建root用户\" class=\"headerlink\" title=\"4.4 创建root用户\"></a>4.4 创建root用户</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建root用户，依照提示输入密码</span><br><span class=\"line\">sudo passwd root</span><br><span class=\"line\"></span><br><span class=\"line\">#进入root用户</span><br><span class=\"line\">su root</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-5-同步时间\"><a href=\"#4-5-同步时间\" class=\"headerlink\" title=\"4.5 同步时间\"></a>4.5 同步时间</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看时间</span><br><span class=\"line\">date</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用ntpdate同步网络时间</span><br><span class=\"line\">sudo apt install ntpdate</span><br><span class=\"line\"></span><br><span class=\"line\"># 从cn.pool.ntp.org服务器同步网络时间</span><br><span class=\"line\">ntpdate -u cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-6-查找文件里符合条件的字符串\"><a href=\"#4-6-查找文件里符合条件的字符串\" class=\"headerlink\" title=\"4.6 查找文件里符合条件的字符串\"></a>4.6 查找文件里符合条件的字符串</h4><p>在当前文件夹下搜索文件里面的字符内容，-r表示递归查找子目录中的文件，-w表示只显示全字符合的列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -rw &quot;search&quot; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-7-vim-简单使用\"><a href=\"#4-7-vim-简单使用\" class=\"headerlink\" title=\"4.7 vim 简单使用\"></a>4.7 vim 简单使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 打开文件</span><br><span class=\"line\">vim filename.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑文件</span><br><span class=\"line\"># 1.打开文件后默认命令模式，按“i”进入编辑模式</span><br><span class=\"line\"># 2.编辑完成，按“esc”返回命令模式，此时可以进行保存等操作</span><br><span class=\"line\"></span><br><span class=\"line\"># 退出文件</span><br><span class=\"line\"># 1.保存并退出</span><br><span class=\"line\">:wq</span><br><span class=\"line\"></span><br><span class=\"line\"># 2.放弃修改并退出</span><br><span class=\"line\">:q!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-8-其他\"><a href=\"#4-8-其他\" class=\"headerlink\" title=\"4.8 其他\"></a>4.8 其他</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 修改所有用户组对文件的权限为最高权限(可读可写可执行）</span><br><span class=\"line\">chmod -R 777 filename </span><br><span class=\"line\"></span><br><span class=\"line\"># 查看文件的内容，输出到终端</span><br><span class=\"line\">cat filename</span><br><span class=\"line\"></span><br><span class=\"line\"># 将终端内容输出到文件，免去手动复制终端内容</span><br><span class=\"line\">script -f -a /path/log.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上便是Ubuntu从虚拟机配置参数讲解到Ubuntu安装的全过程，以及一些个人认为比较实用的使用技巧。至于命令，如果是体验Linux记不住也没关系，当你有实际需求时，例如交叉编译源码，你会记住的。</p>\n"},{"title":"Hello World","abbrlink":"4a17b156","_content":"欢迎使用 [Hexo](https://hexo.io/)！这是你的第一篇文章。查看 [文档](https://hexo.io/docs/) 获取更多信息。如果在使用 Hexo 过程中遇到任何问题，你可以在 [故障排除](https://hexo.io/docs/troubleshooting.html) 中找到答案，或者在 [GitHub](https://github.com/hexojs/hexo/issues) 上向我提问。\n\n## 快速开始\n\n### 创建新文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 运行服务器\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程站点\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_drafts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: 技术\ntags:\n  - Hexo\nabbrlink: 4a17b156\n---\n欢迎使用 [Hexo](https://hexo.io/)！这是你的第一篇文章。查看 [文档](https://hexo.io/docs/) 获取更多信息。如果在使用 Hexo 过程中遇到任何问题，你可以在 [故障排除](https://hexo.io/docs/troubleshooting.html) 中找到答案，或者在 [GitHub](https://github.com/hexojs/hexo/issues) 上向我提问。\n\n## 快速开始\n\n### 创建新文章\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 运行服务器\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成静态文件\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 部署到远程站点\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":0,"date":"2023-12-15T02:01:00.628Z","updated":"2023-12-17T11:20:32.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqqd6se10003qskahfhp1pfz","content":"<p>欢迎使用 <a href=\"https://hexo.io/\">Hexo</a>！这是你的第一篇文章。查看 <a href=\"https://hexo.io/docs/\">文档</a> 获取更多信息。如果在使用 Hexo 过程中遇到任何问题，你可以在 <a href=\"https://hexo.io/docs/troubleshooting.html\">故障排除</a> 中找到答案，或者在 <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a> 上向我提问。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"运行服务器\"><a href=\"#运行服务器\" class=\"headerlink\" title=\"运行服务器\"></a>运行服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"部署到远程站点\"><a href=\"#部署到远程站点\" class=\"headerlink\" title=\"部署到远程站点\"></a>部署到远程站点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<p>欢迎使用 <a href=\"https://hexo.io/\">Hexo</a>！这是你的第一篇文章。查看 <a href=\"https://hexo.io/docs/\">文档</a> 获取更多信息。如果在使用 Hexo 过程中遇到任何问题，你可以在 <a href=\"https://hexo.io/docs/troubleshooting.html\">故障排除</a> 中找到答案，或者在 <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a> 上向我提问。</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"运行服务器\"><a href=\"#运行服务器\" class=\"headerlink\" title=\"运行服务器\"></a>运行服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成静态文件\"><a href=\"#生成静态文件\" class=\"headerlink\" title=\"生成静态文件\"></a>生成静态文件</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"部署到远程站点\"><a href=\"#部署到远程站点\" class=\"headerlink\" title=\"部署到远程站点\"></a>部署到远程站点</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"测试文章","abbrlink":"7a6a6b5a","date":"2023-12-15T02:15:47.000Z","_content":"## 这是一篇测试文章\n\n{% asset_img avatar.jpg 图片引用方法一 %}\n\n![图片引用方法二](./测试文章/avatar.jpg)\n\n![图片引用方法三](avatar.jpg)\n![图片引用方法四](测试文章/avatar.jpg)","source":"_drafts/测试文章.md","raw":"---\ntitle: 测试文章\nabbrlink: 7a6a6b5a\ndate: 2023-12-15 10:15:47\ntags:\n---\n## 这是一篇测试文章\n\n{% asset_img avatar.jpg 图片引用方法一 %}\n\n![图片引用方法二](./测试文章/avatar.jpg)\n\n![图片引用方法三](avatar.jpg)\n![图片引用方法四](测试文章/avatar.jpg)","slug":"测试文章","published":0,"updated":"2023-12-18T01:24:14.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqqd6se30005qskahf253bvc","content":"<h2 id=\"这是一篇测试文章\"><a href=\"#这是一篇测试文章\" class=\"headerlink\" title=\"这是一篇测试文章\"></a>这是一篇测试文章</h2>\n\n<p><img src=\"/./%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/avatar.jpg\" alt=\"图片引用方法二\"></p>\n<p><img src=\"/avatar.jpg\" alt=\"图片引用方法三\"><br><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/avatar.jpg\" alt=\"图片引用方法四\"></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h2 id=\"这是一篇测试文章\"><a href=\"#这是一篇测试文章\" class=\"headerlink\" title=\"这是一篇测试文章\"></a>这是一篇测试文章</h2>\n\n<p><img src=\"/./%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/avatar.jpg\" alt=\"图片引用方法二\"></p>\n<p><img src=\"/avatar.jpg\" alt=\"图片引用方法三\"><br><img src=\"/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/avatar.jpg\" alt=\"图片引用方法四\"></p>\n"},{"title":"Hexo + GitHub Pages 搭建个人博客网站","abbrlink":"hxpghblog","_content":"# Hexo + GitHub Pages 搭建个人博客网站\n## 前言 \n&emsp;&emsp;Hexo [/hækso/]是一个基于 Node.js 构建的静态博客框架。它能够根据 Markdown 文件生成静态的 HTML 网页，方便快速搭建静态网站。GitHub Pages 是 GitHub 提供的一项上免费托管和发布静态网站的服务，有了它可以省去自己购买和维护服务器的成本。  \n&emsp;&emsp;如果你想搭建一个个人网站或者博客，GitHub Pages + Hexo是一个不错且主流的方案。你只需要掌握一点markdown语法和git使用配合教程就可以快速上手，同时这也是本站的搭建过程~\n\n#### 本文环境 \n* Win 10\n* NodeJS v21.4.0\n* git\n\n## 1 安装软件\n### 1.1 安装git\n如果还没有安装git，在[官网](https://git-scm.com/)下载并安装git，安装过程全部选软件推荐的选项就好\n### 1.2 安装NodeJS\n* 在[NodeJS官网](https://nodejs.org/zh-cn/download/)下载安装包并安装\n* 配置环境变量，如果选择的是msi格式的安装包会自动添加环境变量\n\n### 1.3 安装 Hexo\n新建一个文件夹作为你网站的根目录，打开命令提示符（或者git bash）并cd到当前目录，使用以下命令安装Hexo\nps：在地址栏输入\"cmd\"即可打开一个定位到当前目录的命令提示符\n```\n# 使用 npm 安装 Hexo\nnpm install -g hexo-cli\n\n# 查看版本\nhexo -v\n```\n### 1.3 创建一个hexo项目并初始化\n```\n# 初始化一个名为\"hexo-blog\"的 Hexo 项目\nhexo init hexo-blog\n\ncd hexo-blog\n\n# 安装 Hexo 项目所需的依赖包\nnpm install\n\n```\nHexo 初始化完成后，会生成一个包含基本文件和目录的项目结构\n``` \nhexo-blog/         # 项目根目录\n|-- _config.yml    # 主配置文件\n|-- node_modules/  # Node.js 模块目录，通过 npm install 安装\n|-- public/        # 自动生成的静态文件，部署时上传到服务器\n|-- scaffolds/     # 模版文件\n|-- source/        # 存放源文件的目录，包括文章、图片等\n|   |-- _drafts/   # 草稿目录，未发布的文章\n|   |-- _posts/    # 存放正式发布的文章\n|-- themes/        # 存放主题的目录\n|-- .gitignore     # Git 版本控制的忽略文件列表\n|-- package.json   # 项目的 Node.js 包配置文件\n\n```\n## 2 Hexo配置\nhexo-blog/_config.yml是heox的主配置文件，用来定义博客的各种设置和选项，包括站点设置、目录设置、部署设置等等，下面是一些重要的配置选项：\nps：yaml是一个方便人类阅读的数据序列化格式，通常用来做配置文件，主要用缩进来表示层次结构，另外注意\"key: value\"的value前面有一个空格\n### 2.1 网站Site信息\n* 打开_config.yml主配置文件，找到site字段，修改网站基本信息\n```yaml\n# Site\ntitle: # 网站标题\nsubtitle: \ndescription: # 网站副标题\nkeywords:\nauthor: # 网站作者\nlanguage: zh-CN  # 指定语言，会影响主题显示的语言，按需修改\ntimezone: ''\n```\n### 2.2 开启文章资源文件夹（可选/推荐）\n\n```yaml\n# 通过 hexo new [layout] <title> 命令创建新文章时自动创建同名文件夹\npost_asset_folder: true\n```\n### 2.3 配置永久链接（可选/推荐）\nHexo 默认的链接格式是permalink: :year/:month/:day/:title/，配置永久链接有助于优化网站的 SEO：\n\n```\n# 安装插件\nnpm install hexo-abbrlink --save\n```\n修改主配置\n\n```yaml\npermalink: :abbrlink/ #文章的永久链接 \nabbrlink:\n  alg: crc32  #算法: crc16(default) and crc32\n  rep: hex    #进制: dec(default) and hex\n```\n\n* 更多配置字段参考[Hexo配置](https://hexo.io/zh-cn/docs/configuration)\n\n### 2.4 预览效果\n打开命令提示符，输入以下命令启动hexo本地服务器\n```\nhexo g\nhexo server\n```\n待终端输出类似以下字样说明启动成功\n```\nINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n```\n在浏览器访问 http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello World”的文章。\n\n![默认主题的预览效果](/images/article01/70321.png)\n\n### 3 Hexo 使用\n\n### 3.1 写作\n#### 3.1.1 编辑文章\nsource/_posts 目录是用于存放博客文章的地方，每篇博客文章对应一个 Markdown 文件。可以通过在创建和编辑文章也可以使用命令\n```\nhexo new post <title>\n```\n* 打开使用命令创建好的文章，在文件最上方有一块以 --- 分隔的区域，称为[Front-matter ](https://hexo.io/zh-cn/docs/front-matter)，作用是配置文章标题、日期、分类、标签等属性。\n#### 3.1.2 草稿箱\n在编辑过程中如果需要将文件作为草稿而不是直接发布，可以使用drafts。source/_drafts 文件夹用于存放草稿，等到完成并决定发布时再将其移动到 source/_posts 文件夹或者使用命令进行发布\n```\n# 创建一个新的草稿\nhexo new draft <title>\n\n# 将草稿发布为正式文章\nhexo publish draft <title>\n```\n\n#### 3.1.3 文章中插入图片\n* 方式1：使用markdown标签\n```\n# 外链\n![图片描述](url)\n\n# 相对于博客的根目录：source/imgs/a.jpg\n![图片描述](/imgs/a.jpg)\n\n# Hexo 配置文件 _config.yaml 将 post_asset_folder 选项设为 true,hexo new xxx 新建文章时，Hexo 便会在 source/_posts 目录下新建与文章同名的文件夹\n# 相对于某篇文章的目，例如./article_1/a.jpg的目录\n![图片描述](a.jpg)\n```\n\n* 方式2：使用 Hexo asset_img 标签\n```\n{% asset_img example.jpg This is an example image %}\n```\n缺点：无法在 Markdown 编辑器中正常显示图片\n改进：插件hexo-renderer-marked解决了这个问题\n可以只用npm install hexo-renderer-marked命令直接安装，之后在config.yaml中更改配置如下：\n```yaml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n### 3.2 启动预览服务器\n博客文章表写好就可以进行发布了，hexo提供了本地预览服务器，上一步预览效果的时候已经启动过服务器，以下是相关的命令解释：\n```\n# 清除缓存文件，在某些情况（尤其是更换主题后），如果对站点的更改无论如何也不生效可能用到\n# hexo clean\n\n# 将md和配置等源文件生成网页静态文件，存储到public目录，简写成hexo g\nhexo generate \n\n# 启动服务器 默认访问地址： http://localhost:4000/\nhexo server\n\n```\n* 可以将指令编写到批处理文件，省去每次输入命令:\n在项目根目录创建start_server.bat文件，添加以下内容并保存，之后通过双击运行来启动服务器。\n```bat\n@echo off\necho Stopping Hexo server...\ntaskkill /IM \"node.exe\" /F\necho Hexo server stopped.\n\necho Starting Hexo server...\nhexo clean && hexo g && hexo server \necho Hexo server started.\n```\n\n### 3.3 部署到服务器\n以上只是本地预览，想要别人访问得到这个博客，还需要部署到服务器上自己的服务器上或者GitHub Pages等托管服务。\n以下以发布到Github Pages为例：\n1. 创建github仓库\n\n填写仓库名，名称为\"username.github.io\"，username是你的Github用户名，仓库属性为public  \n\n如果你的 GitHub 仓库命名为 username.github.io，GitHub Pages 将会默认将站点托管在 username.github.io 这个域名下，否则会托管在username.github.io/仓库名 这个路径下\n\n2. Hexo 提供了一键部署功能，首先使用以下命令安装插件\n```\n# 安装插件用于将生成的静态网站文件（通常位于 public 目录）部署到 GitHub\nnpm install hexo-deployer-git --save\n```\n3. 修改网站配置文件\n```yaml\ndeploy:\n  type: git  \n  repo: git@github.com:xxxx/xxxx.github.io.git # 仓库地址\n  branch: main  # 分支\n```\n4. 运行部署命令\n```\n# 一键部署\nhexo deploy \n\n# 生成静态文件并部署\nhexo g -d\n```\n为了方便发布，我们将上面的启动服务器脚本修改一下，移除本地预览并在生成后同时部署，新建deploy.bat文件（如果使用git bash则将文件后缀改成.sh，运行时执行\"./deploy.sh\"），使用文本编辑器增加以下内容:\n```bat\necho Starting Hexo deploy...\nhexo clean && hexo g -d\necho Hexo deploy success !\n```\n，\n双击运行deploy.bat，待终端输出“INFO  Deploy done: git”字样说明网页已经提到到Github，在浏览器访问 `https://username.github.io/`，部署成功，这就是你的个人博客了，Congratulations！\n\n\n## 4 更换主题\n以上我们通过Hexo和Github搭建了一个简单的博客，但是这个博客页面样式还很简陋，很多功能如访问统计、评论功能也没有，下面就开始我们博客的美（折）化（腾）之旅。\n\nHexo提供了非常多的主题供选择，可以在github 搜索\"hexo theme\"可以根据star看到比较受欢迎的主题。\n\n下面以butterfly为例子\n### 4.1 下载butterfly\n通过git clone 或者直接下载zip包并复制到项目theme目录下\n```\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly\n\n```\n### 4.2 应用主题\n* 修改 Hexo 根目录下的 _config.yml，把主題改为 butterfly\n```yaml\ntheme: butterfly\n```\n### 4.3 安装渲染器插件\n 如果你沒有 pug 以及 stylus 的渲染器，可能报错\n```\nextends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug\n```\n```\n# 安装渲染器插件\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n双击start_server.bat 重新启动服务器，可以看到主题效果生效了\n\n\n![butterfly主题预览效果](/images/article01/70521.png)\n\n### 4.4 butterfly 主题配置\nbutterfly的配置文件在butterfly文件夹下的_config.yml，更多配置内容参考[butterfly官方教程](https://butterfly.js.org/)\nbutterfly升级主题可能会覆盖主题下的_config.yml配置文件，官方建议将butterfly主题下的配置文件重名并复制到项目根目录，在项目根目录进行配置\n\n以下是一些比较常用的配置\n#### 4.4.1 配置导航栏\nbutterfly 提供了默认的导航栏tab，只需要将menu字段下的tab去掉前面的#注释即可，形式是\"名称：链接地址 || 图标([Font Awesome](https://fontawesome.com/)\n```yaml\nmenu:\n   首页: / || fas fa-home\n   归档: /archives/ || fas fa-archive\n   标签: /tags/ || fas fa-tags\n   分类: /categories/ || fas fa-folder-open\n  # List||fas fa-list:\n  #   Music: /music/ || fas fa-music\n  #   Movie: /movies/ || fas fa-video\n  # Link: /link/ || fas fa-link\n   关于: /about/ || fas fa-heart\n```\n#### 4.4.2 添加子页面\n刷新页面，发现导航栏已经展示出来了，但是点击其中tab，发现报错了，这是因为还没添加页面\n```\nCannot GET /about/\n```\n##### 关于页\n在项目根目录使用cmd命令\n```\nhexo new page about\n```\n使用该命令后会生成/source/about/index.md文件，打开并添加layout: about属性以及更多正文信息\n```yaml\n---\ntitle: about\ndate: 2020-02-23 19:20:33\nlayout: about\n---\n\n这里写关于页的正文我是xxx，支持 Markdown, HTML\n\n```\n##### 分类页\n其他子页面同理，分类页创建：\n```\nhexo new page categories\n```\n同样在source/categories/index.md 这个文件添加属性type: \"categories\"\n\n##### 标签页\n```\nhexo new page tags\n```\n在 source/tags/index.md 中添加标签属性type: \"tags\"\n##### 使用标签\n在文章的开头的Front-matter区域，添加以下字段即可新增分类或者标签：\n```yaml\ncategories: 技术\ntags:\n  - Hexo\n```\n#### 4.4.3 头像\n```yaml\navatar:\n  img: /img/avatar.png # 头像图片\n  effect: true # 头像动效\n```\n#### 4.4.4 顶部图\n* 如果不需要显示顶部图，可直接配置 disable_top_img: true\n* 显示优先级：文章的front-matter的top_img属性 >ront-matter的 cover属性 > 配置文件的 default_top_img属性\n* 主页顶部图高度：index_top_img_height:  # 例如 300px/300em/300rem  \n\n\n#### 4.4.5 评论功能\n一般的主题都支持多个评论插件，如disqus、gitalk、valine、 waline、twikoo等\n##### 以Valine为例\n1. Valine需要LeanCloud支持，登录或注册 LeanCloud，如果是国内版需要实名，国际版不需要实名认证，然而国际版共享域名不再向中国大陆提供服务（国区IP用户无法评论），需要使用自定义域名。进入控制台后点击左下角创建应用\n2. 应用创建好以后，进入刚刚创建的应用，选择左下角的设置>应用Key，复制APP ID、APP Key和serverURLs，由于国际版通用域名失效了，所以现在serverUrl也是要填的\n3. 在主题配置文件的comments字段下的user设置为Valine,valine填写以下内容，重新部署刷新页面即可看到评论区\n```yaml\ncomments:\n  # Up to two comments system, the first will be shown as default\n  use: Valine\n  ...\n  valine:\n  appId: # your appId\n  appKey: # your appKey\n  serverURLs:          \n```\n\n4. LeanCloud 使用自定义域名（可选）\n这里请配合下文的绑定域名使用，可以先跳过。如果自己申请了域名，可以为LeanCloud绑定api域名。\n* 在应用控制台 > 设置 > 域名绑定 > API 访问域名 绑定 API 域名，填入自定义的二级域名例如`api.kdsunset.top\n`，勾选ssl和强制https，点击绑定后会生成一条推荐 DNS 配置\n* 在域名管理后台新增一条CNAME记录，将刚才生成推荐 DNS 配置填入\n\n| HOSTNAME | TYPE | ADDRESS |\n| --- | --- | --- |\n| api | CNAME | username.github.io |\n* 最后将serverURLs的值修改成自定义域名。\n\n\n butterfly 支持双评论系统，我们再配置一个Gitalk：\n##### Gitalk\n1. 创建 Github 应用：登录Github，打开Settings->Developer Settings->OAuth Apps->New OAuth Apps，填写以下信息，创建成功后会生成Client ID和Client Secret\n```\nApplication name：应用名，方便起见直接填github用户名\nHomepage URL：网站地址\nApplication description：应用描述\nAuthorization callback URL：网站地址\n```\n2. 修改butterfly的主题配置\n```\ncomments:\n  #开启双评论\n  use: Valine,Gitalk\n\n# https://github.com/gitalk/gitalk\ngitalk:\n  client_id: # 上一步创建的Github 应用的Client ID\n  client_secret: # 上一步创建的Github 应用的Client Secret\n  repo: # 关联的Github Pages的仓库名（本文3.3小节部署服务器）\n  owner: # 你的Github 用户名\n  admin: # 你的Github 用户名\n  option:\n```\n3. 重新部署，在文章下的评论区即可看到gitalk评论功能。如果提示“未找到相关Issue进行评论”，则点击下方的“使用GitHub登录”，然后刷新一下页面即可，缺点就是每篇文章发布后都需要手动初始化以下，或者使用自动初始化脚本\n\n#### 4.4.6 访问人数和阅读统计\nbutterfly的默认调用busuanzi的进行统计，设置以下字段，刷新页面后在侧边栏的网站资讯看到本站访客数和本站总访问量。文章标题后面带有阅读量次数\n```yaml\nbusuanzi:\n  site_uv: true\n  site_pv: true\n  page_pv: true\n```\n#### 4.4.7 字数统计\n安装插件\n```\n# wordcount字数统计插件\nnpm install hexo-wordcount --save\n```\n配置以下字段\n```yaml\nwordcount:\n  enable: true\n  post_wordcount: true\n  min2read: true\n  total_wordcount: true\n```\n\n#### 4.4.8 分析统计\n* 以百度统计为例\n* 登录百度统计官网管理后台，使用设置->账户设置->网站列表->新增网站\n* 复制应用的统计代码中的key到配置中的baidu_analytics字段\n```yaml\n# 填写百度统计代码的key（形如“  hm.src = \"https://hm.baidu.com/hm.js?28e4ea7748d7403e4bf35f897a5e67e0\";）\nbaidu_analytics: \n\n```\n#### 4.4.9 中文字和半形的英文、数字、符号之间插入空白\n```\n# https://github.com/vinta/pangu.js\n# Insert a space between Chinese character and English character (中英文之間添加空格)\npangu:\n  enable: false\n  field: post # site/post\n```\n\n#### 4.4.10 图片压缩\nButterfly主题需要使用到很多图片。如果图片太大，会严重拖慢网站的加载速度，以下是常用压缩工具\n* [tinypng](https://tinypng.com/)\n* caesium\n\n## 5 其他优化\n一通操作下来，相信你的博客样式已经变得称心如意了，但是优化还远不止如此，如果觉得username.github.io格调不够高可以绑定自己的域名；如果想在搜索引擎更容易搜索到自己的博客需要做SEO优化；如果图片越来越多需要优化加载速度就需要使用图床来管理图片。\n\n### 5.1 绑定域名\n\n域名注册商国内有阿里云、腾讯等，国外有GoDaddy、namesilo等，我选的是namesilo，国外的服务不需要备案，namesilo也支持支付宝，下面以namesilo为例  \n\n1. 注册namesilo或者其他服务商，购买一个你钟意的域名。注册和购买域名不是本文重点就不展开了，网站有很多教程。\n2. 配置DNS，在namesilo点击个人头像进入Domain Manager页面,点击你的刚注册的域名，找到DNS Records，点击update，\n* 添加以下A记录，A记录是将域名解析到ip地址，即将域名指向你的username.github.io的ip地址，注意这里**不要用ping** 的方式获取username.github.io的ip，因为这个ip是动态的，而是使用Github 官方文档[管理 GitHub Pages 站点的自定义域](https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site)提供的ip。\n\n* 添加CNAME记录，将你的域名解析到另一个域名，即username.github.io域名\n\n| HOSTNAME | TYPE | ADDRESS |\n| --- | --- | --- |\n|  | A | 185.199.108.153 |\n|  | A | 185.199.109.153 |\n|  | A | 185.199.110.153 |\n|  | A | 185.199.111.153 |\n| www | CNAME | username.github.io |\n\n4. 设置的CNAME文件\n在source文件夹中下创名为\"CNAME\"的文件（删除后缀名），使用文本编辑器该文件，内容就是你的域名,例如\n```\nxxxx.com\n```\n5. 设置Github仓库\nGithub支持自定义域的HTTPS，打开Github 仓库，点击Settings->Pages->GitHub Pages，你会发现已经指向你的自定义域名了，勾选Enforce HTTPS ，使用Github Page自带的证书，稍等片刻（DNS生效需要时间），就可以使用HTTPS协议访问你的域名了。\n\n### 5.2 CDN加速\n由于Github在国内的访问速度是比较慢的，为了优化访问网站的速度，可以使用Github pages+国内托管平台，如gitee、coding，双线部署的方式，这两个都需要实名备案，另一种方式是使用cdn加速，目前cloudfare有免费的服务，对国内用户来说访问速度应该好于直接访问Github （吧）。\n\n1 登录（注册）[cloudflare](\"https://cloudflare.com/\")，\n2. 添加站点。进入控制台，点击\"添加站点\"填写你的域名（不需要www），下一步选择个人免费版，等待系统扫描DNS记录，然后会分配 Cloudflare 名称服务器，根据提示将原来dns服务器替换成Cloudflare 名称服务器\n3. 更改DNS服务器\n登录注册博客的域名的服务商管理后台，本例是namesilo，打开namesilo管理后台，点击NameServer Manager，备份一下原来的dns服务器，以免cloudfare免费版不可用了时方便还原回去。\n```\nNS1.DNSOWL.COM\nNS2.DNSOWL.COM\nNS3.DNSOWL.COM\n```\n然后全部删除，替换成Cloudflare提供的 名称服务器\n```\nkristina.ns.cloudflare.com\nmario.ns.cloudflare.com\n```\n4.等待激活\n修改DNS的解析后，需要一个生效时间，回到Cloudflare平台查看更新状态，激活后会发送电子邮件到注册Cloudflare的邮箱。\n如果激活以后访问博客首页出现“重定向次数过多的”错误，则需要将cloudflare管理后台的SSL/TLS设置成“完全”模式。\n\n## 总结\n以上就是使用hexo + GitHub Pages 的搭建博客网站的教程，\nseo优化的内容和图床的配置篇幅比较多，将在新文章中展开。\n\n## 参考资料\n[1]. Hexo : https://hexo.io/zh-cn/docs/\n[2]. Butterfly : https://butterfly.js.org/\n[3]. Valine : https://valine.js.org/quickstart.html","source":"_posts/GitHub Pages + Hexo 搭建个人博客网站.md","raw":"---\ntitle: Hexo + GitHub Pages 搭建个人博客网站\ncategories: 技术\ntags:\n  - Hexo\nabbrlink: 'hxpghblog'\n---\n# Hexo + GitHub Pages 搭建个人博客网站\n## 前言 \n&emsp;&emsp;Hexo [/hækso/]是一个基于 Node.js 构建的静态博客框架。它能够根据 Markdown 文件生成静态的 HTML 网页，方便快速搭建静态网站。GitHub Pages 是 GitHub 提供的一项上免费托管和发布静态网站的服务，有了它可以省去自己购买和维护服务器的成本。  \n&emsp;&emsp;如果你想搭建一个个人网站或者博客，GitHub Pages + Hexo是一个不错且主流的方案。你只需要掌握一点markdown语法和git使用配合教程就可以快速上手，同时这也是本站的搭建过程~\n\n#### 本文环境 \n* Win 10\n* NodeJS v21.4.0\n* git\n\n## 1 安装软件\n### 1.1 安装git\n如果还没有安装git，在[官网](https://git-scm.com/)下载并安装git，安装过程全部选软件推荐的选项就好\n### 1.2 安装NodeJS\n* 在[NodeJS官网](https://nodejs.org/zh-cn/download/)下载安装包并安装\n* 配置环境变量，如果选择的是msi格式的安装包会自动添加环境变量\n\n### 1.3 安装 Hexo\n新建一个文件夹作为你网站的根目录，打开命令提示符（或者git bash）并cd到当前目录，使用以下命令安装Hexo\nps：在地址栏输入\"cmd\"即可打开一个定位到当前目录的命令提示符\n```\n# 使用 npm 安装 Hexo\nnpm install -g hexo-cli\n\n# 查看版本\nhexo -v\n```\n### 1.3 创建一个hexo项目并初始化\n```\n# 初始化一个名为\"hexo-blog\"的 Hexo 项目\nhexo init hexo-blog\n\ncd hexo-blog\n\n# 安装 Hexo 项目所需的依赖包\nnpm install\n\n```\nHexo 初始化完成后，会生成一个包含基本文件和目录的项目结构\n``` \nhexo-blog/         # 项目根目录\n|-- _config.yml    # 主配置文件\n|-- node_modules/  # Node.js 模块目录，通过 npm install 安装\n|-- public/        # 自动生成的静态文件，部署时上传到服务器\n|-- scaffolds/     # 模版文件\n|-- source/        # 存放源文件的目录，包括文章、图片等\n|   |-- _drafts/   # 草稿目录，未发布的文章\n|   |-- _posts/    # 存放正式发布的文章\n|-- themes/        # 存放主题的目录\n|-- .gitignore     # Git 版本控制的忽略文件列表\n|-- package.json   # 项目的 Node.js 包配置文件\n\n```\n## 2 Hexo配置\nhexo-blog/_config.yml是heox的主配置文件，用来定义博客的各种设置和选项，包括站点设置、目录设置、部署设置等等，下面是一些重要的配置选项：\nps：yaml是一个方便人类阅读的数据序列化格式，通常用来做配置文件，主要用缩进来表示层次结构，另外注意\"key: value\"的value前面有一个空格\n### 2.1 网站Site信息\n* 打开_config.yml主配置文件，找到site字段，修改网站基本信息\n```yaml\n# Site\ntitle: # 网站标题\nsubtitle: \ndescription: # 网站副标题\nkeywords:\nauthor: # 网站作者\nlanguage: zh-CN  # 指定语言，会影响主题显示的语言，按需修改\ntimezone: ''\n```\n### 2.2 开启文章资源文件夹（可选/推荐）\n\n```yaml\n# 通过 hexo new [layout] <title> 命令创建新文章时自动创建同名文件夹\npost_asset_folder: true\n```\n### 2.3 配置永久链接（可选/推荐）\nHexo 默认的链接格式是permalink: :year/:month/:day/:title/，配置永久链接有助于优化网站的 SEO：\n\n```\n# 安装插件\nnpm install hexo-abbrlink --save\n```\n修改主配置\n\n```yaml\npermalink: :abbrlink/ #文章的永久链接 \nabbrlink:\n  alg: crc32  #算法: crc16(default) and crc32\n  rep: hex    #进制: dec(default) and hex\n```\n\n* 更多配置字段参考[Hexo配置](https://hexo.io/zh-cn/docs/configuration)\n\n### 2.4 预览效果\n打开命令提示符，输入以下命令启动hexo本地服务器\n```\nhexo g\nhexo server\n```\n待终端输出类似以下字样说明启动成功\n```\nINFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.\n```\n在浏览器访问 http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello World”的文章。\n\n![默认主题的预览效果](/images/article01/70321.png)\n\n### 3 Hexo 使用\n\n### 3.1 写作\n#### 3.1.1 编辑文章\nsource/_posts 目录是用于存放博客文章的地方，每篇博客文章对应一个 Markdown 文件。可以通过在创建和编辑文章也可以使用命令\n```\nhexo new post <title>\n```\n* 打开使用命令创建好的文章，在文件最上方有一块以 --- 分隔的区域，称为[Front-matter ](https://hexo.io/zh-cn/docs/front-matter)，作用是配置文章标题、日期、分类、标签等属性。\n#### 3.1.2 草稿箱\n在编辑过程中如果需要将文件作为草稿而不是直接发布，可以使用drafts。source/_drafts 文件夹用于存放草稿，等到完成并决定发布时再将其移动到 source/_posts 文件夹或者使用命令进行发布\n```\n# 创建一个新的草稿\nhexo new draft <title>\n\n# 将草稿发布为正式文章\nhexo publish draft <title>\n```\n\n#### 3.1.3 文章中插入图片\n* 方式1：使用markdown标签\n```\n# 外链\n![图片描述](url)\n\n# 相对于博客的根目录：source/imgs/a.jpg\n![图片描述](/imgs/a.jpg)\n\n# Hexo 配置文件 _config.yaml 将 post_asset_folder 选项设为 true,hexo new xxx 新建文章时，Hexo 便会在 source/_posts 目录下新建与文章同名的文件夹\n# 相对于某篇文章的目，例如./article_1/a.jpg的目录\n![图片描述](a.jpg)\n```\n\n* 方式2：使用 Hexo asset_img 标签\n```\n{% asset_img example.jpg This is an example image %}\n```\n缺点：无法在 Markdown 编辑器中正常显示图片\n改进：插件hexo-renderer-marked解决了这个问题\n可以只用npm install hexo-renderer-marked命令直接安装，之后在config.yaml中更改配置如下：\n```yaml\npost_asset_folder: true\nmarked:\n  prependRoot: true\n  postAsset: true\n```\n\n### 3.2 启动预览服务器\n博客文章表写好就可以进行发布了，hexo提供了本地预览服务器，上一步预览效果的时候已经启动过服务器，以下是相关的命令解释：\n```\n# 清除缓存文件，在某些情况（尤其是更换主题后），如果对站点的更改无论如何也不生效可能用到\n# hexo clean\n\n# 将md和配置等源文件生成网页静态文件，存储到public目录，简写成hexo g\nhexo generate \n\n# 启动服务器 默认访问地址： http://localhost:4000/\nhexo server\n\n```\n* 可以将指令编写到批处理文件，省去每次输入命令:\n在项目根目录创建start_server.bat文件，添加以下内容并保存，之后通过双击运行来启动服务器。\n```bat\n@echo off\necho Stopping Hexo server...\ntaskkill /IM \"node.exe\" /F\necho Hexo server stopped.\n\necho Starting Hexo server...\nhexo clean && hexo g && hexo server \necho Hexo server started.\n```\n\n### 3.3 部署到服务器\n以上只是本地预览，想要别人访问得到这个博客，还需要部署到服务器上自己的服务器上或者GitHub Pages等托管服务。\n以下以发布到Github Pages为例：\n1. 创建github仓库\n\n填写仓库名，名称为\"username.github.io\"，username是你的Github用户名，仓库属性为public  \n\n如果你的 GitHub 仓库命名为 username.github.io，GitHub Pages 将会默认将站点托管在 username.github.io 这个域名下，否则会托管在username.github.io/仓库名 这个路径下\n\n2. Hexo 提供了一键部署功能，首先使用以下命令安装插件\n```\n# 安装插件用于将生成的静态网站文件（通常位于 public 目录）部署到 GitHub\nnpm install hexo-deployer-git --save\n```\n3. 修改网站配置文件\n```yaml\ndeploy:\n  type: git  \n  repo: git@github.com:xxxx/xxxx.github.io.git # 仓库地址\n  branch: main  # 分支\n```\n4. 运行部署命令\n```\n# 一键部署\nhexo deploy \n\n# 生成静态文件并部署\nhexo g -d\n```\n为了方便发布，我们将上面的启动服务器脚本修改一下，移除本地预览并在生成后同时部署，新建deploy.bat文件（如果使用git bash则将文件后缀改成.sh，运行时执行\"./deploy.sh\"），使用文本编辑器增加以下内容:\n```bat\necho Starting Hexo deploy...\nhexo clean && hexo g -d\necho Hexo deploy success !\n```\n，\n双击运行deploy.bat，待终端输出“INFO  Deploy done: git”字样说明网页已经提到到Github，在浏览器访问 `https://username.github.io/`，部署成功，这就是你的个人博客了，Congratulations！\n\n\n## 4 更换主题\n以上我们通过Hexo和Github搭建了一个简单的博客，但是这个博客页面样式还很简陋，很多功能如访问统计、评论功能也没有，下面就开始我们博客的美（折）化（腾）之旅。\n\nHexo提供了非常多的主题供选择，可以在github 搜索\"hexo theme\"可以根据star看到比较受欢迎的主题。\n\n下面以butterfly为例子\n### 4.1 下载butterfly\n通过git clone 或者直接下载zip包并复制到项目theme目录下\n```\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly\n\n```\n### 4.2 应用主题\n* 修改 Hexo 根目录下的 _config.yml，把主題改为 butterfly\n```yaml\ntheme: butterfly\n```\n### 4.3 安装渲染器插件\n 如果你沒有 pug 以及 stylus 的渲染器，可能报错\n```\nextends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug\n```\n```\n# 安装渲染器插件\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n```\n双击start_server.bat 重新启动服务器，可以看到主题效果生效了\n\n\n![butterfly主题预览效果](/images/article01/70521.png)\n\n### 4.4 butterfly 主题配置\nbutterfly的配置文件在butterfly文件夹下的_config.yml，更多配置内容参考[butterfly官方教程](https://butterfly.js.org/)\nbutterfly升级主题可能会覆盖主题下的_config.yml配置文件，官方建议将butterfly主题下的配置文件重名并复制到项目根目录，在项目根目录进行配置\n\n以下是一些比较常用的配置\n#### 4.4.1 配置导航栏\nbutterfly 提供了默认的导航栏tab，只需要将menu字段下的tab去掉前面的#注释即可，形式是\"名称：链接地址 || 图标([Font Awesome](https://fontawesome.com/)\n```yaml\nmenu:\n   首页: / || fas fa-home\n   归档: /archives/ || fas fa-archive\n   标签: /tags/ || fas fa-tags\n   分类: /categories/ || fas fa-folder-open\n  # List||fas fa-list:\n  #   Music: /music/ || fas fa-music\n  #   Movie: /movies/ || fas fa-video\n  # Link: /link/ || fas fa-link\n   关于: /about/ || fas fa-heart\n```\n#### 4.4.2 添加子页面\n刷新页面，发现导航栏已经展示出来了，但是点击其中tab，发现报错了，这是因为还没添加页面\n```\nCannot GET /about/\n```\n##### 关于页\n在项目根目录使用cmd命令\n```\nhexo new page about\n```\n使用该命令后会生成/source/about/index.md文件，打开并添加layout: about属性以及更多正文信息\n```yaml\n---\ntitle: about\ndate: 2020-02-23 19:20:33\nlayout: about\n---\n\n这里写关于页的正文我是xxx，支持 Markdown, HTML\n\n```\n##### 分类页\n其他子页面同理，分类页创建：\n```\nhexo new page categories\n```\n同样在source/categories/index.md 这个文件添加属性type: \"categories\"\n\n##### 标签页\n```\nhexo new page tags\n```\n在 source/tags/index.md 中添加标签属性type: \"tags\"\n##### 使用标签\n在文章的开头的Front-matter区域，添加以下字段即可新增分类或者标签：\n```yaml\ncategories: 技术\ntags:\n  - Hexo\n```\n#### 4.4.3 头像\n```yaml\navatar:\n  img: /img/avatar.png # 头像图片\n  effect: true # 头像动效\n```\n#### 4.4.4 顶部图\n* 如果不需要显示顶部图，可直接配置 disable_top_img: true\n* 显示优先级：文章的front-matter的top_img属性 >ront-matter的 cover属性 > 配置文件的 default_top_img属性\n* 主页顶部图高度：index_top_img_height:  # 例如 300px/300em/300rem  \n\n\n#### 4.4.5 评论功能\n一般的主题都支持多个评论插件，如disqus、gitalk、valine、 waline、twikoo等\n##### 以Valine为例\n1. Valine需要LeanCloud支持，登录或注册 LeanCloud，如果是国内版需要实名，国际版不需要实名认证，然而国际版共享域名不再向中国大陆提供服务（国区IP用户无法评论），需要使用自定义域名。进入控制台后点击左下角创建应用\n2. 应用创建好以后，进入刚刚创建的应用，选择左下角的设置>应用Key，复制APP ID、APP Key和serverURLs，由于国际版通用域名失效了，所以现在serverUrl也是要填的\n3. 在主题配置文件的comments字段下的user设置为Valine,valine填写以下内容，重新部署刷新页面即可看到评论区\n```yaml\ncomments:\n  # Up to two comments system, the first will be shown as default\n  use: Valine\n  ...\n  valine:\n  appId: # your appId\n  appKey: # your appKey\n  serverURLs:          \n```\n\n4. LeanCloud 使用自定义域名（可选）\n这里请配合下文的绑定域名使用，可以先跳过。如果自己申请了域名，可以为LeanCloud绑定api域名。\n* 在应用控制台 > 设置 > 域名绑定 > API 访问域名 绑定 API 域名，填入自定义的二级域名例如`api.kdsunset.top\n`，勾选ssl和强制https，点击绑定后会生成一条推荐 DNS 配置\n* 在域名管理后台新增一条CNAME记录，将刚才生成推荐 DNS 配置填入\n\n| HOSTNAME | TYPE | ADDRESS |\n| --- | --- | --- |\n| api | CNAME | username.github.io |\n* 最后将serverURLs的值修改成自定义域名。\n\n\n butterfly 支持双评论系统，我们再配置一个Gitalk：\n##### Gitalk\n1. 创建 Github 应用：登录Github，打开Settings->Developer Settings->OAuth Apps->New OAuth Apps，填写以下信息，创建成功后会生成Client ID和Client Secret\n```\nApplication name：应用名，方便起见直接填github用户名\nHomepage URL：网站地址\nApplication description：应用描述\nAuthorization callback URL：网站地址\n```\n2. 修改butterfly的主题配置\n```\ncomments:\n  #开启双评论\n  use: Valine,Gitalk\n\n# https://github.com/gitalk/gitalk\ngitalk:\n  client_id: # 上一步创建的Github 应用的Client ID\n  client_secret: # 上一步创建的Github 应用的Client Secret\n  repo: # 关联的Github Pages的仓库名（本文3.3小节部署服务器）\n  owner: # 你的Github 用户名\n  admin: # 你的Github 用户名\n  option:\n```\n3. 重新部署，在文章下的评论区即可看到gitalk评论功能。如果提示“未找到相关Issue进行评论”，则点击下方的“使用GitHub登录”，然后刷新一下页面即可，缺点就是每篇文章发布后都需要手动初始化以下，或者使用自动初始化脚本\n\n#### 4.4.6 访问人数和阅读统计\nbutterfly的默认调用busuanzi的进行统计，设置以下字段，刷新页面后在侧边栏的网站资讯看到本站访客数和本站总访问量。文章标题后面带有阅读量次数\n```yaml\nbusuanzi:\n  site_uv: true\n  site_pv: true\n  page_pv: true\n```\n#### 4.4.7 字数统计\n安装插件\n```\n# wordcount字数统计插件\nnpm install hexo-wordcount --save\n```\n配置以下字段\n```yaml\nwordcount:\n  enable: true\n  post_wordcount: true\n  min2read: true\n  total_wordcount: true\n```\n\n#### 4.4.8 分析统计\n* 以百度统计为例\n* 登录百度统计官网管理后台，使用设置->账户设置->网站列表->新增网站\n* 复制应用的统计代码中的key到配置中的baidu_analytics字段\n```yaml\n# 填写百度统计代码的key（形如“  hm.src = \"https://hm.baidu.com/hm.js?28e4ea7748d7403e4bf35f897a5e67e0\";）\nbaidu_analytics: \n\n```\n#### 4.4.9 中文字和半形的英文、数字、符号之间插入空白\n```\n# https://github.com/vinta/pangu.js\n# Insert a space between Chinese character and English character (中英文之間添加空格)\npangu:\n  enable: false\n  field: post # site/post\n```\n\n#### 4.4.10 图片压缩\nButterfly主题需要使用到很多图片。如果图片太大，会严重拖慢网站的加载速度，以下是常用压缩工具\n* [tinypng](https://tinypng.com/)\n* caesium\n\n## 5 其他优化\n一通操作下来，相信你的博客样式已经变得称心如意了，但是优化还远不止如此，如果觉得username.github.io格调不够高可以绑定自己的域名；如果想在搜索引擎更容易搜索到自己的博客需要做SEO优化；如果图片越来越多需要优化加载速度就需要使用图床来管理图片。\n\n### 5.1 绑定域名\n\n域名注册商国内有阿里云、腾讯等，国外有GoDaddy、namesilo等，我选的是namesilo，国外的服务不需要备案，namesilo也支持支付宝，下面以namesilo为例  \n\n1. 注册namesilo或者其他服务商，购买一个你钟意的域名。注册和购买域名不是本文重点就不展开了，网站有很多教程。\n2. 配置DNS，在namesilo点击个人头像进入Domain Manager页面,点击你的刚注册的域名，找到DNS Records，点击update，\n* 添加以下A记录，A记录是将域名解析到ip地址，即将域名指向你的username.github.io的ip地址，注意这里**不要用ping** 的方式获取username.github.io的ip，因为这个ip是动态的，而是使用Github 官方文档[管理 GitHub Pages 站点的自定义域](https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site)提供的ip。\n\n* 添加CNAME记录，将你的域名解析到另一个域名，即username.github.io域名\n\n| HOSTNAME | TYPE | ADDRESS |\n| --- | --- | --- |\n|  | A | 185.199.108.153 |\n|  | A | 185.199.109.153 |\n|  | A | 185.199.110.153 |\n|  | A | 185.199.111.153 |\n| www | CNAME | username.github.io |\n\n4. 设置的CNAME文件\n在source文件夹中下创名为\"CNAME\"的文件（删除后缀名），使用文本编辑器该文件，内容就是你的域名,例如\n```\nxxxx.com\n```\n5. 设置Github仓库\nGithub支持自定义域的HTTPS，打开Github 仓库，点击Settings->Pages->GitHub Pages，你会发现已经指向你的自定义域名了，勾选Enforce HTTPS ，使用Github Page自带的证书，稍等片刻（DNS生效需要时间），就可以使用HTTPS协议访问你的域名了。\n\n### 5.2 CDN加速\n由于Github在国内的访问速度是比较慢的，为了优化访问网站的速度，可以使用Github pages+国内托管平台，如gitee、coding，双线部署的方式，这两个都需要实名备案，另一种方式是使用cdn加速，目前cloudfare有免费的服务，对国内用户来说访问速度应该好于直接访问Github （吧）。\n\n1 登录（注册）[cloudflare](\"https://cloudflare.com/\")，\n2. 添加站点。进入控制台，点击\"添加站点\"填写你的域名（不需要www），下一步选择个人免费版，等待系统扫描DNS记录，然后会分配 Cloudflare 名称服务器，根据提示将原来dns服务器替换成Cloudflare 名称服务器\n3. 更改DNS服务器\n登录注册博客的域名的服务商管理后台，本例是namesilo，打开namesilo管理后台，点击NameServer Manager，备份一下原来的dns服务器，以免cloudfare免费版不可用了时方便还原回去。\n```\nNS1.DNSOWL.COM\nNS2.DNSOWL.COM\nNS3.DNSOWL.COM\n```\n然后全部删除，替换成Cloudflare提供的 名称服务器\n```\nkristina.ns.cloudflare.com\nmario.ns.cloudflare.com\n```\n4.等待激活\n修改DNS的解析后，需要一个生效时间，回到Cloudflare平台查看更新状态，激活后会发送电子邮件到注册Cloudflare的邮箱。\n如果激活以后访问博客首页出现“重定向次数过多的”错误，则需要将cloudflare管理后台的SSL/TLS设置成“完全”模式。\n\n## 总结\n以上就是使用hexo + GitHub Pages 的搭建博客网站的教程，\nseo优化的内容和图床的配置篇幅比较多，将在新文章中展开。\n\n## 参考资料\n[1]. Hexo : https://hexo.io/zh-cn/docs/\n[2]. Butterfly : https://butterfly.js.org/\n[3]. Valine : https://valine.js.org/quickstart.html","slug":"GitHub Pages + Hexo 搭建个人博客网站","published":1,"date":"2023-12-17T13:21:30.992Z","updated":"2023-12-27T09:31:51.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqqd6se60008qskadxwn8o86","content":"<h1 id=\"Hexo-GitHub-Pages-搭建个人博客网站\"><a href=\"#Hexo-GitHub-Pages-搭建个人博客网站\" class=\"headerlink\" title=\"Hexo + GitHub Pages 搭建个人博客网站\"></a>Hexo + GitHub Pages 搭建个人博客网站</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;Hexo [&#x2F;hækso&#x2F;]是一个基于 Node.js 构建的静态博客框架。它能够根据 Markdown 文件生成静态的 HTML 网页，方便快速搭建静态网站。GitHub Pages 是 GitHub 提供的一项上免费托管和发布静态网站的服务，有了它可以省去自己购买和维护服务器的成本。<br>&emsp;&emsp;如果你想搭建一个个人网站或者博客，GitHub Pages + Hexo是一个不错且主流的方案。你只需要掌握一点markdown语法和git使用配合教程就可以快速上手，同时这也是本站的搭建过程~</p>\n<h4 id=\"本文环境\"><a href=\"#本文环境\" class=\"headerlink\" title=\"本文环境\"></a>本文环境</h4><ul>\n<li>Win 10</li>\n<li>NodeJS v21.4.0</li>\n<li>git</li>\n</ul>\n<h2 id=\"1-安装软件\"><a href=\"#1-安装软件\" class=\"headerlink\" title=\"1 安装软件\"></a>1 安装软件</h2><h3 id=\"1-1-安装git\"><a href=\"#1-1-安装git\" class=\"headerlink\" title=\"1.1 安装git\"></a>1.1 安装git</h3><p>如果还没有安装git，在<a href=\"https://git-scm.com/\">官网</a>下载并安装git，安装过程全部选软件推荐的选项就好</p>\n<h3 id=\"1-2-安装NodeJS\"><a href=\"#1-2-安装NodeJS\" class=\"headerlink\" title=\"1.2 安装NodeJS\"></a>1.2 安装NodeJS</h3><ul>\n<li>在<a href=\"https://nodejs.org/zh-cn/download/\">NodeJS官网</a>下载安装包并安装</li>\n<li>配置环境变量，如果选择的是msi格式的安装包会自动添加环境变量</li>\n</ul>\n<h3 id=\"1-3-安装-Hexo\"><a href=\"#1-3-安装-Hexo\" class=\"headerlink\" title=\"1.3 安装 Hexo\"></a>1.3 安装 Hexo</h3><p>新建一个文件夹作为你网站的根目录，打开命令提示符（或者git bash）并cd到当前目录，使用以下命令安装Hexo<br>ps：在地址栏输入”cmd”即可打开一个定位到当前目录的命令提示符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 npm 安装 Hexo</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看版本</span><br><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-创建一个hexo项目并初始化\"><a href=\"#1-3-创建一个hexo项目并初始化\" class=\"headerlink\" title=\"1.3 创建一个hexo项目并初始化\"></a>1.3 创建一个hexo项目并初始化</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 初始化一个名为&quot;hexo-blog&quot;的 Hexo 项目</span><br><span class=\"line\">hexo init hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\">cd hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装 Hexo 项目所需的依赖包</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Hexo 初始化完成后，会生成一个包含基本文件和目录的项目结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo-blog/         # 项目根目录</span><br><span class=\"line\">|-- _config.yml    # 主配置文件</span><br><span class=\"line\">|-- node_modules/  # Node.js 模块目录，通过 npm install 安装</span><br><span class=\"line\">|-- public/        # 自动生成的静态文件，部署时上传到服务器</span><br><span class=\"line\">|-- scaffolds/     # 模版文件</span><br><span class=\"line\">|-- source/        # 存放源文件的目录，包括文章、图片等</span><br><span class=\"line\">|   |-- _drafts/   # 草稿目录，未发布的文章</span><br><span class=\"line\">|   |-- _posts/    # 存放正式发布的文章</span><br><span class=\"line\">|-- themes/        # 存放主题的目录</span><br><span class=\"line\">|-- .gitignore     # Git 版本控制的忽略文件列表</span><br><span class=\"line\">|-- package.json   # 项目的 Node.js 包配置文件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Hexo配置\"><a href=\"#2-Hexo配置\" class=\"headerlink\" title=\"2 Hexo配置\"></a>2 Hexo配置</h2><p>hexo-blog&#x2F;_config.yml是heox的主配置文件，用来定义博客的各种设置和选项，包括站点设置、目录设置、部署设置等等，下面是一些重要的配置选项：<br>ps：yaml是一个方便人类阅读的数据序列化格式，通常用来做配置文件，主要用缩进来表示层次结构，另外注意”key: value”的value前面有一个空格</p>\n<h3 id=\"2-1-网站Site信息\"><a href=\"#2-1-网站Site信息\" class=\"headerlink\" title=\"2.1 网站Site信息\"></a>2.1 网站Site信息</h3><ul>\n<li>打开_config.yml主配置文件，找到site字段，修改网站基本信息<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> </span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"comment\"># 网站副标题</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"comment\"># 网站作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span>  <span class=\"comment\"># 指定语言，会影响主题显示的语言，按需修改</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-2-开启文章资源文件夹（可选-推荐）\"><a href=\"#2-2-开启文章资源文件夹（可选-推荐）\" class=\"headerlink\" title=\"2.2 开启文章资源文件夹（可选&#x2F;推荐）\"></a>2.2 开启文章资源文件夹（可选&#x2F;推荐）</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动创建同名文件夹</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-配置永久链接（可选-推荐）\"><a href=\"#2-3-配置永久链接（可选-推荐）\" class=\"headerlink\" title=\"2.3 配置永久链接（可选&#x2F;推荐）\"></a>2.3 配置永久链接（可选&#x2F;推荐）</h3><p>Hexo 默认的链接格式是permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;，配置永久链接有助于优化网站的 SEO：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装插件</span><br><span class=\"line\">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>\n<p>修改主配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:abbrlink/</span> <span class=\"comment\">#文章的永久链接 </span></span><br><span class=\"line\"><span class=\"attr\">abbrlink:</span></span><br><span class=\"line\">  <span class=\"attr\">alg:</span> <span class=\"string\">crc32</span>  <span class=\"comment\">#算法: crc16(default) and crc32</span></span><br><span class=\"line\">  <span class=\"attr\">rep:</span> <span class=\"string\">hex</span>    <span class=\"comment\">#进制: dec(default) and hex</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更多配置字段参考<a href=\"https://hexo.io/zh-cn/docs/configuration\">Hexo配置</a></li>\n</ul>\n<h3 id=\"2-4-预览效果\"><a href=\"#2-4-预览效果\" class=\"headerlink\" title=\"2.4 预览效果\"></a>2.4 预览效果</h3><p>打开命令提示符，输入以下命令启动hexo本地服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>待终端输出类似以下字样说明启动成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>在浏览器访问 <a href=\"http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello\">http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello</a> World”的文章。</p>\n<p><img src=\"/images/article01/70321.png\" alt=\"默认主题的预览效果\"></p>\n<h3 id=\"3-Hexo-使用\"><a href=\"#3-Hexo-使用\" class=\"headerlink\" title=\"3 Hexo 使用\"></a>3 Hexo 使用</h3><h3 id=\"3-1-写作\"><a href=\"#3-1-写作\" class=\"headerlink\" title=\"3.1 写作\"></a>3.1 写作</h3><h4 id=\"3-1-1-编辑文章\"><a href=\"#3-1-1-编辑文章\" class=\"headerlink\" title=\"3.1.1 编辑文章\"></a>3.1.1 编辑文章</h4><p>source&#x2F;_posts 目录是用于存放博客文章的地方，每篇博客文章对应一个 Markdown 文件。可以通过在创建和编辑文章也可以使用命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打开使用命令创建好的文章，在文件最上方有一块以 — 分隔的区域，称为<a href=\"https://hexo.io/zh-cn/docs/front-matter\">Front-matter </a>，作用是配置文章标题、日期、分类、标签等属性。</li>\n</ul>\n<h4 id=\"3-1-2-草稿箱\"><a href=\"#3-1-2-草稿箱\" class=\"headerlink\" title=\"3.1.2 草稿箱\"></a>3.1.2 草稿箱</h4><p>在编辑过程中如果需要将文件作为草稿而不是直接发布，可以使用drafts。source&#x2F;_drafts 文件夹用于存放草稿，等到完成并决定发布时再将其移动到 source&#x2F;_posts 文件夹或者使用命令进行发布</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个新的草稿</span><br><span class=\"line\">hexo new draft &lt;title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 将草稿发布为正式文章</span><br><span class=\"line\">hexo publish draft &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-3-文章中插入图片\"><a href=\"#3-1-3-文章中插入图片\" class=\"headerlink\" title=\"3.1.3 文章中插入图片\"></a>3.1.3 文章中插入图片</h4><ul>\n<li><p>方式1：使用markdown标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 外链</span><br><span class=\"line\">![图片描述](url)</span><br><span class=\"line\"></span><br><span class=\"line\"># 相对于博客的根目录：source/imgs/a.jpg</span><br><span class=\"line\">![图片描述](/imgs/a.jpg)</span><br><span class=\"line\"></span><br><span class=\"line\"># Hexo 配置文件 _config.yaml 将 post_asset_folder 选项设为 true,hexo new xxx 新建文章时，Hexo 便会在 source/_posts 目录下新建与文章同名的文件夹</span><br><span class=\"line\"># 相对于某篇文章的目，例如./article_1/a.jpg的目录</span><br><span class=\"line\">![图片描述](a.jpg)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式2：使用 Hexo asset_img 标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点：无法在 Markdown 编辑器中正常显示图片<br>改进：插件hexo-renderer-marked解决了这个问题<br>可以只用npm install hexo-renderer-marked命令直接安装，之后在config.yaml中更改配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-2-启动预览服务器\"><a href=\"#3-2-启动预览服务器\" class=\"headerlink\" title=\"3.2 启动预览服务器\"></a>3.2 启动预览服务器</h3><p>博客文章表写好就可以进行发布了，hexo提供了本地预览服务器，上一步预览效果的时候已经启动过服务器，以下是相关的命令解释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 清除缓存文件，在某些情况（尤其是更换主题后），如果对站点的更改无论如何也不生效可能用到</span><br><span class=\"line\"># hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"># 将md和配置等源文件生成网页静态文件，存储到public目录，简写成hexo g</span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"># 启动服务器 默认访问地址： http://localhost:4000/</span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以将指令编写到批处理文件，省去每次输入命令:<br>在项目根目录创建start_server.bat文件，添加以下内容并保存，之后通过双击运行来启动服务器。<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping Hexo server...</span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /IM &quot;node.exe&quot; /F</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Hexo server stopped.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting Hexo server...</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo server </span><br><span class=\"line\"><span class=\"built_in\">echo</span> Hexo server started.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-3-部署到服务器\"><a href=\"#3-3-部署到服务器\" class=\"headerlink\" title=\"3.3 部署到服务器\"></a>3.3 部署到服务器</h3><p>以上只是本地预览，想要别人访问得到这个博客，还需要部署到服务器上自己的服务器上或者GitHub Pages等托管服务。<br>以下以发布到Github Pages为例：</p>\n<ol>\n<li>创建github仓库</li>\n</ol>\n<p>填写仓库名，名称为”username.github.io”，username是你的Github用户名，仓库属性为public  </p>\n<p>如果你的 GitHub 仓库命名为 username.github.io，GitHub Pages 将会默认将站点托管在 username.github.io 这个域名下，否则会托管在username.github.io&#x2F;仓库名 这个路径下</p>\n<ol start=\"2\">\n<li>Hexo 提供了一键部署功能，首先使用以下命令安装插件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装插件用于将生成的静态网站文件（通常位于 public 目录）部署到 GitHub</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>\n<li>修改网站配置文件<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span>  </span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:xxxx/xxxx.github.io.git</span> <span class=\"comment\"># 仓库地址</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span>  <span class=\"comment\"># 分支</span></span><br></pre></td></tr></table></figure></li>\n<li>运行部署命令<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一键部署</span><br><span class=\"line\">hexo deploy </span><br><span class=\"line\"></span><br><span class=\"line\"># 生成静态文件并部署</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n为了方便发布，我们将上面的启动服务器脚本修改一下，移除本地预览并在生成后同时部署，新建deploy.bat文件（如果使用git bash则将文件后缀改成.sh，运行时执行”.&#x2F;deploy.sh”），使用文本编辑器增加以下内容:<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> Starting Hexo deploy...</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g -d</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Hexo deploy success !</span><br></pre></td></tr></table></figure>\n，<br>双击运行deploy.bat，待终端输出“INFO  Deploy done: git”字样说明网页已经提到到Github，在浏览器访问 <code>https://username.github.io/</code>，部署成功，这就是你的个人博客了，Congratulations！</li>\n</ol>\n<h2 id=\"4-更换主题\"><a href=\"#4-更换主题\" class=\"headerlink\" title=\"4 更换主题\"></a>4 更换主题</h2><p>以上我们通过Hexo和Github搭建了一个简单的博客，但是这个博客页面样式还很简陋，很多功能如访问统计、评论功能也没有，下面就开始我们博客的美（折）化（腾）之旅。</p>\n<p>Hexo提供了非常多的主题供选择，可以在github 搜索”hexo theme”可以根据star看到比较受欢迎的主题。</p>\n<p>下面以butterfly为例子</p>\n<h3 id=\"4-1-下载butterfly\"><a href=\"#4-1-下载butterfly\" class=\"headerlink\" title=\"4.1 下载butterfly\"></a>4.1 下载butterfly</h3><p>通过git clone 或者直接下载zip包并复制到项目theme目录下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-应用主题\"><a href=\"#4-2-应用主题\" class=\"headerlink\" title=\"4.2 应用主题\"></a>4.2 应用主题</h3><ul>\n<li>修改 Hexo 根目录下的 _config.yml，把主題改为 butterfly<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">butterfly</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-3-安装渲染器插件\"><a href=\"#4-3-安装渲染器插件\" class=\"headerlink\" title=\"4.3 安装渲染器插件\"></a>4.3 安装渲染器插件</h3><p> 如果你沒有 pug 以及 stylus 的渲染器，可能报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装渲染器插件</span><br><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n<p>双击start_server.bat 重新启动服务器，可以看到主题效果生效了</p>\n<p><img src=\"/images/article01/70521.png\" alt=\"butterfly主题预览效果\"></p>\n<h3 id=\"4-4-butterfly-主题配置\"><a href=\"#4-4-butterfly-主题配置\" class=\"headerlink\" title=\"4.4 butterfly 主题配置\"></a>4.4 butterfly 主题配置</h3><p>butterfly的配置文件在butterfly文件夹下的_config.yml，更多配置内容参考<a href=\"https://butterfly.js.org/\">butterfly官方教程</a><br>butterfly升级主题可能会覆盖主题下的_config.yml配置文件，官方建议将butterfly主题下的配置文件重名并复制到项目根目录，在项目根目录进行配置</p>\n<p>以下是一些比较常用的配置</p>\n<h4 id=\"4-4-1-配置导航栏\"><a href=\"#4-4-1-配置导航栏\" class=\"headerlink\" title=\"4.4.1 配置导航栏\"></a>4.4.1 配置导航栏</h4><p>butterfly 提供了默认的导航栏tab，只需要将menu字段下的tab去掉前面的#注释即可，形式是”名称：链接地址 || 图标(<a href=\"https://fontawesome.com/\">Font Awesome</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">   <span class=\"string\">首页:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">   <span class=\"string\">归档:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">   <span class=\"string\">标签:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">   <span class=\"string\">分类:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-folder-open</span></span><br><span class=\"line\">  <span class=\"comment\"># List||fas fa-list:</span></span><br><span class=\"line\">  <span class=\"comment\">#   Music: /music/ || fas fa-music</span></span><br><span class=\"line\">  <span class=\"comment\">#   Movie: /movies/ || fas fa-video</span></span><br><span class=\"line\">  <span class=\"comment\"># Link: /link/ || fas fa-link</span></span><br><span class=\"line\">   <span class=\"string\">关于:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-heart</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-2-添加子页面\"><a href=\"#4-4-2-添加子页面\" class=\"headerlink\" title=\"4.4.2 添加子页面\"></a>4.4.2 添加子页面</h4><p>刷新页面，发现导航栏已经展示出来了，但是点击其中tab，发现报错了，这是因为还没添加页面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot GET /about/</span><br></pre></td></tr></table></figure>\n<h5 id=\"关于页\"><a href=\"#关于页\" class=\"headerlink\" title=\"关于页\"></a>关于页</h5><p>在项目根目录使用cmd命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<p>使用该命令后会生成&#x2F;source&#x2F;about&#x2F;index.md文件，打开并添加layout: about属性以及更多正文信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">about</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2020-02-23 19:20:33</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">about</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"string\">这里写关于页的正文我是xxx，支持</span> <span class=\"string\">Markdown,</span> <span class=\"string\">HTML</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"分类页\"><a href=\"#分类页\" class=\"headerlink\" title=\"分类页\"></a>分类页</h5><p>其他子页面同理，分类页创建：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<p>同样在source&#x2F;categories&#x2F;index.md 这个文件添加属性type: “categories”</p>\n<h5 id=\"标签页\"><a href=\"#标签页\" class=\"headerlink\" title=\"标签页\"></a>标签页</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<p>在 source&#x2F;tags&#x2F;index.md 中添加标签属性type: “tags”</p>\n<h5 id=\"使用标签\"><a href=\"#使用标签\" class=\"headerlink\" title=\"使用标签\"></a>使用标签</h5><p>在文章的开头的Front-matter区域，添加以下字段即可新增分类或者标签：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">技术</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Hexo</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-3-头像\"><a href=\"#4-4-3-头像\" class=\"headerlink\" title=\"4.4.3 头像\"></a>4.4.3 头像</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">img:</span> <span class=\"string\">/img/avatar.png</span> <span class=\"comment\"># 头像图片</span></span><br><span class=\"line\">  <span class=\"attr\">effect:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 头像动效</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-4-顶部图\"><a href=\"#4-4-4-顶部图\" class=\"headerlink\" title=\"4.4.4 顶部图\"></a>4.4.4 顶部图</h4><ul>\n<li>如果不需要显示顶部图，可直接配置 disable_top_img: true</li>\n<li>显示优先级：文章的front-matter的top_img属性 &gt;ront-matter的 cover属性 &gt; 配置文件的 default_top_img属性</li>\n<li>主页顶部图高度：index_top_img_height:  # 例如 300px&#x2F;300em&#x2F;300rem</li>\n</ul>\n<h4 id=\"4-4-5-评论功能\"><a href=\"#4-4-5-评论功能\" class=\"headerlink\" title=\"4.4.5 评论功能\"></a>4.4.5 评论功能</h4><p>一般的主题都支持多个评论插件，如disqus、gitalk、valine、 waline、twikoo等</p>\n<h5 id=\"以Valine为例\"><a href=\"#以Valine为例\" class=\"headerlink\" title=\"以Valine为例\"></a>以Valine为例</h5><ol>\n<li><p>Valine需要LeanCloud支持，登录或注册 LeanCloud，如果是国内版需要实名，国际版不需要实名认证，然而国际版共享域名不再向中国大陆提供服务（国区IP用户无法评论），需要使用自定义域名。进入控制台后点击左下角创建应用</p>\n</li>\n<li><p>应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，复制APP ID、APP Key和serverURLs，由于国际版通用域名失效了，所以现在serverUrl也是要填的</p>\n</li>\n<li><p>在主题配置文件的comments字段下的user设置为Valine,valine填写以下内容，重新部署刷新页面即可看到评论区</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comments:</span></span><br><span class=\"line\">  <span class=\"comment\"># Up to two comments system, the first will be shown as default</span></span><br><span class=\"line\">  <span class=\"attr\">use:</span> <span class=\"string\">Valine</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">valine:</span></span><br><span class=\"line\">  <span class=\"attr\">appId:</span> <span class=\"comment\"># your appId</span></span><br><span class=\"line\">  <span class=\"attr\">appKey:</span> <span class=\"comment\"># your appKey</span></span><br><span class=\"line\">  <span class=\"attr\">serverURLs:</span>          </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LeanCloud 使用自定义域名（可选）<br>这里请配合下文的绑定域名使用，可以先跳过。如果自己申请了域名，可以为LeanCloud绑定api域名。</p>\n</li>\n</ol>\n<ul>\n<li>在应用控制台 &gt; 设置 &gt; 域名绑定 &gt; API 访问域名 绑定 API 域名，填入自定义的二级域名例如<code>api.kdsunset.top </code>，勾选ssl和强制https，点击绑定后会生成一条推荐 DNS 配置</li>\n<li>在域名管理后台新增一条CNAME记录，将刚才生成推荐 DNS 配置填入</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>HOSTNAME</th>\n<th>TYPE</th>\n<th>ADDRESS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>api</td>\n<td>CNAME</td>\n<td>username.github.io</td>\n</tr>\n</tbody></table>\n<ul>\n<li>最后将serverURLs的值修改成自定义域名。</li>\n</ul>\n<p> butterfly 支持双评论系统，我们再配置一个Gitalk：</p>\n<h5 id=\"Gitalk\"><a href=\"#Gitalk\" class=\"headerlink\" title=\"Gitalk\"></a>Gitalk</h5><ol>\n<li>创建 Github 应用：登录Github，打开Settings-&gt;Developer Settings-&gt;OAuth Apps-&gt;New OAuth Apps，填写以下信息，创建成功后会生成Client ID和Client Secret<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application name：应用名，方便起见直接填github用户名</span><br><span class=\"line\">Homepage URL：网站地址</span><br><span class=\"line\">Application description：应用描述</span><br><span class=\"line\">Authorization callback URL：网站地址</span><br></pre></td></tr></table></figure></li>\n<li>修改butterfly的主题配置<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments:</span><br><span class=\"line\">  #开启双评论</span><br><span class=\"line\">  use: Valine,Gitalk</span><br><span class=\"line\"></span><br><span class=\"line\"># https://github.com/gitalk/gitalk</span><br><span class=\"line\">gitalk:</span><br><span class=\"line\">  client_id: # 上一步创建的Github 应用的Client ID</span><br><span class=\"line\">  client_secret: # 上一步创建的Github 应用的Client Secret</span><br><span class=\"line\">  repo: # 关联的Github Pages的仓库名（本文3.3小节部署服务器）</span><br><span class=\"line\">  owner: # 你的Github 用户名</span><br><span class=\"line\">  admin: # 你的Github 用户名</span><br><span class=\"line\">  option:</span><br></pre></td></tr></table></figure></li>\n<li>重新部署，在文章下的评论区即可看到gitalk评论功能。如果提示“未找到相关Issue进行评论”，则点击下方的“使用GitHub登录”，然后刷新一下页面即可，缺点就是每篇文章发布后都需要手动初始化以下，或者使用自动初始化脚本</li>\n</ol>\n<h4 id=\"4-4-6-访问人数和阅读统计\"><a href=\"#4-4-6-访问人数和阅读统计\" class=\"headerlink\" title=\"4.4.6 访问人数和阅读统计\"></a>4.4.6 访问人数和阅读统计</h4><p>butterfly的默认调用busuanzi的进行统计，设置以下字段，刷新页面后在侧边栏的网站资讯看到本站访客数和本站总访问量。文章标题后面带有阅读量次数</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi:</span></span><br><span class=\"line\">  <span class=\"attr\">site_uv:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">site_pv:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">page_pv:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-7-字数统计\"><a href=\"#4-4-7-字数统计\" class=\"headerlink\" title=\"4.4.7 字数统计\"></a>4.4.7 字数统计</h4><p>安装插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wordcount字数统计插件</span><br><span class=\"line\">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>\n<p>配置以下字段</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">wordcount:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">post_wordcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">min2read:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4-8-分析统计\"><a href=\"#4-4-8-分析统计\" class=\"headerlink\" title=\"4.4.8 分析统计\"></a>4.4.8 分析统计</h4><ul>\n<li>以百度统计为例</li>\n<li>登录百度统计官网管理后台，使用设置-&gt;账户设置-&gt;网站列表-&gt;新增网站</li>\n<li>复制应用的统计代码中的key到配置中的baidu_analytics字段<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 填写百度统计代码的key（形如“  hm.src = &quot;https://hm.baidu.com/hm.js?28e4ea7748d7403e4bf35f897a5e67e0&quot;;）</span></span><br><span class=\"line\"><span class=\"attr\">baidu_analytics:</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"4-4-9-中文字和半形的英文、数字、符号之间插入空白\"><a href=\"#4-4-9-中文字和半形的英文、数字、符号之间插入空白\" class=\"headerlink\" title=\"4.4.9 中文字和半形的英文、数字、符号之间插入空白\"></a>4.4.9 中文字和半形的英文、数字、符号之间插入空白</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># https://github.com/vinta/pangu.js</span><br><span class=\"line\"># Insert a space between Chinese character and English character (中英文之間添加空格)</span><br><span class=\"line\">pangu:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  field: post # site/post</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4-10-图片压缩\"><a href=\"#4-4-10-图片压缩\" class=\"headerlink\" title=\"4.4.10 图片压缩\"></a>4.4.10 图片压缩</h4><p>Butterfly主题需要使用到很多图片。如果图片太大，会严重拖慢网站的加载速度，以下是常用压缩工具</p>\n<ul>\n<li><a href=\"https://tinypng.com/\">tinypng</a></li>\n<li>caesium</li>\n</ul>\n<h2 id=\"5-其他优化\"><a href=\"#5-其他优化\" class=\"headerlink\" title=\"5 其他优化\"></a>5 其他优化</h2><p>一通操作下来，相信你的博客样式已经变得称心如意了，但是优化还远不止如此，如果觉得username.github.io格调不够高可以绑定自己的域名；如果想在搜索引擎更容易搜索到自己的博客需要做SEO优化；如果图片越来越多需要优化加载速度就需要使用图床来管理图片。</p>\n<h3 id=\"5-1-绑定域名\"><a href=\"#5-1-绑定域名\" class=\"headerlink\" title=\"5.1 绑定域名\"></a>5.1 绑定域名</h3><p>域名注册商国内有阿里云、腾讯等，国外有GoDaddy、namesilo等，我选的是namesilo，国外的服务不需要备案，namesilo也支持支付宝，下面以namesilo为例  </p>\n<ol>\n<li>注册namesilo或者其他服务商，购买一个你钟意的域名。注册和购买域名不是本文重点就不展开了，网站有很多教程。</li>\n<li>配置DNS，在namesilo点击个人头像进入Domain Manager页面,点击你的刚注册的域名，找到DNS Records，点击update，</li>\n</ol>\n<ul>\n<li><p>添加以下A记录，A记录是将域名解析到ip地址，即将域名指向你的username.github.io的ip地址，注意这里<strong>不要用ping</strong> 的方式获取username.github.io的ip，因为这个ip是动态的，而是使用Github 官方文档<a href=\"https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site\">管理 GitHub Pages 站点的自定义域</a>提供的ip。</p>\n</li>\n<li><p>添加CNAME记录，将你的域名解析到另一个域名，即username.github.io域名</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>HOSTNAME</th>\n<th>TYPE</th>\n<th>ADDRESS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>A</td>\n<td>185.199.108.153</td>\n</tr>\n<tr>\n<td></td>\n<td>A</td>\n<td>185.199.109.153</td>\n</tr>\n<tr>\n<td></td>\n<td>A</td>\n<td>185.199.110.153</td>\n</tr>\n<tr>\n<td></td>\n<td>A</td>\n<td>185.199.111.153</td>\n</tr>\n<tr>\n<td>www</td>\n<td>CNAME</td>\n<td>username.github.io</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li>设置的CNAME文件<br>在source文件夹中下创名为”CNAME”的文件（删除后缀名），使用文本编辑器该文件，内容就是你的域名,例如<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxx.com</span><br></pre></td></tr></table></figure></li>\n<li>设置Github仓库<br>Github支持自定义域的HTTPS，打开Github 仓库，点击Settings-&gt;Pages-&gt;GitHub Pages，你会发现已经指向你的自定义域名了，勾选Enforce HTTPS ，使用Github Page自带的证书，稍等片刻（DNS生效需要时间），就可以使用HTTPS协议访问你的域名了。</li>\n</ol>\n<h3 id=\"5-2-CDN加速\"><a href=\"#5-2-CDN加速\" class=\"headerlink\" title=\"5.2 CDN加速\"></a>5.2 CDN加速</h3><p>由于Github在国内的访问速度是比较慢的，为了优化访问网站的速度，可以使用Github pages+国内托管平台，如gitee、coding，双线部署的方式，这两个都需要实名备案，另一种方式是使用cdn加速，目前cloudfare有免费的服务，对国内用户来说访问速度应该好于直接访问Github （吧）。</p>\n<p>1 登录（注册）<a href=\"%22https://cloudflare.com/%22\">cloudflare</a>，<br>2. 添加站点。进入控制台，点击”添加站点”填写你的域名（不需要www），下一步选择个人免费版，等待系统扫描DNS记录，然后会分配 Cloudflare 名称服务器，根据提示将原来dns服务器替换成Cloudflare 名称服务器<br>3. 更改DNS服务器<br>登录注册博客的域名的服务商管理后台，本例是namesilo，打开namesilo管理后台，点击NameServer Manager，备份一下原来的dns服务器，以免cloudfare免费版不可用了时方便还原回去。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NS1.DNSOWL.COM</span><br><span class=\"line\">NS2.DNSOWL.COM</span><br><span class=\"line\">NS3.DNSOWL.COM</span><br></pre></td></tr></table></figure>\n<p>然后全部删除，替换成Cloudflare提供的 名称服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kristina.ns.cloudflare.com</span><br><span class=\"line\">mario.ns.cloudflare.com</span><br></pre></td></tr></table></figure>\n<p>4.等待激活<br>修改DNS的解析后，需要一个生效时间，回到Cloudflare平台查看更新状态，激活后会发送电子邮件到注册Cloudflare的邮箱。<br>如果激活以后访问博客首页出现“重定向次数过多的”错误，则需要将cloudflare管理后台的SSL&#x2F;TLS设置成“完全”模式。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是使用hexo + GitHub Pages 的搭建博客网站的教程，<br>seo优化的内容和图床的配置篇幅比较多，将在新文章中展开。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>[1]. Hexo : <a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a><br>[2]. Butterfly : <a href=\"https://butterfly.js.org/\">https://butterfly.js.org/</a><br>[3]. Valine : <a href=\"https://valine.js.org/quickstart.html\">https://valine.js.org/quickstart.html</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"Hexo-GitHub-Pages-搭建个人博客网站\"><a href=\"#Hexo-GitHub-Pages-搭建个人博客网站\" class=\"headerlink\" title=\"Hexo + GitHub Pages 搭建个人博客网站\"></a>Hexo + GitHub Pages 搭建个人博客网站</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;Hexo [&#x2F;hækso&#x2F;]是一个基于 Node.js 构建的静态博客框架。它能够根据 Markdown 文件生成静态的 HTML 网页，方便快速搭建静态网站。GitHub Pages 是 GitHub 提供的一项上免费托管和发布静态网站的服务，有了它可以省去自己购买和维护服务器的成本。<br>&emsp;&emsp;如果你想搭建一个个人网站或者博客，GitHub Pages + Hexo是一个不错且主流的方案。你只需要掌握一点markdown语法和git使用配合教程就可以快速上手，同时这也是本站的搭建过程~</p>\n<h4 id=\"本文环境\"><a href=\"#本文环境\" class=\"headerlink\" title=\"本文环境\"></a>本文环境</h4><ul>\n<li>Win 10</li>\n<li>NodeJS v21.4.0</li>\n<li>git</li>\n</ul>\n<h2 id=\"1-安装软件\"><a href=\"#1-安装软件\" class=\"headerlink\" title=\"1 安装软件\"></a>1 安装软件</h2><h3 id=\"1-1-安装git\"><a href=\"#1-1-安装git\" class=\"headerlink\" title=\"1.1 安装git\"></a>1.1 安装git</h3><p>如果还没有安装git，在<a href=\"https://git-scm.com/\">官网</a>下载并安装git，安装过程全部选软件推荐的选项就好</p>\n<h3 id=\"1-2-安装NodeJS\"><a href=\"#1-2-安装NodeJS\" class=\"headerlink\" title=\"1.2 安装NodeJS\"></a>1.2 安装NodeJS</h3><ul>\n<li>在<a href=\"https://nodejs.org/zh-cn/download/\">NodeJS官网</a>下载安装包并安装</li>\n<li>配置环境变量，如果选择的是msi格式的安装包会自动添加环境变量</li>\n</ul>\n<h3 id=\"1-3-安装-Hexo\"><a href=\"#1-3-安装-Hexo\" class=\"headerlink\" title=\"1.3 安装 Hexo\"></a>1.3 安装 Hexo</h3><p>新建一个文件夹作为你网站的根目录，打开命令提示符（或者git bash）并cd到当前目录，使用以下命令安装Hexo<br>ps：在地址栏输入”cmd”即可打开一个定位到当前目录的命令提示符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 npm 安装 Hexo</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看版本</span><br><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-3-创建一个hexo项目并初始化\"><a href=\"#1-3-创建一个hexo项目并初始化\" class=\"headerlink\" title=\"1.3 创建一个hexo项目并初始化\"></a>1.3 创建一个hexo项目并初始化</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 初始化一个名为&quot;hexo-blog&quot;的 Hexo 项目</span><br><span class=\"line\">hexo init hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\">cd hexo-blog</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装 Hexo 项目所需的依赖包</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Hexo 初始化完成后，会生成一个包含基本文件和目录的项目结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo-blog/         # 项目根目录</span><br><span class=\"line\">|-- _config.yml    # 主配置文件</span><br><span class=\"line\">|-- node_modules/  # Node.js 模块目录，通过 npm install 安装</span><br><span class=\"line\">|-- public/        # 自动生成的静态文件，部署时上传到服务器</span><br><span class=\"line\">|-- scaffolds/     # 模版文件</span><br><span class=\"line\">|-- source/        # 存放源文件的目录，包括文章、图片等</span><br><span class=\"line\">|   |-- _drafts/   # 草稿目录，未发布的文章</span><br><span class=\"line\">|   |-- _posts/    # 存放正式发布的文章</span><br><span class=\"line\">|-- themes/        # 存放主题的目录</span><br><span class=\"line\">|-- .gitignore     # Git 版本控制的忽略文件列表</span><br><span class=\"line\">|-- package.json   # 项目的 Node.js 包配置文件</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-Hexo配置\"><a href=\"#2-Hexo配置\" class=\"headerlink\" title=\"2 Hexo配置\"></a>2 Hexo配置</h2><p>hexo-blog&#x2F;_config.yml是heox的主配置文件，用来定义博客的各种设置和选项，包括站点设置、目录设置、部署设置等等，下面是一些重要的配置选项：<br>ps：yaml是一个方便人类阅读的数据序列化格式，通常用来做配置文件，主要用缩进来表示层次结构，另外注意”key: value”的value前面有一个空格</p>\n<h3 id=\"2-1-网站Site信息\"><a href=\"#2-1-网站Site信息\" class=\"headerlink\" title=\"2.1 网站Site信息\"></a>2.1 网站Site信息</h3><ul>\n<li>打开_config.yml主配置文件，找到site字段，修改网站基本信息<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Site</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"comment\"># 网站标题</span></span><br><span class=\"line\"><span class=\"attr\">subtitle:</span> </span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"comment\"># 网站副标题</span></span><br><span class=\"line\"><span class=\"attr\">keywords:</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"comment\"># 网站作者</span></span><br><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">zh-CN</span>  <span class=\"comment\"># 指定语言，会影响主题显示的语言，按需修改</span></span><br><span class=\"line\"><span class=\"attr\">timezone:</span> <span class=\"string\">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"2-2-开启文章资源文件夹（可选-推荐）\"><a href=\"#2-2-开启文章资源文件夹（可选-推荐）\" class=\"headerlink\" title=\"2.2 开启文章资源文件夹（可选&#x2F;推荐）\"></a>2.2 开启文章资源文件夹（可选&#x2F;推荐）</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动创建同名文件夹</span></span><br><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-3-配置永久链接（可选-推荐）\"><a href=\"#2-3-配置永久链接（可选-推荐）\" class=\"headerlink\" title=\"2.3 配置永久链接（可选&#x2F;推荐）\"></a>2.3 配置永久链接（可选&#x2F;推荐）</h3><p>Hexo 默认的链接格式是permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;，配置永久链接有助于优化网站的 SEO：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装插件</span><br><span class=\"line\">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>\n<p>修改主配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink:</span> <span class=\"string\">:abbrlink/</span> <span class=\"comment\">#文章的永久链接 </span></span><br><span class=\"line\"><span class=\"attr\">abbrlink:</span></span><br><span class=\"line\">  <span class=\"attr\">alg:</span> <span class=\"string\">crc32</span>  <span class=\"comment\">#算法: crc16(default) and crc32</span></span><br><span class=\"line\">  <span class=\"attr\">rep:</span> <span class=\"string\">hex</span>    <span class=\"comment\">#进制: dec(default) and hex</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更多配置字段参考<a href=\"https://hexo.io/zh-cn/docs/configuration\">Hexo配置</a></li>\n</ul>\n<h3 id=\"2-4-预览效果\"><a href=\"#2-4-预览效果\" class=\"headerlink\" title=\"2.4 预览效果\"></a>2.4 预览效果</h3><p>打开命令提示符，输入以下命令启动hexo本地服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure>\n<p>待终端输出类似以下字样说明启动成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>\n<p>在浏览器访问 <a href=\"http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello\">http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello</a> World”的文章。</p>\n<p><img src=\"/images/article01/70321.png\" alt=\"默认主题的预览效果\"></p>\n<h3 id=\"3-Hexo-使用\"><a href=\"#3-Hexo-使用\" class=\"headerlink\" title=\"3 Hexo 使用\"></a>3 Hexo 使用</h3><h3 id=\"3-1-写作\"><a href=\"#3-1-写作\" class=\"headerlink\" title=\"3.1 写作\"></a>3.1 写作</h3><h4 id=\"3-1-1-编辑文章\"><a href=\"#3-1-1-编辑文章\" class=\"headerlink\" title=\"3.1.1 编辑文章\"></a>3.1.1 编辑文章</h4><p>source&#x2F;_posts 目录是用于存放博客文章的地方，每篇博客文章对应一个 Markdown 文件。可以通过在创建和编辑文章也可以使用命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>打开使用命令创建好的文章，在文件最上方有一块以 — 分隔的区域，称为<a href=\"https://hexo.io/zh-cn/docs/front-matter\">Front-matter </a>，作用是配置文章标题、日期、分类、标签等属性。</li>\n</ul>\n<h4 id=\"3-1-2-草稿箱\"><a href=\"#3-1-2-草稿箱\" class=\"headerlink\" title=\"3.1.2 草稿箱\"></a>3.1.2 草稿箱</h4><p>在编辑过程中如果需要将文件作为草稿而不是直接发布，可以使用drafts。source&#x2F;_drafts 文件夹用于存放草稿，等到完成并决定发布时再将其移动到 source&#x2F;_posts 文件夹或者使用命令进行发布</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建一个新的草稿</span><br><span class=\"line\">hexo new draft &lt;title&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 将草稿发布为正式文章</span><br><span class=\"line\">hexo publish draft &lt;title&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-3-文章中插入图片\"><a href=\"#3-1-3-文章中插入图片\" class=\"headerlink\" title=\"3.1.3 文章中插入图片\"></a>3.1.3 文章中插入图片</h4><ul>\n<li><p>方式1：使用markdown标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 外链</span><br><span class=\"line\">![图片描述](url)</span><br><span class=\"line\"></span><br><span class=\"line\"># 相对于博客的根目录：source/imgs/a.jpg</span><br><span class=\"line\">![图片描述](/imgs/a.jpg)</span><br><span class=\"line\"></span><br><span class=\"line\"># Hexo 配置文件 _config.yaml 将 post_asset_folder 选项设为 true,hexo new xxx 新建文章时，Hexo 便会在 source/_posts 目录下新建与文章同名的文件夹</span><br><span class=\"line\"># 相对于某篇文章的目，例如./article_1/a.jpg的目录</span><br><span class=\"line\">![图片描述](a.jpg)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方式2：使用 Hexo asset_img 标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure>\n<p>缺点：无法在 Markdown 编辑器中正常显示图片<br>改进：插件hexo-renderer-marked解决了这个问题<br>可以只用npm install hexo-renderer-marked命令直接安装，之后在config.yaml中更改配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">post_asset_folder:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">marked:</span></span><br><span class=\"line\">  <span class=\"attr\">prependRoot:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">postAsset:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-2-启动预览服务器\"><a href=\"#3-2-启动预览服务器\" class=\"headerlink\" title=\"3.2 启动预览服务器\"></a>3.2 启动预览服务器</h3><p>博客文章表写好就可以进行发布了，hexo提供了本地预览服务器，上一步预览效果的时候已经启动过服务器，以下是相关的命令解释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 清除缓存文件，在某些情况（尤其是更换主题后），如果对站点的更改无论如何也不生效可能用到</span><br><span class=\"line\"># hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\"># 将md和配置等源文件生成网页静态文件，存储到public目录，简写成hexo g</span><br><span class=\"line\">hexo generate </span><br><span class=\"line\"></span><br><span class=\"line\"># 启动服务器 默认访问地址： http://localhost:4000/</span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以将指令编写到批处理文件，省去每次输入命令:<br>在项目根目录创建start_server.bat文件，添加以下内容并保存，之后通过双击运行来启动服务器。<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Stopping Hexo server...</span><br><span class=\"line\"><span class=\"built_in\">taskkill</span> /IM &quot;node.exe&quot; /F</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Hexo server stopped.</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> Starting Hexo server...</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g &amp;&amp; hexo server </span><br><span class=\"line\"><span class=\"built_in\">echo</span> Hexo server started.</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-3-部署到服务器\"><a href=\"#3-3-部署到服务器\" class=\"headerlink\" title=\"3.3 部署到服务器\"></a>3.3 部署到服务器</h3><p>以上只是本地预览，想要别人访问得到这个博客，还需要部署到服务器上自己的服务器上或者GitHub Pages等托管服务。<br>以下以发布到Github Pages为例：</p>\n<ol>\n<li>创建github仓库</li>\n</ol>\n<p>填写仓库名，名称为”username.github.io”，username是你的Github用户名，仓库属性为public  </p>\n<p>如果你的 GitHub 仓库命名为 username.github.io，GitHub Pages 将会默认将站点托管在 username.github.io 这个域名下，否则会托管在username.github.io&#x2F;仓库名 这个路径下</p>\n<ol start=\"2\">\n<li>Hexo 提供了一键部署功能，首先使用以下命令安装插件<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装插件用于将生成的静态网站文件（通常位于 public 目录）部署到 GitHub</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li>\n<li>修改网站配置文件<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span>  </span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">git@github.com:xxxx/xxxx.github.io.git</span> <span class=\"comment\"># 仓库地址</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span>  <span class=\"comment\"># 分支</span></span><br></pre></td></tr></table></figure></li>\n<li>运行部署命令<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一键部署</span><br><span class=\"line\">hexo deploy </span><br><span class=\"line\"></span><br><span class=\"line\"># 生成静态文件并部署</span><br><span class=\"line\">hexo g -d</span><br></pre></td></tr></table></figure>\n为了方便发布，我们将上面的启动服务器脚本修改一下，移除本地预览并在生成后同时部署，新建deploy.bat文件（如果使用git bash则将文件后缀改成.sh，运行时执行”.&#x2F;deploy.sh”），使用文本编辑器增加以下内容:<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> Starting Hexo deploy...</span><br><span class=\"line\">hexo clean &amp;&amp; hexo g -d</span><br><span class=\"line\"><span class=\"built_in\">echo</span> Hexo deploy success !</span><br></pre></td></tr></table></figure>\n，<br>双击运行deploy.bat，待终端输出“INFO  Deploy done: git”字样说明网页已经提到到Github，在浏览器访问 <code>https://username.github.io/</code>，部署成功，这就是你的个人博客了，Congratulations！</li>\n</ol>\n<h2 id=\"4-更换主题\"><a href=\"#4-更换主题\" class=\"headerlink\" title=\"4 更换主题\"></a>4 更换主题</h2><p>以上我们通过Hexo和Github搭建了一个简单的博客，但是这个博客页面样式还很简陋，很多功能如访问统计、评论功能也没有，下面就开始我们博客的美（折）化（腾）之旅。</p>\n<p>Hexo提供了非常多的主题供选择，可以在github 搜索”hexo theme”可以根据star看到比较受欢迎的主题。</p>\n<p>下面以butterfly为例子</p>\n<h3 id=\"4-1-下载butterfly\"><a href=\"#4-1-下载butterfly\" class=\"headerlink\" title=\"4.1 下载butterfly\"></a>4.1 下载butterfly</h3><p>通过git clone 或者直接下载zip包并复制到项目theme目录下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-应用主题\"><a href=\"#4-2-应用主题\" class=\"headerlink\" title=\"4.2 应用主题\"></a>4.2 应用主题</h3><ul>\n<li>修改 Hexo 根目录下的 _config.yml，把主題改为 butterfly<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">theme:</span> <span class=\"string\">butterfly</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-3-安装渲染器插件\"><a href=\"#4-3-安装渲染器插件\" class=\"headerlink\" title=\"4.3 安装渲染器插件\"></a>4.3 安装渲染器插件</h3><p> 如果你沒有 pug 以及 stylus 的渲染器，可能报错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装渲染器插件</span><br><span class=\"line\">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>\n<p>双击start_server.bat 重新启动服务器，可以看到主题效果生效了</p>\n<p><img src=\"/images/article01/70521.png\" alt=\"butterfly主题预览效果\"></p>\n<h3 id=\"4-4-butterfly-主题配置\"><a href=\"#4-4-butterfly-主题配置\" class=\"headerlink\" title=\"4.4 butterfly 主题配置\"></a>4.4 butterfly 主题配置</h3><p>butterfly的配置文件在butterfly文件夹下的_config.yml，更多配置内容参考<a href=\"https://butterfly.js.org/\">butterfly官方教程</a><br>butterfly升级主题可能会覆盖主题下的_config.yml配置文件，官方建议将butterfly主题下的配置文件重名并复制到项目根目录，在项目根目录进行配置</p>\n<p>以下是一些比较常用的配置</p>\n<h4 id=\"4-4-1-配置导航栏\"><a href=\"#4-4-1-配置导航栏\" class=\"headerlink\" title=\"4.4.1 配置导航栏\"></a>4.4.1 配置导航栏</h4><p>butterfly 提供了默认的导航栏tab，只需要将menu字段下的tab去掉前面的#注释即可，形式是”名称：链接地址 || 图标(<a href=\"https://fontawesome.com/\">Font Awesome</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">   <span class=\"string\">首页:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">   <span class=\"string\">归档:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">   <span class=\"string\">标签:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">   <span class=\"string\">分类:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-folder-open</span></span><br><span class=\"line\">  <span class=\"comment\"># List||fas fa-list:</span></span><br><span class=\"line\">  <span class=\"comment\">#   Music: /music/ || fas fa-music</span></span><br><span class=\"line\">  <span class=\"comment\">#   Movie: /movies/ || fas fa-video</span></span><br><span class=\"line\">  <span class=\"comment\"># Link: /link/ || fas fa-link</span></span><br><span class=\"line\">   <span class=\"string\">关于:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fas</span> <span class=\"string\">fa-heart</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-2-添加子页面\"><a href=\"#4-4-2-添加子页面\" class=\"headerlink\" title=\"4.4.2 添加子页面\"></a>4.4.2 添加子页面</h4><p>刷新页面，发现导航栏已经展示出来了，但是点击其中tab，发现报错了，这是因为还没添加页面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot GET /about/</span><br></pre></td></tr></table></figure>\n<h5 id=\"关于页\"><a href=\"#关于页\" class=\"headerlink\" title=\"关于页\"></a>关于页</h5><p>在项目根目录使用cmd命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<p>使用该命令后会生成&#x2F;source&#x2F;about&#x2F;index.md文件，打开并添加layout: about属性以及更多正文信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">about</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2020-02-23 19:20:33</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">about</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br><span class=\"line\"><span class=\"string\">这里写关于页的正文我是xxx，支持</span> <span class=\"string\">Markdown,</span> <span class=\"string\">HTML</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"分类页\"><a href=\"#分类页\" class=\"headerlink\" title=\"分类页\"></a>分类页</h5><p>其他子页面同理，分类页创建：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure>\n<p>同样在source&#x2F;categories&#x2F;index.md 这个文件添加属性type: “categories”</p>\n<h5 id=\"标签页\"><a href=\"#标签页\" class=\"headerlink\" title=\"标签页\"></a>标签页</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n<p>在 source&#x2F;tags&#x2F;index.md 中添加标签属性type: “tags”</p>\n<h5 id=\"使用标签\"><a href=\"#使用标签\" class=\"headerlink\" title=\"使用标签\"></a>使用标签</h5><p>在文章的开头的Front-matter区域，添加以下字段即可新增分类或者标签：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">技术</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Hexo</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-3-头像\"><a href=\"#4-4-3-头像\" class=\"headerlink\" title=\"4.4.3 头像\"></a>4.4.3 头像</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">img:</span> <span class=\"string\">/img/avatar.png</span> <span class=\"comment\"># 头像图片</span></span><br><span class=\"line\">  <span class=\"attr\">effect:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 头像动效</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-4-顶部图\"><a href=\"#4-4-4-顶部图\" class=\"headerlink\" title=\"4.4.4 顶部图\"></a>4.4.4 顶部图</h4><ul>\n<li>如果不需要显示顶部图，可直接配置 disable_top_img: true</li>\n<li>显示优先级：文章的front-matter的top_img属性 &gt;ront-matter的 cover属性 &gt; 配置文件的 default_top_img属性</li>\n<li>主页顶部图高度：index_top_img_height:  # 例如 300px&#x2F;300em&#x2F;300rem</li>\n</ul>\n<h4 id=\"4-4-5-评论功能\"><a href=\"#4-4-5-评论功能\" class=\"headerlink\" title=\"4.4.5 评论功能\"></a>4.4.5 评论功能</h4><p>一般的主题都支持多个评论插件，如disqus、gitalk、valine、 waline、twikoo等</p>\n<h5 id=\"以Valine为例\"><a href=\"#以Valine为例\" class=\"headerlink\" title=\"以Valine为例\"></a>以Valine为例</h5><ol>\n<li><p>Valine需要LeanCloud支持，登录或注册 LeanCloud，如果是国内版需要实名，国际版不需要实名认证，然而国际版共享域名不再向中国大陆提供服务（国区IP用户无法评论），需要使用自定义域名。进入控制台后点击左下角创建应用</p>\n</li>\n<li><p>应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，复制APP ID、APP Key和serverURLs，由于国际版通用域名失效了，所以现在serverUrl也是要填的</p>\n</li>\n<li><p>在主题配置文件的comments字段下的user设置为Valine,valine填写以下内容，重新部署刷新页面即可看到评论区</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">comments:</span></span><br><span class=\"line\">  <span class=\"comment\"># Up to two comments system, the first will be shown as default</span></span><br><span class=\"line\">  <span class=\"attr\">use:</span> <span class=\"string\">Valine</span></span><br><span class=\"line\">  <span class=\"string\">...</span></span><br><span class=\"line\">  <span class=\"attr\">valine:</span></span><br><span class=\"line\">  <span class=\"attr\">appId:</span> <span class=\"comment\"># your appId</span></span><br><span class=\"line\">  <span class=\"attr\">appKey:</span> <span class=\"comment\"># your appKey</span></span><br><span class=\"line\">  <span class=\"attr\">serverURLs:</span>          </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>LeanCloud 使用自定义域名（可选）<br>这里请配合下文的绑定域名使用，可以先跳过。如果自己申请了域名，可以为LeanCloud绑定api域名。</p>\n</li>\n</ol>\n<ul>\n<li>在应用控制台 &gt; 设置 &gt; 域名绑定 &gt; API 访问域名 绑定 API 域名，填入自定义的二级域名例如<code>api.kdsunset.top </code>，勾选ssl和强制https，点击绑定后会生成一条推荐 DNS 配置</li>\n<li>在域名管理后台新增一条CNAME记录，将刚才生成推荐 DNS 配置填入</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>HOSTNAME</th>\n<th>TYPE</th>\n<th>ADDRESS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>api</td>\n<td>CNAME</td>\n<td>username.github.io</td>\n</tr>\n</tbody></table>\n<ul>\n<li>最后将serverURLs的值修改成自定义域名。</li>\n</ul>\n<p> butterfly 支持双评论系统，我们再配置一个Gitalk：</p>\n<h5 id=\"Gitalk\"><a href=\"#Gitalk\" class=\"headerlink\" title=\"Gitalk\"></a>Gitalk</h5><ol>\n<li>创建 Github 应用：登录Github，打开Settings-&gt;Developer Settings-&gt;OAuth Apps-&gt;New OAuth Apps，填写以下信息，创建成功后会生成Client ID和Client Secret<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Application name：应用名，方便起见直接填github用户名</span><br><span class=\"line\">Homepage URL：网站地址</span><br><span class=\"line\">Application description：应用描述</span><br><span class=\"line\">Authorization callback URL：网站地址</span><br></pre></td></tr></table></figure></li>\n<li>修改butterfly的主题配置<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">comments:</span><br><span class=\"line\">  #开启双评论</span><br><span class=\"line\">  use: Valine,Gitalk</span><br><span class=\"line\"></span><br><span class=\"line\"># https://github.com/gitalk/gitalk</span><br><span class=\"line\">gitalk:</span><br><span class=\"line\">  client_id: # 上一步创建的Github 应用的Client ID</span><br><span class=\"line\">  client_secret: # 上一步创建的Github 应用的Client Secret</span><br><span class=\"line\">  repo: # 关联的Github Pages的仓库名（本文3.3小节部署服务器）</span><br><span class=\"line\">  owner: # 你的Github 用户名</span><br><span class=\"line\">  admin: # 你的Github 用户名</span><br><span class=\"line\">  option:</span><br></pre></td></tr></table></figure></li>\n<li>重新部署，在文章下的评论区即可看到gitalk评论功能。如果提示“未找到相关Issue进行评论”，则点击下方的“使用GitHub登录”，然后刷新一下页面即可，缺点就是每篇文章发布后都需要手动初始化以下，或者使用自动初始化脚本</li>\n</ol>\n<h4 id=\"4-4-6-访问人数和阅读统计\"><a href=\"#4-4-6-访问人数和阅读统计\" class=\"headerlink\" title=\"4.4.6 访问人数和阅读统计\"></a>4.4.6 访问人数和阅读统计</h4><p>butterfly的默认调用busuanzi的进行统计，设置以下字段，刷新页面后在侧边栏的网站资讯看到本站访客数和本站总访问量。文章标题后面带有阅读量次数</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">busuanzi:</span></span><br><span class=\"line\">  <span class=\"attr\">site_uv:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">site_pv:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">page_pv:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-7-字数统计\"><a href=\"#4-4-7-字数统计\" class=\"headerlink\" title=\"4.4.7 字数统计\"></a>4.4.7 字数统计</h4><p>安装插件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># wordcount字数统计插件</span><br><span class=\"line\">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>\n<p>配置以下字段</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">wordcount:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">post_wordcount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">min2read:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">total_wordcount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4-8-分析统计\"><a href=\"#4-4-8-分析统计\" class=\"headerlink\" title=\"4.4.8 分析统计\"></a>4.4.8 分析统计</h4><ul>\n<li>以百度统计为例</li>\n<li>登录百度统计官网管理后台，使用设置-&gt;账户设置-&gt;网站列表-&gt;新增网站</li>\n<li>复制应用的统计代码中的key到配置中的baidu_analytics字段<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 填写百度统计代码的key（形如“  hm.src = &quot;https://hm.baidu.com/hm.js?28e4ea7748d7403e4bf35f897a5e67e0&quot;;）</span></span><br><span class=\"line\"><span class=\"attr\">baidu_analytics:</span> </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"4-4-9-中文字和半形的英文、数字、符号之间插入空白\"><a href=\"#4-4-9-中文字和半形的英文、数字、符号之间插入空白\" class=\"headerlink\" title=\"4.4.9 中文字和半形的英文、数字、符号之间插入空白\"></a>4.4.9 中文字和半形的英文、数字、符号之间插入空白</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># https://github.com/vinta/pangu.js</span><br><span class=\"line\"># Insert a space between Chinese character and English character (中英文之間添加空格)</span><br><span class=\"line\">pangu:</span><br><span class=\"line\">  enable: false</span><br><span class=\"line\">  field: post # site/post</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-4-10-图片压缩\"><a href=\"#4-4-10-图片压缩\" class=\"headerlink\" title=\"4.4.10 图片压缩\"></a>4.4.10 图片压缩</h4><p>Butterfly主题需要使用到很多图片。如果图片太大，会严重拖慢网站的加载速度，以下是常用压缩工具</p>\n<ul>\n<li><a href=\"https://tinypng.com/\">tinypng</a></li>\n<li>caesium</li>\n</ul>\n<h2 id=\"5-其他优化\"><a href=\"#5-其他优化\" class=\"headerlink\" title=\"5 其他优化\"></a>5 其他优化</h2><p>一通操作下来，相信你的博客样式已经变得称心如意了，但是优化还远不止如此，如果觉得username.github.io格调不够高可以绑定自己的域名；如果想在搜索引擎更容易搜索到自己的博客需要做SEO优化；如果图片越来越多需要优化加载速度就需要使用图床来管理图片。</p>\n<h3 id=\"5-1-绑定域名\"><a href=\"#5-1-绑定域名\" class=\"headerlink\" title=\"5.1 绑定域名\"></a>5.1 绑定域名</h3><p>域名注册商国内有阿里云、腾讯等，国外有GoDaddy、namesilo等，我选的是namesilo，国外的服务不需要备案，namesilo也支持支付宝，下面以namesilo为例  </p>\n<ol>\n<li>注册namesilo或者其他服务商，购买一个你钟意的域名。注册和购买域名不是本文重点就不展开了，网站有很多教程。</li>\n<li>配置DNS，在namesilo点击个人头像进入Domain Manager页面,点击你的刚注册的域名，找到DNS Records，点击update，</li>\n</ol>\n<ul>\n<li><p>添加以下A记录，A记录是将域名解析到ip地址，即将域名指向你的username.github.io的ip地址，注意这里<strong>不要用ping</strong> 的方式获取username.github.io的ip，因为这个ip是动态的，而是使用Github 官方文档<a href=\"https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site\">管理 GitHub Pages 站点的自定义域</a>提供的ip。</p>\n</li>\n<li><p>添加CNAME记录，将你的域名解析到另一个域名，即username.github.io域名</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>HOSTNAME</th>\n<th>TYPE</th>\n<th>ADDRESS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>A</td>\n<td>185.199.108.153</td>\n</tr>\n<tr>\n<td></td>\n<td>A</td>\n<td>185.199.109.153</td>\n</tr>\n<tr>\n<td></td>\n<td>A</td>\n<td>185.199.110.153</td>\n</tr>\n<tr>\n<td></td>\n<td>A</td>\n<td>185.199.111.153</td>\n</tr>\n<tr>\n<td>www</td>\n<td>CNAME</td>\n<td>username.github.io</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li>设置的CNAME文件<br>在source文件夹中下创名为”CNAME”的文件（删除后缀名），使用文本编辑器该文件，内容就是你的域名,例如<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxxx.com</span><br></pre></td></tr></table></figure></li>\n<li>设置Github仓库<br>Github支持自定义域的HTTPS，打开Github 仓库，点击Settings-&gt;Pages-&gt;GitHub Pages，你会发现已经指向你的自定义域名了，勾选Enforce HTTPS ，使用Github Page自带的证书，稍等片刻（DNS生效需要时间），就可以使用HTTPS协议访问你的域名了。</li>\n</ol>\n<h3 id=\"5-2-CDN加速\"><a href=\"#5-2-CDN加速\" class=\"headerlink\" title=\"5.2 CDN加速\"></a>5.2 CDN加速</h3><p>由于Github在国内的访问速度是比较慢的，为了优化访问网站的速度，可以使用Github pages+国内托管平台，如gitee、coding，双线部署的方式，这两个都需要实名备案，另一种方式是使用cdn加速，目前cloudfare有免费的服务，对国内用户来说访问速度应该好于直接访问Github （吧）。</p>\n<p>1 登录（注册）<a href=\"%22https://cloudflare.com/%22\">cloudflare</a>，<br>2. 添加站点。进入控制台，点击”添加站点”填写你的域名（不需要www），下一步选择个人免费版，等待系统扫描DNS记录，然后会分配 Cloudflare 名称服务器，根据提示将原来dns服务器替换成Cloudflare 名称服务器<br>3. 更改DNS服务器<br>登录注册博客的域名的服务商管理后台，本例是namesilo，打开namesilo管理后台，点击NameServer Manager，备份一下原来的dns服务器，以免cloudfare免费版不可用了时方便还原回去。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NS1.DNSOWL.COM</span><br><span class=\"line\">NS2.DNSOWL.COM</span><br><span class=\"line\">NS3.DNSOWL.COM</span><br></pre></td></tr></table></figure>\n<p>然后全部删除，替换成Cloudflare提供的 名称服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kristina.ns.cloudflare.com</span><br><span class=\"line\">mario.ns.cloudflare.com</span><br></pre></td></tr></table></figure>\n<p>4.等待激活<br>修改DNS的解析后，需要一个生效时间，回到Cloudflare平台查看更新状态，激活后会发送电子邮件到注册Cloudflare的邮箱。<br>如果激活以后访问博客首页出现“重定向次数过多的”错误，则需要将cloudflare管理后台的SSL&#x2F;TLS设置成“完全”模式。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>以上就是使用hexo + GitHub Pages 的搭建博客网站的教程，<br>seo优化的内容和图床的配置篇幅比较多，将在新文章中展开。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>[1]. Hexo : <a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a><br>[2]. Butterfly : <a href=\"https://butterfly.js.org/\">https://butterfly.js.org/</a><br>[3]. Valine : <a href=\"https://valine.js.org/quickstart.html\">https://valine.js.org/quickstart.html</a></p>\n"},{"title":"markdown快速上手","mermaid":true,"abbrlink":"235d6111","_content":"\n# \n## 前言\nmarkdown是一种轻量的标记语言，标记语言就是用特殊的字符（标记）来指定文档结构和格式的语言，它的原理就是将用更简单的标记书写然后转换成HTML，markdown是如此轻量，语法标签很少，十分钟上手足矣。Markdown替代不了Word，Word也替代不了Markdown，我们要做的是在不同的场景选择称手的工具。\n## 1 基本语法\n### 1.1 标题\n**（1）语法** \n语法：# 标题文字\n\n要写文章，首先要有个标题，Markdown中用\"#\"来标识标题，# 的数量代表了标题的级别，一共有1到6级标题，#号越多字号越小。\n\n**（2）书写规范** \n一般情况下不建议使用超过四层标题。具体什么标题用多大的字号参考：\n>一级标题：文章的标题\n二级标题：文章主要部分的大标题\n三级标题：二级标题下面一级的小标题\n四级标题：三级标题下面某一方面的小标题\n\n**（3）标题序号**  \n如果需要为标题加上序号，可以参考论文中的标题序号规范：\n>第一层：一、汉字数字加顿号\n 第二层：（一）　括号中包含汉字数字\n 第三层：1．阿拉伯数字加下脚点\n 第四层：（1）括号中包含阿拉伯数字\n >\n>第五层：① 带圈的阿拉伯数字,或者“1）”\n 第六层：A. 第六层为大写英文字母，或者“（A）”\n 第七层：a. 第七层为小写英文字母，或者“（a)”\n \n此外还可用阿拉伯数字连续编码，多用于理科类论文的各层次标题。不同层次的数字之间用半角圆点（.）分隔开，末位数字后面不加点号。如“1”，“1.2”，“1.2.1”等；各层次的标题序号均左顶格排写，最后一个序号之后空一个字距（一个全角空格）接排标题，：\n\n```markdown\n# 软件手册文档结构\n## 1 简介\n### 1.1 入门篇\n#### 1.1.1 环境准备\n#### 1.1.2 安装\n## 2 进阶篇\n```\n\n### 1.2 段落\n语法：顶格书写，不需要缩进，段与段之间用空行隔开\n\n在传统的文本编辑中，有些人习惯使用空格或制表符来手动缩进段落，以使文本看起来更整齐，在 Markdown 中采用的是齐头式，段落之间是通过空行来进行分隔的，Markdown 的设计理念是简洁、易读，因此一般在文章的开头不需要额外的缩进。\n\n### 1.3 换行\n语法：在一行的末尾空两个空格或者使用`<br>`\n\n### 1.4 字体效果\n语法：使用星号（`*`）括起来，中间没有空格，不同数量的型号有不同的效果\n* 斜体：一个星号，例如`*斜体效果*`：*斜体效果*\n* 粗体：两个星号，例如`**加粗效果**`：**加粗效果**\n* 斜体并粗体：三个星号：例如`***加粗并倾斜***`：***加粗并倾斜***\n\n### 1.5 引用\n语法：在需要引用的文字前加`>`，例如：\n```\n>我家门前两棵树，一棵是枣树，另一棵也是枣树\n```\n效果是：\n>我家门前两棵树，一棵是枣树，另一棵也是枣树\n\n### 1.6 列表\n**（1）有序列表**\n\n语法：列表项前添加数字并紧跟一个英文句点\n\n\n**（2）无序列表**  \n语法：列表项前添加星号 (*) 并间隔一个空格\n\n破折号 (-)、星号 (*) 或加号 (+)都可以用来表示无序列表，效果相同，为了避免方便记忆，多种表示方式都只介绍一种，下文同。\n\n### 1.7 代码\n**（1）词语**\n语法:反引号 (\\`)括起来\n例如将 `http://localhost/`用(\\`)括起来就能作为代码，而不是超链接。\n\n**（2）代码块**\n语法：用三个反引号 (\\`\\`\\`)括起来，每个（\\`\\`\\`）单独一行\n* 语法高亮：在第一个（```）指定一种语言\n```python\ndef hello_world():\n    print(\"Hello, World!\")\n```\n\n### 1.8 分割线\n语法：三个或以上的星号(*)，单独一行\n\n### 1.9 链接\n**（1）普通链接**\n语法：`[链接描述](url,\"鼠标悬停文字（可选）\")`，\n例如\n`[google](https://www.google.com/，\"谷歌官网\")`，效果：[google](https://www.google.com/，\"谷歌官网\")\n\n**（2）网址和邮箱地址**\n语法：可以直接用尖括号括起来\n\n**（3）引用类型链接**\n引用类型链接是一种更具可读性和可维护性的方式，可以将链接的定义与文本内容分离，使文档更清晰。\n语法：`[链接描述][链接lable]`，然后在文末定义链接`[链接lable]:url`，例如：\n\n```markdown\n这是[Google的官方网站][1]。\n\n<!--文末-->\n[openai]: https://www.google.com/\n```\n效果:\n这是[Google的官方网站] [1]\n[1]: https://www.openai.com\n\n### 1.10 插入图片\n语法:`![图片alt](图片链接 \"图片title\")`，相比链接语法多了一个叹号（!）\n\n## 2 扩展语法（选修）\n### 2.1 表格\n语法：来自Markdown文档的描述\n>要添加表，请使用三个或多个连字符（---）创建每列的标题，并使用竖线（|）分隔每列。您可以选择在表的任一端添加竖线\n```\n| 列名1      | 列名2 |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\n```\n| 表头      | 描述 |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\n* 对齐\n>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心\n\n### 2.2 mermaid扩展\nMermaid是一个用文本生成UML图表的开源的JavaScript库，可以用来绘制类图、饼图、流程图、时序图等等。通常Markdown编辑器都支持持mermaid扩展，于是你就可以像写Markdown一样绘制UML图表。虽然有点丑，胜在简单，复杂的时序图还是建议用专门的图表工具画。\n\n#### 2.2.1 时序图\n\n时序图是用来描述一个系统之中对象之间交互和协作过程的图表。时序图用角色和对象表示系统中有哪些参与者，用箭头表示事件（消息/动作）传递。纵向往下表示时间流逝，横向表示传递方向，往右是发起事件，往左是响应事件。\n\n我们对照UML时序图的基本元素来看Mermaid的时序图是如何实现的：\n| 时序图元素 | 表示方式| Mermaid实现方式 |\n| --- | --- |--- |\n| 角色 |火柴人，可省略|无  |\n| 对象 |矩形|使用`participant` 简短别名 `as` 对象全名创建  |\n| 生命线 | 角色矩形下方的竖直虚线|Mermaid创建对象自带生命线 |\n| 激活框 | 生命线上的一个窄矩形，表示某一阶段|开始语句：`activate` 对象A<br>结束语句：`deactivate` 对象A\n| 发送消息 | **实线**箭头,指向接收者。如果严格区分区分，<br>则实心箭头表示同步消息（阻塞，等待响应），<br>大于号箭头表示异步，非阻塞。|`->>`，例如Ezekiel `->>` Tony：What's your name?| \n| 返回消息 | **虚线**小于号箭头，指向发送者|`-->>`，例如Tony `->>` Ezekiel: tony！|\n| 自关联消息 | 指向对象自身的箭头<br>即自我调用|对象A `->>` 对象A |\n| 组合片段-循环 | 表示该片段重复执行，类似于for语句|Iterator`->>`Array: 初始化遍历<br>`loop`  遍历数组<br>&emsp;&emsp; Array`-->>`Iterator: 返回下一个元素<br>Iterator`-->>`Iterator: 读取元素的值<br>`end`<br>|\n| 组合片段-分支 | 选项（Opt）：可能发生，相当于单个if<br>抉择（Alt）:发生其中一个，相当于多个if|  Client`->>`Server: 发起 HTTP 请求<br>`alt` 请求成功 (200 OK)<br>&emsp;&emsp;Server`-->>`Client: 返回 200 OK<br>`else` 请求失败 (404 Not Found) <br>&emsp;&emsp;Server`-->>`Client: 返回 404 Not Found<br>`end`，注`else`是可选的，省略则变成`选项`|\n\nMermaid的时序图中还有各种箭头，以区别不同的消息类型，~~不过简单使用的话我觉得没必要分这么细~~\n\n```mermaid\nsequenceDiagram\n    title:演示mermaid时序图中的各种箭头\n    participant E as Ezekiel\n    participant T as Tony\n    E->T: What's your name?\n    T-->E: WHAT?!\n    E->>T:What is your name?!!\n    T-->>E:Tony!\n    E-xT:Fuck you Tony!\n    T--xE:What's your name?\n    E-)T:Ezekiel!!\n    T--)E:Fuck you Ezekiel!\n```\n\nMarkdown中绘制时序图基本步骤：\n1. `sequenceDiagram` ：定义一个时序图。\n2. 定义时序图中的出现的参与者，`participant 角色别名 as 角色全名`。\n3. 依次绘制消息流。\n\n以画一个客户端通过浏览器访问Google首页的基本过程的时序图为例子：\n```mermaid\nsequenceDiagram\n    title:客户端通过浏览器访问Google首页的基本过程\n    participant c as 浏览器\n    participant r as 路由器\n    participant s as 谷歌服务器\n    participant dns as DNS服务器\n    c->>r: 1.请求DNS查询：<br>google的ip地址\n    r->>dns: 2.查询google的ip地址\n    dns-->>r:3.返回google的ip\n    r-->>c:告知google的ip\n    c->>r:4.发起连接：google的ip地址\n    r->>s:连接\n    s-->>r:告知连接成功\n    r-->>c:5.告知连接成功\n```\n\n```sequence\n  Title:时序图示例\n  participant 客户端\n  客户端->服务端: 我想找你拿下数据 SYN\n  服务端-->客户端: 我收到你的请求啦 ACK+SYN\n  客户端->>服务端: 我收到你的确认啦，我们开始通信吧 ACK\n  客户端->>客户端: 自我调用\n  Note right of 服务端: 我是一个服务端\n  Note left of 客户端: 我是一个客户端\n  Note over 服务端,客户端: TCP 三次握手\n  participant 观察者\n```\n\n### 2.3 流程图\n\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst->op->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op\n```\n\n\n```mermaid\ngraph TD;\n    A[开始] --> B[写代码];\n    B --> C[编译代码];\n    C --> D[运行测试];\n    D -->|测试通过| E[提交代码];\n    D -->|测试失败| F[修复错误];\n    F --> B;\n    E --> G[结束];\n```\n\n\n```mermaid\ngraph TD;\n  A[onCreate] --> |创建| B[onStart];\n  B -->|变为可见| C[onResume];\n  C -->|失去焦点| D[onPause];\n  D -->|不可见| E[onStop];\n  E -->|重新启动| R[onRestart];\n  R -->|变为可见| C;\n  D -->|不可见| E;\n  E -->|销毁| F[onDestroy];\n```\n\n\n## 参考资料\n[1] [Markdown 官方教程](https://markdown.com.cn/)\n\n\n","source":"_posts/如何使用Markdown写作.md","raw":"---\ntitle: markdown快速上手\ncategories: 技术\nmermaid: true\ntags:\n  - Markdown\n  - 时序图\nabbrlink: 235d6111\n---\n\n# \n## 前言\nmarkdown是一种轻量的标记语言，标记语言就是用特殊的字符（标记）来指定文档结构和格式的语言，它的原理就是将用更简单的标记书写然后转换成HTML，markdown是如此轻量，语法标签很少，十分钟上手足矣。Markdown替代不了Word，Word也替代不了Markdown，我们要做的是在不同的场景选择称手的工具。\n## 1 基本语法\n### 1.1 标题\n**（1）语法** \n语法：# 标题文字\n\n要写文章，首先要有个标题，Markdown中用\"#\"来标识标题，# 的数量代表了标题的级别，一共有1到6级标题，#号越多字号越小。\n\n**（2）书写规范** \n一般情况下不建议使用超过四层标题。具体什么标题用多大的字号参考：\n>一级标题：文章的标题\n二级标题：文章主要部分的大标题\n三级标题：二级标题下面一级的小标题\n四级标题：三级标题下面某一方面的小标题\n\n**（3）标题序号**  \n如果需要为标题加上序号，可以参考论文中的标题序号规范：\n>第一层：一、汉字数字加顿号\n 第二层：（一）　括号中包含汉字数字\n 第三层：1．阿拉伯数字加下脚点\n 第四层：（1）括号中包含阿拉伯数字\n >\n>第五层：① 带圈的阿拉伯数字,或者“1）”\n 第六层：A. 第六层为大写英文字母，或者“（A）”\n 第七层：a. 第七层为小写英文字母，或者“（a)”\n \n此外还可用阿拉伯数字连续编码，多用于理科类论文的各层次标题。不同层次的数字之间用半角圆点（.）分隔开，末位数字后面不加点号。如“1”，“1.2”，“1.2.1”等；各层次的标题序号均左顶格排写，最后一个序号之后空一个字距（一个全角空格）接排标题，：\n\n```markdown\n# 软件手册文档结构\n## 1 简介\n### 1.1 入门篇\n#### 1.1.1 环境准备\n#### 1.1.2 安装\n## 2 进阶篇\n```\n\n### 1.2 段落\n语法：顶格书写，不需要缩进，段与段之间用空行隔开\n\n在传统的文本编辑中，有些人习惯使用空格或制表符来手动缩进段落，以使文本看起来更整齐，在 Markdown 中采用的是齐头式，段落之间是通过空行来进行分隔的，Markdown 的设计理念是简洁、易读，因此一般在文章的开头不需要额外的缩进。\n\n### 1.3 换行\n语法：在一行的末尾空两个空格或者使用`<br>`\n\n### 1.4 字体效果\n语法：使用星号（`*`）括起来，中间没有空格，不同数量的型号有不同的效果\n* 斜体：一个星号，例如`*斜体效果*`：*斜体效果*\n* 粗体：两个星号，例如`**加粗效果**`：**加粗效果**\n* 斜体并粗体：三个星号：例如`***加粗并倾斜***`：***加粗并倾斜***\n\n### 1.5 引用\n语法：在需要引用的文字前加`>`，例如：\n```\n>我家门前两棵树，一棵是枣树，另一棵也是枣树\n```\n效果是：\n>我家门前两棵树，一棵是枣树，另一棵也是枣树\n\n### 1.6 列表\n**（1）有序列表**\n\n语法：列表项前添加数字并紧跟一个英文句点\n\n\n**（2）无序列表**  \n语法：列表项前添加星号 (*) 并间隔一个空格\n\n破折号 (-)、星号 (*) 或加号 (+)都可以用来表示无序列表，效果相同，为了避免方便记忆，多种表示方式都只介绍一种，下文同。\n\n### 1.7 代码\n**（1）词语**\n语法:反引号 (\\`)括起来\n例如将 `http://localhost/`用(\\`)括起来就能作为代码，而不是超链接。\n\n**（2）代码块**\n语法：用三个反引号 (\\`\\`\\`)括起来，每个（\\`\\`\\`）单独一行\n* 语法高亮：在第一个（```）指定一种语言\n```python\ndef hello_world():\n    print(\"Hello, World!\")\n```\n\n### 1.8 分割线\n语法：三个或以上的星号(*)，单独一行\n\n### 1.9 链接\n**（1）普通链接**\n语法：`[链接描述](url,\"鼠标悬停文字（可选）\")`，\n例如\n`[google](https://www.google.com/，\"谷歌官网\")`，效果：[google](https://www.google.com/，\"谷歌官网\")\n\n**（2）网址和邮箱地址**\n语法：可以直接用尖括号括起来\n\n**（3）引用类型链接**\n引用类型链接是一种更具可读性和可维护性的方式，可以将链接的定义与文本内容分离，使文档更清晰。\n语法：`[链接描述][链接lable]`，然后在文末定义链接`[链接lable]:url`，例如：\n\n```markdown\n这是[Google的官方网站][1]。\n\n<!--文末-->\n[openai]: https://www.google.com/\n```\n效果:\n这是[Google的官方网站] [1]\n[1]: https://www.openai.com\n\n### 1.10 插入图片\n语法:`![图片alt](图片链接 \"图片title\")`，相比链接语法多了一个叹号（!）\n\n## 2 扩展语法（选修）\n### 2.1 表格\n语法：来自Markdown文档的描述\n>要添加表，请使用三个或多个连字符（---）创建每列的标题，并使用竖线（|）分隔每列。您可以选择在表的任一端添加竖线\n```\n| 列名1      | 列名2 |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\n```\n| 表头      | 描述 |\n| ----------- | ----------- |\n| Header      | Title       |\n| Paragraph   | Text        |\n* 对齐\n>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心\n\n### 2.2 mermaid扩展\nMermaid是一个用文本生成UML图表的开源的JavaScript库，可以用来绘制类图、饼图、流程图、时序图等等。通常Markdown编辑器都支持持mermaid扩展，于是你就可以像写Markdown一样绘制UML图表。虽然有点丑，胜在简单，复杂的时序图还是建议用专门的图表工具画。\n\n#### 2.2.1 时序图\n\n时序图是用来描述一个系统之中对象之间交互和协作过程的图表。时序图用角色和对象表示系统中有哪些参与者，用箭头表示事件（消息/动作）传递。纵向往下表示时间流逝，横向表示传递方向，往右是发起事件，往左是响应事件。\n\n我们对照UML时序图的基本元素来看Mermaid的时序图是如何实现的：\n| 时序图元素 | 表示方式| Mermaid实现方式 |\n| --- | --- |--- |\n| 角色 |火柴人，可省略|无  |\n| 对象 |矩形|使用`participant` 简短别名 `as` 对象全名创建  |\n| 生命线 | 角色矩形下方的竖直虚线|Mermaid创建对象自带生命线 |\n| 激活框 | 生命线上的一个窄矩形，表示某一阶段|开始语句：`activate` 对象A<br>结束语句：`deactivate` 对象A\n| 发送消息 | **实线**箭头,指向接收者。如果严格区分区分，<br>则实心箭头表示同步消息（阻塞，等待响应），<br>大于号箭头表示异步，非阻塞。|`->>`，例如Ezekiel `->>` Tony：What's your name?| \n| 返回消息 | **虚线**小于号箭头，指向发送者|`-->>`，例如Tony `->>` Ezekiel: tony！|\n| 自关联消息 | 指向对象自身的箭头<br>即自我调用|对象A `->>` 对象A |\n| 组合片段-循环 | 表示该片段重复执行，类似于for语句|Iterator`->>`Array: 初始化遍历<br>`loop`  遍历数组<br>&emsp;&emsp; Array`-->>`Iterator: 返回下一个元素<br>Iterator`-->>`Iterator: 读取元素的值<br>`end`<br>|\n| 组合片段-分支 | 选项（Opt）：可能发生，相当于单个if<br>抉择（Alt）:发生其中一个，相当于多个if|  Client`->>`Server: 发起 HTTP 请求<br>`alt` 请求成功 (200 OK)<br>&emsp;&emsp;Server`-->>`Client: 返回 200 OK<br>`else` 请求失败 (404 Not Found) <br>&emsp;&emsp;Server`-->>`Client: 返回 404 Not Found<br>`end`，注`else`是可选的，省略则变成`选项`|\n\nMermaid的时序图中还有各种箭头，以区别不同的消息类型，~~不过简单使用的话我觉得没必要分这么细~~\n\n```mermaid\nsequenceDiagram\n    title:演示mermaid时序图中的各种箭头\n    participant E as Ezekiel\n    participant T as Tony\n    E->T: What's your name?\n    T-->E: WHAT?!\n    E->>T:What is your name?!!\n    T-->>E:Tony!\n    E-xT:Fuck you Tony!\n    T--xE:What's your name?\n    E-)T:Ezekiel!!\n    T--)E:Fuck you Ezekiel!\n```\n\nMarkdown中绘制时序图基本步骤：\n1. `sequenceDiagram` ：定义一个时序图。\n2. 定义时序图中的出现的参与者，`participant 角色别名 as 角色全名`。\n3. 依次绘制消息流。\n\n以画一个客户端通过浏览器访问Google首页的基本过程的时序图为例子：\n```mermaid\nsequenceDiagram\n    title:客户端通过浏览器访问Google首页的基本过程\n    participant c as 浏览器\n    participant r as 路由器\n    participant s as 谷歌服务器\n    participant dns as DNS服务器\n    c->>r: 1.请求DNS查询：<br>google的ip地址\n    r->>dns: 2.查询google的ip地址\n    dns-->>r:3.返回google的ip\n    r-->>c:告知google的ip\n    c->>r:4.发起连接：google的ip地址\n    r->>s:连接\n    s-->>r:告知连接成功\n    r-->>c:5.告知连接成功\n```\n\n```sequence\n  Title:时序图示例\n  participant 客户端\n  客户端->服务端: 我想找你拿下数据 SYN\n  服务端-->客户端: 我收到你的请求啦 ACK+SYN\n  客户端->>服务端: 我收到你的确认啦，我们开始通信吧 ACK\n  客户端->>客户端: 自我调用\n  Note right of 服务端: 我是一个服务端\n  Note left of 客户端: 我是一个客户端\n  Note over 服务端,客户端: TCP 三次握手\n  participant 观察者\n```\n\n### 2.3 流程图\n\n```flow\nst=>start: 开始框\nop=>operation: 处理框\ncond=>condition: 判断框(是或否?)\nsub1=>subroutine: 子流程\nio=>inputoutput: 输入输出框\ne=>end: 结束框\nst->op->cond\ncond(yes)->io->e\ncond(no)->sub1(right)->op\n```\n\n\n```mermaid\ngraph TD;\n    A[开始] --> B[写代码];\n    B --> C[编译代码];\n    C --> D[运行测试];\n    D -->|测试通过| E[提交代码];\n    D -->|测试失败| F[修复错误];\n    F --> B;\n    E --> G[结束];\n```\n\n\n```mermaid\ngraph TD;\n  A[onCreate] --> |创建| B[onStart];\n  B -->|变为可见| C[onResume];\n  C -->|失去焦点| D[onPause];\n  D -->|不可见| E[onStop];\n  E -->|重新启动| R[onRestart];\n  R -->|变为可见| C;\n  D -->|不可见| E;\n  E -->|销毁| F[onDestroy];\n```\n\n\n## 参考资料\n[1] [Markdown 官方教程](https://markdown.com.cn/)\n\n\n","slug":"如何使用Markdown写作","published":1,"date":"2023-12-29T07:46:02.365Z","updated":"2023-12-29T08:20:42.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clqqd6se70009qskah5tbg1fk","content":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>markdown是一种轻量的标记语言，标记语言就是用特殊的字符（标记）来指定文档结构和格式的语言，它的原理就是将用更简单的标记书写然后转换成HTML，markdown是如此轻量，语法标签很少，十分钟上手足矣。Markdown替代不了Word，Word也替代不了Markdown，我们要做的是在不同的场景选择称手的工具。</p>\n<h2 id=\"1-基本语法\"><a href=\"#1-基本语法\" class=\"headerlink\" title=\"1 基本语法\"></a>1 基本语法</h2><h3 id=\"1-1-标题\"><a href=\"#1-1-标题\" class=\"headerlink\" title=\"1.1 标题\"></a>1.1 标题</h3><p><strong>（1）语法</strong><br>语法：# 标题文字</p>\n<p>要写文章，首先要有个标题，Markdown中用”#”来标识标题，# 的数量代表了标题的级别，一共有1到6级标题，#号越多字号越小。</p>\n<p><strong>（2）书写规范</strong><br>一般情况下不建议使用超过四层标题。具体什么标题用多大的字号参考：</p>\n<blockquote>\n<p>一级标题：文章的标题<br>二级标题：文章主要部分的大标题<br>三级标题：二级标题下面一级的小标题<br>四级标题：三级标题下面某一方面的小标题</p>\n</blockquote>\n<p><strong>（3）标题序号</strong><br>如果需要为标题加上序号，可以参考论文中的标题序号规范：</p>\n<blockquote>\n<p>第一层：一、汉字数字加顿号<br> 第二层：（一）　括号中包含汉字数字<br> 第三层：1．阿拉伯数字加下脚点<br> 第四层：（1）括号中包含阿拉伯数字</p>\n<p>第五层：① 带圈的阿拉伯数字,或者“1）”<br> 第六层：A. 第六层为大写英文字母，或者“（A）”<br> 第七层：a. 第七层为小写英文字母，或者“（a)”</p>\n</blockquote>\n<p>此外还可用阿拉伯数字连续编码，多用于理科类论文的各层次标题。不同层次的数字之间用半角圆点（.）分隔开，末位数字后面不加点号。如“1”，“1.2”，“1.2.1”等；各层次的标题序号均左顶格排写，最后一个序号之后空一个字距（一个全角空格）接排标题，：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 软件手册文档结构</span></span><br><span class=\"line\"><span class=\"section\">## 1 简介</span></span><br><span class=\"line\"><span class=\"section\">### 1.1 入门篇</span></span><br><span class=\"line\"><span class=\"section\">#### 1.1.1 环境准备</span></span><br><span class=\"line\"><span class=\"section\">#### 1.1.2 安装</span></span><br><span class=\"line\"><span class=\"section\">## 2 进阶篇</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-段落\"><a href=\"#1-2-段落\" class=\"headerlink\" title=\"1.2 段落\"></a>1.2 段落</h3><p>语法：顶格书写，不需要缩进，段与段之间用空行隔开</p>\n<p>在传统的文本编辑中，有些人习惯使用空格或制表符来手动缩进段落，以使文本看起来更整齐，在 Markdown 中采用的是齐头式，段落之间是通过空行来进行分隔的，Markdown 的设计理念是简洁、易读，因此一般在文章的开头不需要额外的缩进。</p>\n<h3 id=\"1-3-换行\"><a href=\"#1-3-换行\" class=\"headerlink\" title=\"1.3 换行\"></a>1.3 换行</h3><p>语法：在一行的末尾空两个空格或者使用<code>&lt;br&gt;</code></p>\n<h3 id=\"1-4-字体效果\"><a href=\"#1-4-字体效果\" class=\"headerlink\" title=\"1.4 字体效果\"></a>1.4 字体效果</h3><p>语法：使用星号（<code>*</code>）括起来，中间没有空格，不同数量的型号有不同的效果</p>\n<ul>\n<li>斜体：一个星号，例如<code>*斜体效果*</code>：<em>斜体效果</em></li>\n<li>粗体：两个星号，例如<code>**加粗效果**</code>：<strong>加粗效果</strong></li>\n<li>斜体并粗体：三个星号：例如<code>***加粗并倾斜***</code>：<em><strong>加粗并倾斜</strong></em></li>\n</ul>\n<h3 id=\"1-5-引用\"><a href=\"#1-5-引用\" class=\"headerlink\" title=\"1.5 引用\"></a>1.5 引用</h3><p>语法：在需要引用的文字前加<code>&gt;</code>，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;我家门前两棵树，一棵是枣树，另一棵也是枣树</span><br></pre></td></tr></table></figure>\n<p>效果是：</p>\n<blockquote>\n<p>我家门前两棵树，一棵是枣树，另一棵也是枣树</p>\n</blockquote>\n<h3 id=\"1-6-列表\"><a href=\"#1-6-列表\" class=\"headerlink\" title=\"1.6 列表\"></a>1.6 列表</h3><p><strong>（1）有序列表</strong></p>\n<p>语法：列表项前添加数字并紧跟一个英文句点</p>\n<p><strong>（2）无序列表</strong><br>语法：列表项前添加星号 (*) 并间隔一个空格</p>\n<p>破折号 (-)、星号 (*) 或加号 (+)都可以用来表示无序列表，效果相同，为了避免方便记忆，多种表示方式都只介绍一种，下文同。</p>\n<h3 id=\"1-7-代码\"><a href=\"#1-7-代码\" class=\"headerlink\" title=\"1.7 代码\"></a>1.7 代码</h3><p><strong>（1）词语</strong><br>语法:反引号 (`)括起来<br>例如将 <code>http://localhost/</code>用(`)括起来就能作为代码，而不是超链接。</p>\n<p><strong>（2）代码块</strong><br>语法：用三个反引号 (```)括起来，每个（```）单独一行</p>\n<ul>\n<li>语法高亮：在第一个（&#96;&#96;&#96;）指定一种语言<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello_world</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"1-8-分割线\"><a href=\"#1-8-分割线\" class=\"headerlink\" title=\"1.8 分割线\"></a>1.8 分割线</h3><p>语法：三个或以上的星号(*)，单独一行</p>\n<h3 id=\"1-9-链接\"><a href=\"#1-9-链接\" class=\"headerlink\" title=\"1.9 链接\"></a>1.9 链接</h3><p><strong>（1）普通链接</strong><br>语法：<code>[链接描述](url,&quot;鼠标悬停文字（可选）&quot;)</code>，<br>例如<br><code>[google](https://www.google.com/，&quot;谷歌官网&quot;)</code>，效果：<a href=\"https://www.google.com/%EF%BC%8C%22%E8%B0%B7%E6%AD%8C%E5%AE%98%E7%BD%91%22\">google</a></p>\n<p><strong>（2）网址和邮箱地址</strong><br>语法：可以直接用尖括号括起来</p>\n<p><strong>（3）引用类型链接</strong><br>引用类型链接是一种更具可读性和可维护性的方式，可以将链接的定义与文本内容分离，使文档更清晰。<br>语法：<code>[链接描述][链接lable]</code>，然后在文末定义链接<code>[链接lable]:url</code>，例如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是[<span class=\"string\">Google的官方网站</span>][<span class=\"symbol\">1</span>]。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--文末--&gt;</span><br><span class=\"line\">[<span class=\"symbol\">openai</span>]: <span class=\"link\">https://www.google.com/</span></span><br></pre></td></tr></table></figure>\n<p>效果:<br>这是[Google的官方网站] [1]<br>[1]: <a href=\"https://www.openai.com/\">https://www.openai.com</a></p>\n<h3 id=\"1-10-插入图片\"><a href=\"#1-10-插入图片\" class=\"headerlink\" title=\"1.10 插入图片\"></a>1.10 插入图片</h3><p>语法:<code>![图片alt](图片链接 &quot;图片title&quot;)</code>，相比链接语法多了一个叹号（!）</p>\n<h2 id=\"2-扩展语法（选修）\"><a href=\"#2-扩展语法（选修）\" class=\"headerlink\" title=\"2 扩展语法（选修）\"></a>2 扩展语法（选修）</h2><h3 id=\"2-1-表格\"><a href=\"#2-1-表格\" class=\"headerlink\" title=\"2.1 表格\"></a>2.1 表格</h3><p>语法：来自Markdown文档的描述</p>\n<blockquote>\n<p>要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用竖线（|）分隔每列。您可以选择在表的任一端添加竖线</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 列名1      | 列名2 |</span><br><span class=\"line\">| ----------- | ----------- |</span><br><span class=\"line\">| Header      | Title       |</span><br><span class=\"line\">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Header</td>\n<td>Title</td>\n</tr>\n<tr>\n<td>Paragraph</td>\n<td>Text</td>\n</tr>\n</tbody></table>\n<ul>\n<li>对齐<blockquote>\n<p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-2-mermaid扩展\"><a href=\"#2-2-mermaid扩展\" class=\"headerlink\" title=\"2.2 mermaid扩展\"></a>2.2 mermaid扩展</h3><p>Mermaid是一个用文本生成UML图表的开源的JavaScript库，可以用来绘制类图、饼图、流程图、时序图等等。通常Markdown编辑器都支持持mermaid扩展，于是你就可以像写Markdown一样绘制UML图表。虽然有点丑，胜在简单，复杂的时序图还是建议用专门的图表工具画。</p>\n<h4 id=\"2-2-1-时序图\"><a href=\"#2-2-1-时序图\" class=\"headerlink\" title=\"2.2.1 时序图\"></a>2.2.1 时序图</h4><p>时序图是用来描述一个系统之中对象之间交互和协作过程的图表。时序图用角色和对象表示系统中有哪些参与者，用箭头表示事件（消息&#x2F;动作）传递。纵向往下表示时间流逝，横向表示传递方向，往右是发起事件，往左是响应事件。</p>\n<p>我们对照UML时序图的基本元素来看Mermaid的时序图是如何实现的：</p>\n<table>\n<thead>\n<tr>\n<th>时序图元素</th>\n<th>表示方式</th>\n<th>Mermaid实现方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>角色</td>\n<td>火柴人，可省略</td>\n<td>无</td>\n</tr>\n<tr>\n<td>对象</td>\n<td>矩形</td>\n<td>使用<code>participant</code> 简短别名 <code>as</code> 对象全名创建</td>\n</tr>\n<tr>\n<td>生命线</td>\n<td>角色矩形下方的竖直虚线</td>\n<td>Mermaid创建对象自带生命线</td>\n</tr>\n<tr>\n<td>激活框</td>\n<td>生命线上的一个窄矩形，表示某一阶段</td>\n<td>开始语句：<code>activate</code> 对象A<br>结束语句：<code>deactivate</code> 对象A</td>\n</tr>\n<tr>\n<td>发送消息</td>\n<td><strong>实线</strong>箭头,指向接收者。如果严格区分区分，<br>则实心箭头表示同步消息（阻塞，等待响应），<br>大于号箭头表示异步，非阻塞。</td>\n<td><code>-&gt;&gt;</code>，例如Ezekiel <code>-&gt;&gt;</code> Tony：What’s your name?</td>\n</tr>\n<tr>\n<td>返回消息</td>\n<td><strong>虚线</strong>小于号箭头，指向发送者</td>\n<td><code>--&gt;&gt;</code>，例如Tony <code>-&gt;&gt;</code> Ezekiel: tony！</td>\n</tr>\n<tr>\n<td>自关联消息</td>\n<td>指向对象自身的箭头<br>即自我调用</td>\n<td>对象A <code>-&gt;&gt;</code> 对象A</td>\n</tr>\n<tr>\n<td>组合片段-循环</td>\n<td>表示该片段重复执行，类似于for语句</td>\n<td>Iterator<code>-&gt;&gt;</code>Array: 初始化遍历<br><code>loop</code>  遍历数组<br>&emsp;&emsp; Array<code>--&gt;&gt;</code>Iterator: 返回下一个元素<br>Iterator<code>--&gt;&gt;</code>Iterator: 读取元素的值<br><code>end</code><br></td>\n</tr>\n<tr>\n<td>组合片段-分支</td>\n<td>选项（Opt）：可能发生，相当于单个if<br>抉择（Alt）:发生其中一个，相当于多个if</td>\n<td>Client<code>-&gt;&gt;</code>Server: 发起 HTTP 请求<br><code>alt</code> 请求成功 (200 OK)<br>&emsp;&emsp;Server<code>--&gt;&gt;</code>Client: 返回 200 OK<br><code>else</code> 请求失败 (404 Not Found) <br>&emsp;&emsp;Server<code>--&gt;&gt;</code>Client: 返回 404 Not Found<br><code>end</code>，注<code>else</code>是可选的，省略则变成<code>选项</code></td>\n</tr>\n</tbody></table>\n<p>Mermaid的时序图中还有各种箭头，以区别不同的消息类型，<del>不过简单使用的话我觉得没必要分这么细</del></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    title:演示mermaid时序图中的各种箭头</span><br><span class=\"line\">    participant E as Ezekiel</span><br><span class=\"line\">    participant T as Tony</span><br><span class=\"line\">    E-&gt;T: What&#x27;s your name?</span><br><span class=\"line\">    T--&gt;E: WHAT?!</span><br><span class=\"line\">    E-&gt;&gt;T:What is your name?!!</span><br><span class=\"line\">    T--&gt;&gt;E:Tony!</span><br><span class=\"line\">    E-xT:Fuck you Tony!</span><br><span class=\"line\">    T--xE:What&#x27;s your name?</span><br><span class=\"line\">    E-)T:Ezekiel!!</span><br><span class=\"line\">    T--)E:Fuck you Ezekiel!</span><br></pre></td></tr></table></figure>\n\n<p>Markdown中绘制时序图基本步骤：</p>\n<ol>\n<li><code>sequenceDiagram</code> ：定义一个时序图。</li>\n<li>定义时序图中的出现的参与者，<code>participant 角色别名 as 角色全名</code>。</li>\n<li>依次绘制消息流。</li>\n</ol>\n<p>以画一个客户端通过浏览器访问Google首页的基本过程的时序图为例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    title:客户端通过浏览器访问Google首页的基本过程</span><br><span class=\"line\">    participant c as 浏览器</span><br><span class=\"line\">    participant r as 路由器</span><br><span class=\"line\">    participant s as 谷歌服务器</span><br><span class=\"line\">    participant dns as DNS服务器</span><br><span class=\"line\">    c-&gt;&gt;r: 1.请求DNS查询：&lt;br&gt;google的ip地址</span><br><span class=\"line\">    r-&gt;&gt;dns: 2.查询google的ip地址</span><br><span class=\"line\">    dns--&gt;&gt;r:3.返回google的ip</span><br><span class=\"line\">    r--&gt;&gt;c:告知google的ip</span><br><span class=\"line\">    c-&gt;&gt;r:4.发起连接：google的ip地址</span><br><span class=\"line\">    r-&gt;&gt;s:连接</span><br><span class=\"line\">    s--&gt;&gt;r:告知连接成功</span><br><span class=\"line\">    r--&gt;&gt;c:5.告知连接成功</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Title:时序图示例</span><br><span class=\"line\">participant 客户端</span><br><span class=\"line\">客户端-&gt;服务端: 我想找你拿下数据 SYN</span><br><span class=\"line\">服务端--&gt;客户端: 我收到你的请求啦 ACK+SYN</span><br><span class=\"line\">客户端-&gt;&gt;服务端: 我收到你的确认啦，我们开始通信吧 ACK</span><br><span class=\"line\">客户端-&gt;&gt;客户端: 自我调用</span><br><span class=\"line\">Note right of 服务端: 我是一个服务端</span><br><span class=\"line\">Note left of 客户端: 我是一个客户端</span><br><span class=\"line\">Note over 服务端,客户端: TCP 三次握手</span><br><span class=\"line\">participant 观察者</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-流程图\"><a href=\"#2-3-流程图\" class=\"headerlink\" title=\"2.3 流程图\"></a>2.3 流程图</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始框</span><br><span class=\"line\">op=&gt;operation: 处理框</span><br><span class=\"line\">cond=&gt;condition: 判断框(是或否?)</span><br><span class=\"line\">sub1=&gt;subroutine: 子流程</span><br><span class=\"line\">io=&gt;inputoutput: 输入输出框</span><br><span class=\"line\">e=&gt;end: 结束框</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;io-&gt;e</span><br><span class=\"line\">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    A[开始] --&gt; B[写代码];</span><br><span class=\"line\">    B --&gt; C[编译代码];</span><br><span class=\"line\">    C --&gt; D[运行测试];</span><br><span class=\"line\">    D --&gt;|测试通过| E[提交代码];</span><br><span class=\"line\">    D --&gt;|测试失败| F[修复错误];</span><br><span class=\"line\">    F --&gt; B;</span><br><span class=\"line\">    E --&gt; G[结束];</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">  A[onCreate] --&gt; |创建| B[onStart];</span><br><span class=\"line\">  B --&gt;|变为可见| C[onResume];</span><br><span class=\"line\">  C --&gt;|失去焦点| D[onPause];</span><br><span class=\"line\">  D --&gt;|不可见| E[onStop];</span><br><span class=\"line\">  E --&gt;|重新启动| R[onRestart];</span><br><span class=\"line\">  R --&gt;|变为可见| C;</span><br><span class=\"line\">  D --&gt;|不可见| E;</span><br><span class=\"line\">  E --&gt;|销毁| F[onDestroy];</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>[1] <a href=\"https://markdown.com.cn/\">Markdown 官方教程</a></p>\n","site":{"data":{}},"cover":false,"excerpt":"","more":"<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>markdown是一种轻量的标记语言，标记语言就是用特殊的字符（标记）来指定文档结构和格式的语言，它的原理就是将用更简单的标记书写然后转换成HTML，markdown是如此轻量，语法标签很少，十分钟上手足矣。Markdown替代不了Word，Word也替代不了Markdown，我们要做的是在不同的场景选择称手的工具。</p>\n<h2 id=\"1-基本语法\"><a href=\"#1-基本语法\" class=\"headerlink\" title=\"1 基本语法\"></a>1 基本语法</h2><h3 id=\"1-1-标题\"><a href=\"#1-1-标题\" class=\"headerlink\" title=\"1.1 标题\"></a>1.1 标题</h3><p><strong>（1）语法</strong><br>语法：# 标题文字</p>\n<p>要写文章，首先要有个标题，Markdown中用”#”来标识标题，# 的数量代表了标题的级别，一共有1到6级标题，#号越多字号越小。</p>\n<p><strong>（2）书写规范</strong><br>一般情况下不建议使用超过四层标题。具体什么标题用多大的字号参考：</p>\n<blockquote>\n<p>一级标题：文章的标题<br>二级标题：文章主要部分的大标题<br>三级标题：二级标题下面一级的小标题<br>四级标题：三级标题下面某一方面的小标题</p>\n</blockquote>\n<p><strong>（3）标题序号</strong><br>如果需要为标题加上序号，可以参考论文中的标题序号规范：</p>\n<blockquote>\n<p>第一层：一、汉字数字加顿号<br> 第二层：（一）　括号中包含汉字数字<br> 第三层：1．阿拉伯数字加下脚点<br> 第四层：（1）括号中包含阿拉伯数字</p>\n<p>第五层：① 带圈的阿拉伯数字,或者“1）”<br> 第六层：A. 第六层为大写英文字母，或者“（A）”<br> 第七层：a. 第七层为小写英文字母，或者“（a)”</p>\n</blockquote>\n<p>此外还可用阿拉伯数字连续编码，多用于理科类论文的各层次标题。不同层次的数字之间用半角圆点（.）分隔开，末位数字后面不加点号。如“1”，“1.2”，“1.2.1”等；各层次的标题序号均左顶格排写，最后一个序号之后空一个字距（一个全角空格）接排标题，：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># 软件手册文档结构</span></span><br><span class=\"line\"><span class=\"section\">## 1 简介</span></span><br><span class=\"line\"><span class=\"section\">### 1.1 入门篇</span></span><br><span class=\"line\"><span class=\"section\">#### 1.1.1 环境准备</span></span><br><span class=\"line\"><span class=\"section\">#### 1.1.2 安装</span></span><br><span class=\"line\"><span class=\"section\">## 2 进阶篇</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-段落\"><a href=\"#1-2-段落\" class=\"headerlink\" title=\"1.2 段落\"></a>1.2 段落</h3><p>语法：顶格书写，不需要缩进，段与段之间用空行隔开</p>\n<p>在传统的文本编辑中，有些人习惯使用空格或制表符来手动缩进段落，以使文本看起来更整齐，在 Markdown 中采用的是齐头式，段落之间是通过空行来进行分隔的，Markdown 的设计理念是简洁、易读，因此一般在文章的开头不需要额外的缩进。</p>\n<h3 id=\"1-3-换行\"><a href=\"#1-3-换行\" class=\"headerlink\" title=\"1.3 换行\"></a>1.3 换行</h3><p>语法：在一行的末尾空两个空格或者使用<code>&lt;br&gt;</code></p>\n<h3 id=\"1-4-字体效果\"><a href=\"#1-4-字体效果\" class=\"headerlink\" title=\"1.4 字体效果\"></a>1.4 字体效果</h3><p>语法：使用星号（<code>*</code>）括起来，中间没有空格，不同数量的型号有不同的效果</p>\n<ul>\n<li>斜体：一个星号，例如<code>*斜体效果*</code>：<em>斜体效果</em></li>\n<li>粗体：两个星号，例如<code>**加粗效果**</code>：<strong>加粗效果</strong></li>\n<li>斜体并粗体：三个星号：例如<code>***加粗并倾斜***</code>：<em><strong>加粗并倾斜</strong></em></li>\n</ul>\n<h3 id=\"1-5-引用\"><a href=\"#1-5-引用\" class=\"headerlink\" title=\"1.5 引用\"></a>1.5 引用</h3><p>语法：在需要引用的文字前加<code>&gt;</code>，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;我家门前两棵树，一棵是枣树，另一棵也是枣树</span><br></pre></td></tr></table></figure>\n<p>效果是：</p>\n<blockquote>\n<p>我家门前两棵树，一棵是枣树，另一棵也是枣树</p>\n</blockquote>\n<h3 id=\"1-6-列表\"><a href=\"#1-6-列表\" class=\"headerlink\" title=\"1.6 列表\"></a>1.6 列表</h3><p><strong>（1）有序列表</strong></p>\n<p>语法：列表项前添加数字并紧跟一个英文句点</p>\n<p><strong>（2）无序列表</strong><br>语法：列表项前添加星号 (*) 并间隔一个空格</p>\n<p>破折号 (-)、星号 (*) 或加号 (+)都可以用来表示无序列表，效果相同，为了避免方便记忆，多种表示方式都只介绍一种，下文同。</p>\n<h3 id=\"1-7-代码\"><a href=\"#1-7-代码\" class=\"headerlink\" title=\"1.7 代码\"></a>1.7 代码</h3><p><strong>（1）词语</strong><br>语法:反引号 (`)括起来<br>例如将 <code>http://localhost/</code>用(`)括起来就能作为代码，而不是超链接。</p>\n<p><strong>（2）代码块</strong><br>语法：用三个反引号 (```)括起来，每个（```）单独一行</p>\n<ul>\n<li>语法高亮：在第一个（&#96;&#96;&#96;）指定一种语言<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">hello_world</span>():</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"1-8-分割线\"><a href=\"#1-8-分割线\" class=\"headerlink\" title=\"1.8 分割线\"></a>1.8 分割线</h3><p>语法：三个或以上的星号(*)，单独一行</p>\n<h3 id=\"1-9-链接\"><a href=\"#1-9-链接\" class=\"headerlink\" title=\"1.9 链接\"></a>1.9 链接</h3><p><strong>（1）普通链接</strong><br>语法：<code>[链接描述](url,&quot;鼠标悬停文字（可选）&quot;)</code>，<br>例如<br><code>[google](https://www.google.com/，&quot;谷歌官网&quot;)</code>，效果：<a href=\"https://www.google.com/%EF%BC%8C%22%E8%B0%B7%E6%AD%8C%E5%AE%98%E7%BD%91%22\">google</a></p>\n<p><strong>（2）网址和邮箱地址</strong><br>语法：可以直接用尖括号括起来</p>\n<p><strong>（3）引用类型链接</strong><br>引用类型链接是一种更具可读性和可维护性的方式，可以将链接的定义与文本内容分离，使文档更清晰。<br>语法：<code>[链接描述][链接lable]</code>，然后在文末定义链接<code>[链接lable]:url</code>，例如：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是[<span class=\"string\">Google的官方网站</span>][<span class=\"symbol\">1</span>]。</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--文末--&gt;</span><br><span class=\"line\">[<span class=\"symbol\">openai</span>]: <span class=\"link\">https://www.google.com/</span></span><br></pre></td></tr></table></figure>\n<p>效果:<br>这是[Google的官方网站] [1]<br>[1]: <a href=\"https://www.openai.com/\">https://www.openai.com</a></p>\n<h3 id=\"1-10-插入图片\"><a href=\"#1-10-插入图片\" class=\"headerlink\" title=\"1.10 插入图片\"></a>1.10 插入图片</h3><p>语法:<code>![图片alt](图片链接 &quot;图片title&quot;)</code>，相比链接语法多了一个叹号（!）</p>\n<h2 id=\"2-扩展语法（选修）\"><a href=\"#2-扩展语法（选修）\" class=\"headerlink\" title=\"2 扩展语法（选修）\"></a>2 扩展语法（选修）</h2><h3 id=\"2-1-表格\"><a href=\"#2-1-表格\" class=\"headerlink\" title=\"2.1 表格\"></a>2.1 表格</h3><p>语法：来自Markdown文档的描述</p>\n<blockquote>\n<p>要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用竖线（|）分隔每列。您可以选择在表的任一端添加竖线</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| 列名1      | 列名2 |</span><br><span class=\"line\">| ----------- | ----------- |</span><br><span class=\"line\">| Header      | Title       |</span><br><span class=\"line\">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>表头</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Header</td>\n<td>Title</td>\n</tr>\n<tr>\n<td>Paragraph</td>\n<td>Text</td>\n</tr>\n</tbody></table>\n<ul>\n<li>对齐<blockquote>\n<p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"2-2-mermaid扩展\"><a href=\"#2-2-mermaid扩展\" class=\"headerlink\" title=\"2.2 mermaid扩展\"></a>2.2 mermaid扩展</h3><p>Mermaid是一个用文本生成UML图表的开源的JavaScript库，可以用来绘制类图、饼图、流程图、时序图等等。通常Markdown编辑器都支持持mermaid扩展，于是你就可以像写Markdown一样绘制UML图表。虽然有点丑，胜在简单，复杂的时序图还是建议用专门的图表工具画。</p>\n<h4 id=\"2-2-1-时序图\"><a href=\"#2-2-1-时序图\" class=\"headerlink\" title=\"2.2.1 时序图\"></a>2.2.1 时序图</h4><p>时序图是用来描述一个系统之中对象之间交互和协作过程的图表。时序图用角色和对象表示系统中有哪些参与者，用箭头表示事件（消息&#x2F;动作）传递。纵向往下表示时间流逝，横向表示传递方向，往右是发起事件，往左是响应事件。</p>\n<p>我们对照UML时序图的基本元素来看Mermaid的时序图是如何实现的：</p>\n<table>\n<thead>\n<tr>\n<th>时序图元素</th>\n<th>表示方式</th>\n<th>Mermaid实现方式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>角色</td>\n<td>火柴人，可省略</td>\n<td>无</td>\n</tr>\n<tr>\n<td>对象</td>\n<td>矩形</td>\n<td>使用<code>participant</code> 简短别名 <code>as</code> 对象全名创建</td>\n</tr>\n<tr>\n<td>生命线</td>\n<td>角色矩形下方的竖直虚线</td>\n<td>Mermaid创建对象自带生命线</td>\n</tr>\n<tr>\n<td>激活框</td>\n<td>生命线上的一个窄矩形，表示某一阶段</td>\n<td>开始语句：<code>activate</code> 对象A<br>结束语句：<code>deactivate</code> 对象A</td>\n</tr>\n<tr>\n<td>发送消息</td>\n<td><strong>实线</strong>箭头,指向接收者。如果严格区分区分，<br>则实心箭头表示同步消息（阻塞，等待响应），<br>大于号箭头表示异步，非阻塞。</td>\n<td><code>-&gt;&gt;</code>，例如Ezekiel <code>-&gt;&gt;</code> Tony：What’s your name?</td>\n</tr>\n<tr>\n<td>返回消息</td>\n<td><strong>虚线</strong>小于号箭头，指向发送者</td>\n<td><code>--&gt;&gt;</code>，例如Tony <code>-&gt;&gt;</code> Ezekiel: tony！</td>\n</tr>\n<tr>\n<td>自关联消息</td>\n<td>指向对象自身的箭头<br>即自我调用</td>\n<td>对象A <code>-&gt;&gt;</code> 对象A</td>\n</tr>\n<tr>\n<td>组合片段-循环</td>\n<td>表示该片段重复执行，类似于for语句</td>\n<td>Iterator<code>-&gt;&gt;</code>Array: 初始化遍历<br><code>loop</code>  遍历数组<br>&emsp;&emsp; Array<code>--&gt;&gt;</code>Iterator: 返回下一个元素<br>Iterator<code>--&gt;&gt;</code>Iterator: 读取元素的值<br><code>end</code><br></td>\n</tr>\n<tr>\n<td>组合片段-分支</td>\n<td>选项（Opt）：可能发生，相当于单个if<br>抉择（Alt）:发生其中一个，相当于多个if</td>\n<td>Client<code>-&gt;&gt;</code>Server: 发起 HTTP 请求<br><code>alt</code> 请求成功 (200 OK)<br>&emsp;&emsp;Server<code>--&gt;&gt;</code>Client: 返回 200 OK<br><code>else</code> 请求失败 (404 Not Found) <br>&emsp;&emsp;Server<code>--&gt;&gt;</code>Client: 返回 404 Not Found<br><code>end</code>，注<code>else</code>是可选的，省略则变成<code>选项</code></td>\n</tr>\n</tbody></table>\n<p>Mermaid的时序图中还有各种箭头，以区别不同的消息类型，<del>不过简单使用的话我觉得没必要分这么细</del></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    title:演示mermaid时序图中的各种箭头</span><br><span class=\"line\">    participant E as Ezekiel</span><br><span class=\"line\">    participant T as Tony</span><br><span class=\"line\">    E-&gt;T: What&#x27;s your name?</span><br><span class=\"line\">    T--&gt;E: WHAT?!</span><br><span class=\"line\">    E-&gt;&gt;T:What is your name?!!</span><br><span class=\"line\">    T--&gt;&gt;E:Tony!</span><br><span class=\"line\">    E-xT:Fuck you Tony!</span><br><span class=\"line\">    T--xE:What&#x27;s your name?</span><br><span class=\"line\">    E-)T:Ezekiel!!</span><br><span class=\"line\">    T--)E:Fuck you Ezekiel!</span><br></pre></td></tr></table></figure>\n\n<p>Markdown中绘制时序图基本步骤：</p>\n<ol>\n<li><code>sequenceDiagram</code> ：定义一个时序图。</li>\n<li>定义时序图中的出现的参与者，<code>participant 角色别名 as 角色全名</code>。</li>\n<li>依次绘制消息流。</li>\n</ol>\n<p>以画一个客户端通过浏览器访问Google首页的基本过程的时序图为例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequenceDiagram</span><br><span class=\"line\">    title:客户端通过浏览器访问Google首页的基本过程</span><br><span class=\"line\">    participant c as 浏览器</span><br><span class=\"line\">    participant r as 路由器</span><br><span class=\"line\">    participant s as 谷歌服务器</span><br><span class=\"line\">    participant dns as DNS服务器</span><br><span class=\"line\">    c-&gt;&gt;r: 1.请求DNS查询：&lt;br&gt;google的ip地址</span><br><span class=\"line\">    r-&gt;&gt;dns: 2.查询google的ip地址</span><br><span class=\"line\">    dns--&gt;&gt;r:3.返回google的ip</span><br><span class=\"line\">    r--&gt;&gt;c:告知google的ip</span><br><span class=\"line\">    c-&gt;&gt;r:4.发起连接：google的ip地址</span><br><span class=\"line\">    r-&gt;&gt;s:连接</span><br><span class=\"line\">    s--&gt;&gt;r:告知连接成功</span><br><span class=\"line\">    r--&gt;&gt;c:5.告知连接成功</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Title:时序图示例</span><br><span class=\"line\">participant 客户端</span><br><span class=\"line\">客户端-&gt;服务端: 我想找你拿下数据 SYN</span><br><span class=\"line\">服务端--&gt;客户端: 我收到你的请求啦 ACK+SYN</span><br><span class=\"line\">客户端-&gt;&gt;服务端: 我收到你的确认啦，我们开始通信吧 ACK</span><br><span class=\"line\">客户端-&gt;&gt;客户端: 自我调用</span><br><span class=\"line\">Note right of 服务端: 我是一个服务端</span><br><span class=\"line\">Note left of 客户端: 我是一个客户端</span><br><span class=\"line\">Note over 服务端,客户端: TCP 三次握手</span><br><span class=\"line\">participant 观察者</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-流程图\"><a href=\"#2-3-流程图\" class=\"headerlink\" title=\"2.3 流程图\"></a>2.3 流程图</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">st=&gt;start: 开始框</span><br><span class=\"line\">op=&gt;operation: 处理框</span><br><span class=\"line\">cond=&gt;condition: 判断框(是或否?)</span><br><span class=\"line\">sub1=&gt;subroutine: 子流程</span><br><span class=\"line\">io=&gt;inputoutput: 输入输出框</span><br><span class=\"line\">e=&gt;end: 结束框</span><br><span class=\"line\">st-&gt;op-&gt;cond</span><br><span class=\"line\">cond(yes)-&gt;io-&gt;e</span><br><span class=\"line\">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">    A[开始] --&gt; B[写代码];</span><br><span class=\"line\">    B --&gt; C[编译代码];</span><br><span class=\"line\">    C --&gt; D[运行测试];</span><br><span class=\"line\">    D --&gt;|测试通过| E[提交代码];</span><br><span class=\"line\">    D --&gt;|测试失败| F[修复错误];</span><br><span class=\"line\">    F --&gt; B;</span><br><span class=\"line\">    E --&gt; G[结束];</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph TD;</span><br><span class=\"line\">  A[onCreate] --&gt; |创建| B[onStart];</span><br><span class=\"line\">  B --&gt;|变为可见| C[onResume];</span><br><span class=\"line\">  C --&gt;|失去焦点| D[onPause];</span><br><span class=\"line\">  D --&gt;|不可见| E[onStop];</span><br><span class=\"line\">  E --&gt;|重新启动| R[onRestart];</span><br><span class=\"line\">  R --&gt;|变为可见| C;</span><br><span class=\"line\">  D --&gt;|不可见| E;</span><br><span class=\"line\">  E --&gt;|销毁| F[onDestroy];</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p>[1] <a href=\"https://markdown.com.cn/\">Markdown 官方教程</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clqqd6se70009qskah5tbg1fk","category_id":"clqqd6se50006qska1uxm2jpb","_id":"clqqd6se9000dqskahe5g2usz"},{"post_id":"clqqd6se10003qskahfhp1pfz","category_id":"clqqd6se50006qska1uxm2jpb","_id":"clqqd6se9000gqska3pbffzdr"},{"post_id":"clqqd6se60008qskadxwn8o86","category_id":"clqqd6se50006qska1uxm2jpb","_id":"clqqd6se9000hqska2swohw5w"}],"PostTag":[{"post_id":"clqqd6se10003qskahfhp1pfz","tag_id":"clqqd6se50007qska8n8vdbma","_id":"clqqd6se9000cqska6o2eadsr"},{"post_id":"clqqd6se60008qskadxwn8o86","tag_id":"clqqd6se50007qska8n8vdbma","_id":"clqqd6se9000fqskaeakbgqlp"},{"post_id":"clqqd6se70009qskah5tbg1fk","tag_id":"clqqd6se9000eqska99tg3myi","_id":"clqqd6sea000jqskaeb3z1e5o"},{"post_id":"clqqd6se70009qskah5tbg1fk","tag_id":"clqqd6sea000iqska2ieser9p","_id":"clqqd6sea000kqska0z7e26k5"}],"Tag":[{"name":"Hexo","_id":"clqqd6se50007qska8n8vdbma"},{"name":"Markdown","_id":"clqqd6se9000eqska99tg3myi"},{"name":"时序图","_id":"clqqd6sea000iqska2ieser9p"}]}}