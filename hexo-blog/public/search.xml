<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>markdown快速上手</title>
      <link href="/235d6111/"/>
      <url>/235d6111/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>markdown是一种轻量的标记语言，标记语言就是用特殊的字符（标记）来指定文档结构和格式的语言，它的原理就是将用更简单的标记书写然后转换成HTML，markdown是如此轻量，语法标签很少，十分钟上手足矣。Markdown替代不了Word，Word也替代不了Markdown，我们要做的是在不同的场景选择称手的工具。</p><h2 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1 基本语法"></a>1 基本语法</h2><h3 id="1-1-标题"><a href="#1-1-标题" class="headerlink" title="1.1 标题"></a>1.1 标题</h3><p><strong>（1）语法</strong><br>语法：# 标题文字</p><p>要写文章，首先要有个标题，Markdown中用”#”来标识标题，# 的数量代表了标题的级别，一共有1到6级标题，#号越多字号越小。</p><p><strong>（2）书写规范</strong><br>一般情况下不建议使用超过四层标题。具体什么标题用多大的字号参考：</p><blockquote><p>一级标题：文章的标题<br>二级标题：文章主要部分的大标题<br>三级标题：二级标题下面一级的小标题<br>四级标题：三级标题下面某一方面的小标题</p></blockquote><p><strong>（3）标题序号</strong><br>如果需要为标题加上序号，可以参考论文中的标题序号规范：</p><blockquote><p>第一层：一、汉字数字加顿号<br> 第二层：（一）　括号中包含汉字数字<br> 第三层：1．阿拉伯数字加下脚点<br> 第四层：（1）括号中包含阿拉伯数字</p><p>第五层：① 带圈的阿拉伯数字,或者“1）”<br> 第六层：A. 第六层为大写英文字母，或者“（A）”<br> 第七层：a. 第七层为小写英文字母，或者“（a)”</p></blockquote><p>此外还可用阿拉伯数字连续编码，多用于理科类论文的各层次标题。不同层次的数字之间用半角圆点（.）分隔开，末位数字后面不加点号。如“1”，“1.2”，“1.2.1”等；各层次的标题序号均左顶格排写，最后一个序号之后空一个字距（一个全角空格）接排标题，：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 软件手册文档结构</span></span><br><span class="line"><span class="section">## 1 简介</span></span><br><span class="line"><span class="section">### 1.1 入门篇</span></span><br><span class="line"><span class="section">#### 1.1.1 环境准备</span></span><br><span class="line"><span class="section">#### 1.1.2 安装</span></span><br><span class="line"><span class="section">## 2 进阶篇</span></span><br></pre></td></tr></table></figure><h3 id="1-2-段落"><a href="#1-2-段落" class="headerlink" title="1.2 段落"></a>1.2 段落</h3><p>语法：顶格书写，不需要缩进，段与段之间用空行隔开</p><p>在传统的文本编辑中，有些人习惯使用空格或制表符来手动缩进段落，以使文本看起来更整齐，在 Markdown 中采用的是齐头式，段落之间是通过空行来进行分隔的，Markdown 的设计理念是简洁、易读，因此一般在文章的开头不需要额外的缩进。</p><h3 id="1-3-换行"><a href="#1-3-换行" class="headerlink" title="1.3 换行"></a>1.3 换行</h3><p>语法：在一行的末尾空两个空格或者使用<code>&lt;br&gt;</code></p><h3 id="1-4-字体效果"><a href="#1-4-字体效果" class="headerlink" title="1.4 字体效果"></a>1.4 字体效果</h3><p>语法：使用星号（<code>*</code>）括起来，中间没有空格，不同数量的型号有不同的效果</p><ul><li>斜体：一个星号，例如<code>*斜体效果*</code>：<em>斜体效果</em></li><li>粗体：两个星号，例如<code>**加粗效果**</code>：<strong>加粗效果</strong></li><li>斜体并粗体：三个星号：例如<code>***加粗并倾斜***</code>：<em><strong>加粗并倾斜</strong></em></li></ul><h3 id="1-5-引用"><a href="#1-5-引用" class="headerlink" title="1.5 引用"></a>1.5 引用</h3><p>语法：在需要引用的文字前加<code>&gt;</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;我家门前两棵树，一棵是枣树，另一棵也是枣树</span><br></pre></td></tr></table></figure><p>效果是：</p><blockquote><p>我家门前两棵树，一棵是枣树，另一棵也是枣树</p></blockquote><h3 id="1-6-列表"><a href="#1-6-列表" class="headerlink" title="1.6 列表"></a>1.6 列表</h3><p><strong>（1）有序列表</strong></p><p>语法：列表项前添加数字并紧跟一个英文句点</p><p><strong>（2）无序列表</strong><br>语法：列表项前添加星号 (*) 并间隔一个空格</p><p>破折号 (-)、星号 (*) 或加号 (+)都可以用来表示无序列表，效果相同，为了避免方便记忆，多种表示方式都只介绍一种，下文同。</p><h3 id="1-7-代码"><a href="#1-7-代码" class="headerlink" title="1.7 代码"></a>1.7 代码</h3><p><strong>（1）词语</strong><br>语法:反引号 (`)括起来<br>例如将 <code>http://localhost/</code>用(`)括起来就能作为代码，而不是超链接。</p><p><strong>（2）代码块</strong><br>语法：用三个反引号 (```)括起来，每个（```）单独一行</p><ul><li>语法高亮：在第一个（&#96;&#96;&#96;）指定一种语言<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-8-分割线"><a href="#1-8-分割线" class="headerlink" title="1.8 分割线"></a>1.8 分割线</h3><p>语法：三个或以上的星号(*)，单独一行</p><h3 id="1-9-链接"><a href="#1-9-链接" class="headerlink" title="1.9 链接"></a>1.9 链接</h3><p><strong>（1）普通链接</strong><br>语法：<code>[链接描述](url,&quot;鼠标悬停文字（可选）&quot;)</code>，<br>例如<br><code>[google](https://www.google.com/，&quot;谷歌官网&quot;)</code>，效果：<a href="https://www.google.com/%EF%BC%8C%22%E8%B0%B7%E6%AD%8C%E5%AE%98%E7%BD%91%22">google</a></p><p><strong>（2）网址和邮箱地址</strong><br>语法：可以直接用尖括号括起来</p><p><strong>（3）引用类型链接</strong><br>引用类型链接是一种更具可读性和可维护性的方式，可以将链接的定义与文本内容分离，使文档更清晰。<br>语法：<code>[链接描述][链接lable]</code>，然后在文末定义链接<code>[链接lable]:url</code>，例如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这是[<span class="string">Google的官方网站</span>][<span class="symbol">1</span>]。</span><br><span class="line"></span><br><span class="line">&lt;!--文末--&gt;</span><br><span class="line">[<span class="symbol">openai</span>]: <span class="link">https://www.google.com/</span></span><br></pre></td></tr></table></figure><p>效果:<br>这是[Google的官方网站] [1]<br>[1]: <a href="https://www.openai.com/">https://www.openai.com</a></p><h3 id="1-10-插入图片"><a href="#1-10-插入图片" class="headerlink" title="1.10 插入图片"></a>1.10 插入图片</h3><p>语法:<code>![图片alt](图片链接 &quot;图片title&quot;)</code>，相比链接语法多了一个叹号（!）</p><h2 id="2-扩展语法（选修）"><a href="#2-扩展语法（选修）" class="headerlink" title="2 扩展语法（选修）"></a>2 扩展语法（选修）</h2><h3 id="2-1-表格"><a href="#2-1-表格" class="headerlink" title="2.1 表格"></a>2.1 表格</h3><p>语法：来自Markdown文档的描述</p><blockquote><p>要添加表，请使用三个或多个连字符（—）创建每列的标题，并使用竖线（|）分隔每列。您可以选择在表的任一端添加竖线</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 列名1      | 列名2 |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| Header      | Title       |</span><br><span class="line">| Paragraph   | Text        |</span><br></pre></td></tr></table></figure><table><thead><tr><th>表头</th><th>描述</th></tr></thead><tbody><tr><td>Header</td><td>Title</td></tr><tr><td>Paragraph</td><td>Text</td></tr></tbody></table><ul><li>对齐<blockquote><p>您可以通过在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心</p></blockquote></li></ul><h3 id="2-2-mermaid扩展"><a href="#2-2-mermaid扩展" class="headerlink" title="2.2 mermaid扩展"></a>2.2 mermaid扩展</h3><p>Mermaid是一个用文本生成UML图表的开源的JavaScript库，可以用来绘制类图、饼图、流程图、时序图等等。通常Markdown编辑器都支持持mermaid扩展，于是你就可以像写Markdown一样绘制UML图表。虽然有点丑，胜在简单，复杂的时序图还是建议用专门的图表工具画。</p><h4 id="2-2-1-时序图"><a href="#2-2-1-时序图" class="headerlink" title="2.2.1 时序图"></a>2.2.1 时序图</h4><p>时序图是用来描述一个系统之中对象之间交互和协作过程的图表。时序图用角色和对象表示系统中有哪些参与者，用箭头表示事件（消息&#x2F;动作）传递。纵向往下表示时间流逝，横向表示传递方向，往右是发起事件，往左是响应事件。</p><p>我们对照UML时序图的基本元素来看Mermaid的时序图是如何实现的：</p><table><thead><tr><th>时序图元素</th><th>表示方式</th><th>Mermaid实现方式</th></tr></thead><tbody><tr><td>角色</td><td>火柴人，可省略</td><td>无</td></tr><tr><td>对象</td><td>矩形</td><td>使用<code>participant</code> 简短别名 <code>as</code> 对象全名创建</td></tr><tr><td>生命线</td><td>角色矩形下方的竖直虚线</td><td>Mermaid创建对象自带生命线</td></tr><tr><td>激活框</td><td>生命线上的一个窄矩形，表示某一阶段</td><td>开始语句：<code>activate</code> 对象A<br>结束语句：<code>deactivate</code> 对象A</td></tr><tr><td>发送消息</td><td><strong>实线</strong>箭头,指向接收者。如果严格区分区分，<br>则实心箭头表示同步消息（阻塞，等待响应），<br>大于号箭头表示异步，非阻塞。</td><td><code>-&gt;&gt;</code>，例如Ezekiel <code>-&gt;&gt;</code> Tony：What’s your name?</td></tr><tr><td>返回消息</td><td><strong>虚线</strong>小于号箭头，指向发送者</td><td><code>--&gt;&gt;</code>，例如Tony <code>-&gt;&gt;</code> Ezekiel: tony！</td></tr><tr><td>自关联消息</td><td>指向对象自身的箭头<br>即自我调用</td><td>对象A <code>-&gt;&gt;</code> 对象A</td></tr><tr><td>组合片段-循环</td><td>表示该片段重复执行，类似于for语句</td><td>Iterator<code>-&gt;&gt;</code>Array: 初始化遍历<br><code>loop</code>  遍历数组<br>&emsp;&emsp; Array<code>--&gt;&gt;</code>Iterator: 返回下一个元素<br>Iterator<code>--&gt;&gt;</code>Iterator: 读取元素的值<br><code>end</code><br></td></tr><tr><td>组合片段-分支</td><td>选项（Opt）：可能发生，相当于单个if<br>抉择（Alt）:发生其中一个，相当于多个if</td><td>Client<code>-&gt;&gt;</code>Server: 发起 HTTP 请求<br><code>alt</code> 请求成功 (200 OK)<br>&emsp;&emsp;Server<code>--&gt;&gt;</code>Client: 返回 200 OK<br><code>else</code> 请求失败 (404 Not Found) <br>&emsp;&emsp;Server<code>--&gt;&gt;</code>Client: 返回 404 Not Found<br><code>end</code>，注<code>else</code>是可选的，省略则变成<code>选项</code></td></tr></tbody></table><p>Mermaid的时序图中还有各种箭头，以区别不同的消息类型，<del>不过简单使用的话我觉得没必要分这么细</del></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    title:演示mermaid时序图中的各种箭头</span><br><span class="line">    participant E as Ezekiel</span><br><span class="line">    participant T as Tony</span><br><span class="line">    E-&gt;T: What&#x27;s your name?</span><br><span class="line">    T--&gt;E: WHAT?!</span><br><span class="line">    E-&gt;&gt;T:What is your name?!!</span><br><span class="line">    T--&gt;&gt;E:Tony!</span><br><span class="line">    E-xT:Fuck you Tony!</span><br><span class="line">    T--xE:What&#x27;s your name?</span><br><span class="line">    E-)T:Ezekiel!!</span><br><span class="line">    T--)E:Fuck you Ezekiel!</span><br></pre></td></tr></table></figure><p>Markdown中绘制时序图基本步骤：</p><ol><li><code>sequenceDiagram</code> ：定义一个时序图。</li><li>定义时序图中的出现的参与者，<code>participant 角色别名 as 角色全名</code>。</li><li>依次绘制消息流。</li></ol><p>以画一个客户端通过浏览器访问Google首页的基本过程的时序图为例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    title:客户端通过浏览器访问Google首页的基本过程</span><br><span class="line">    participant c as 浏览器</span><br><span class="line">    participant r as 路由器</span><br><span class="line">    participant s as 谷歌服务器</span><br><span class="line">    participant dns as DNS服务器</span><br><span class="line">    c-&gt;&gt;r: 1.请求DNS查询：&lt;br&gt;google的ip地址</span><br><span class="line">    r-&gt;&gt;dns: 2.查询google的ip地址</span><br><span class="line">    dns--&gt;&gt;r:3.返回google的ip</span><br><span class="line">    r--&gt;&gt;c:告知google的ip</span><br><span class="line">    c-&gt;&gt;r:4.发起连接：google的ip地址</span><br><span class="line">    r-&gt;&gt;s:连接</span><br><span class="line">    s--&gt;&gt;r:告知连接成功</span><br><span class="line">    r--&gt;&gt;c:5.告知连接成功</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Title:时序图示例</span><br><span class="line">participant 客户端</span><br><span class="line">客户端-&gt;服务端: 我想找你拿下数据 SYN</span><br><span class="line">服务端--&gt;客户端: 我收到你的请求啦 ACK+SYN</span><br><span class="line">客户端-&gt;&gt;服务端: 我收到你的确认啦，我们开始通信吧 ACK</span><br><span class="line">客户端-&gt;&gt;客户端: 自我调用</span><br><span class="line">Note right of 服务端: 我是一个服务端</span><br><span class="line">Note left of 客户端: 我是一个客户端</span><br><span class="line">Note over 服务端,客户端: TCP 三次握手</span><br><span class="line">participant 观察者</span><br></pre></td></tr></table></figure><h3 id="2-3-流程图"><a href="#2-3-流程图" class="headerlink" title="2.3 流程图"></a>2.3 流程图</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A[开始] --&gt; B[写代码];</span><br><span class="line">    B --&gt; C[编译代码];</span><br><span class="line">    C --&gt; D[运行测试];</span><br><span class="line">    D --&gt;|测试通过| E[提交代码];</span><br><span class="line">    D --&gt;|测试失败| F[修复错误];</span><br><span class="line">    F --&gt; B;</span><br><span class="line">    E --&gt; G[结束];</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">  A[onCreate] --&gt; |创建| B[onStart];</span><br><span class="line">  B --&gt;|变为可见| C[onResume];</span><br><span class="line">  C --&gt;|失去焦点| D[onPause];</span><br><span class="line">  D --&gt;|不可见| E[onStop];</span><br><span class="line">  E --&gt;|重新启动| R[onRestart];</span><br><span class="line">  R --&gt;|变为可见| C;</span><br><span class="line">  D --&gt;|不可见| E;</span><br><span class="line">  E --&gt;|销毁| F[onDestroy];</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://markdown.com.cn/">Markdown 官方教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 时序图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + GitHub Pages 搭建个人博客网站</title>
      <link href="/hxpghblog/"/>
      <url>/hxpghblog/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-GitHub-Pages-搭建个人博客网站"><a href="#Hexo-GitHub-Pages-搭建个人博客网站" class="headerlink" title="Hexo + GitHub Pages 搭建个人博客网站"></a>Hexo + GitHub Pages 搭建个人博客网站</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&emsp;&emsp;Hexo [&#x2F;hækso&#x2F;]是一个基于 Node.js 构建的静态博客框架。它能够根据 Markdown 文件生成静态的 HTML 网页，方便快速搭建静态网站。GitHub Pages 是 GitHub 提供的一项上免费托管和发布静态网站的服务，有了它可以省去自己购买和维护服务器的成本。<br>&emsp;&emsp;如果你想搭建一个个人网站或者博客，GitHub Pages + Hexo是一个不错且主流的方案。你只需要掌握一点markdown语法和git使用配合教程就可以快速上手，同时这也是本站的搭建过程~</p><h4 id="本文环境"><a href="#本文环境" class="headerlink" title="本文环境"></a>本文环境</h4><ul><li>Win 10</li><li>NodeJS v21.4.0</li><li>git</li></ul><h2 id="1-安装软件"><a href="#1-安装软件" class="headerlink" title="1 安装软件"></a>1 安装软件</h2><h3 id="1-1-安装git"><a href="#1-1-安装git" class="headerlink" title="1.1 安装git"></a>1.1 安装git</h3><p>如果还没有安装git，在<a href="https://git-scm.com/">官网</a>下载并安装git，安装过程全部选软件推荐的选项就好</p><h3 id="1-2-安装NodeJS"><a href="#1-2-安装NodeJS" class="headerlink" title="1.2 安装NodeJS"></a>1.2 安装NodeJS</h3><ul><li>在<a href="https://nodejs.org/zh-cn/download/">NodeJS官网</a>下载安装包并安装</li><li>配置环境变量，如果选择的是msi格式的安装包会自动添加环境变量</li></ul><h3 id="1-3-安装-Hexo"><a href="#1-3-安装-Hexo" class="headerlink" title="1.3 安装 Hexo"></a>1.3 安装 Hexo</h3><p>新建一个文件夹作为你网站的根目录，打开命令提示符（或者git bash）并cd到当前目录，使用以下命令安装Hexo<br>ps：在地址栏输入”cmd”即可打开一个定位到当前目录的命令提示符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 使用 npm 安装 Hexo</span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"># 查看版本</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><h3 id="1-3-创建一个hexo项目并初始化"><a href="#1-3-创建一个hexo项目并初始化" class="headerlink" title="1.3 创建一个hexo项目并初始化"></a>1.3 创建一个hexo项目并初始化</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 初始化一个名为&quot;hexo-blog&quot;的 Hexo 项目</span><br><span class="line">hexo init hexo-blog</span><br><span class="line"></span><br><span class="line">cd hexo-blog</span><br><span class="line"></span><br><span class="line"># 安装 Hexo 项目所需的依赖包</span><br><span class="line">npm install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Hexo 初始化完成后，会生成一个包含基本文件和目录的项目结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hexo-blog/         # 项目根目录</span><br><span class="line">|-- _config.yml    # 主配置文件</span><br><span class="line">|-- node_modules/  # Node.js 模块目录，通过 npm install 安装</span><br><span class="line">|-- public/        # 自动生成的静态文件，部署时上传到服务器</span><br><span class="line">|-- scaffolds/     # 模版文件</span><br><span class="line">|-- source/        # 存放源文件的目录，包括文章、图片等</span><br><span class="line">|   |-- _drafts/   # 草稿目录，未发布的文章</span><br><span class="line">|   |-- _posts/    # 存放正式发布的文章</span><br><span class="line">|-- themes/        # 存放主题的目录</span><br><span class="line">|-- .gitignore     # Git 版本控制的忽略文件列表</span><br><span class="line">|-- package.json   # 项目的 Node.js 包配置文件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-Hexo配置"><a href="#2-Hexo配置" class="headerlink" title="2 Hexo配置"></a>2 Hexo配置</h2><p>hexo-blog&#x2F;_config.yml是heox的主配置文件，用来定义博客的各种设置和选项，包括站点设置、目录设置、部署设置等等，下面是一些重要的配置选项：<br>ps：yaml是一个方便人类阅读的数据序列化格式，通常用来做配置文件，主要用缩进来表示层次结构，另外注意”key: value”的value前面有一个空格</p><h3 id="2-1-网站Site信息"><a href="#2-1-网站Site信息" class="headerlink" title="2.1 网站Site信息"></a>2.1 网站Site信息</h3><ul><li>打开_config.yml主配置文件，找到site字段，修改网站基本信息<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> </span><br><span class="line"><span class="attr">description:</span> <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment"># 网站作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span>  <span class="comment"># 指定语言，会影响主题显示的语言，按需修改</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-开启文章资源文件夹（可选-推荐）"><a href="#2-2-开启文章资源文件夹（可选-推荐）" class="headerlink" title="2.2 开启文章资源文件夹（可选&#x2F;推荐）"></a>2.2 开启文章资源文件夹（可选&#x2F;推荐）</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 hexo new [layout] &lt;title&gt; 命令创建新文章时自动创建同名文件夹</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="2-3-配置永久链接（可选-推荐）"><a href="#2-3-配置永久链接（可选-推荐）" class="headerlink" title="2.3 配置永久链接（可选&#x2F;推荐）"></a>2.3 配置永久链接（可选&#x2F;推荐）</h3><p>Hexo 默认的链接格式是permalink: :year&#x2F;:month&#x2F;:day&#x2F;:title&#x2F;，配置永久链接有助于优化网站的 SEO：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装插件</span><br><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>修改主配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:abbrlink/</span> <span class="comment">#文章的永久链接 </span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment">#算法: crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment">#进制: dec(default) and hex</span></span><br></pre></td></tr></table></figure><ul><li>更多配置字段参考<a href="https://hexo.io/zh-cn/docs/configuration">Hexo配置</a></li></ul><h3 id="2-4-预览效果"><a href="#2-4-预览效果" class="headerlink" title="2.4 预览效果"></a>2.4 预览效果</h3><p>打开命令提示符，输入以下命令启动hexo本地服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>待终端输出类似以下字样说明启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>在浏览器访问 <a href="http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello">http://localhost:4000，即可看到默认的主题风格，同时可以看到hexo默认生成了一篇名为“Hello</a> World”的文章。</p><p><img src="/images/article01/70321.png" alt="默认主题的预览效果"></p><h3 id="3-Hexo-使用"><a href="#3-Hexo-使用" class="headerlink" title="3 Hexo 使用"></a>3 Hexo 使用</h3><h3 id="3-1-写作"><a href="#3-1-写作" class="headerlink" title="3.1 写作"></a>3.1 写作</h3><h4 id="3-1-1-编辑文章"><a href="#3-1-1-编辑文章" class="headerlink" title="3.1.1 编辑文章"></a>3.1.1 编辑文章</h4><p>source&#x2F;_posts 目录是用于存放博客文章的地方，每篇博客文章对应一个 Markdown 文件。可以通过在创建和编辑文章也可以使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;title&gt;</span><br></pre></td></tr></table></figure><ul><li>打开使用命令创建好的文章，在文件最上方有一块以 — 分隔的区域，称为<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter </a>，作用是配置文章标题、日期、分类、标签等属性。</li></ul><h4 id="3-1-2-草稿箱"><a href="#3-1-2-草稿箱" class="headerlink" title="3.1.2 草稿箱"></a>3.1.2 草稿箱</h4><p>在编辑过程中如果需要将文件作为草稿而不是直接发布，可以使用drafts。source&#x2F;_drafts 文件夹用于存放草稿，等到完成并决定发布时再将其移动到 source&#x2F;_posts 文件夹或者使用命令进行发布</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个新的草稿</span><br><span class="line">hexo new draft &lt;title&gt;</span><br><span class="line"></span><br><span class="line"># 将草稿发布为正式文章</span><br><span class="line">hexo publish draft &lt;title&gt;</span><br></pre></td></tr></table></figure><h4 id="3-1-3-文章中插入图片"><a href="#3-1-3-文章中插入图片" class="headerlink" title="3.1.3 文章中插入图片"></a>3.1.3 文章中插入图片</h4><ul><li><p>方式1：使用markdown标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 外链</span><br><span class="line">![图片描述](url)</span><br><span class="line"></span><br><span class="line"># 相对于博客的根目录：source/imgs/a.jpg</span><br><span class="line">![图片描述](/imgs/a.jpg)</span><br><span class="line"></span><br><span class="line"># Hexo 配置文件 _config.yaml 将 post_asset_folder 选项设为 true,hexo new xxx 新建文章时，Hexo 便会在 source/_posts 目录下新建与文章同名的文件夹</span><br><span class="line"># 相对于某篇文章的目，例如./article_1/a.jpg的目录</span><br><span class="line">![图片描述](a.jpg)</span><br></pre></td></tr></table></figure></li><li><p>方式2：使用 Hexo asset_img 标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img example.jpg This is an example image %&#125;</span><br></pre></td></tr></table></figure><p>缺点：无法在 Markdown 编辑器中正常显示图片<br>改进：插件hexo-renderer-marked解决了这个问题<br>可以只用npm install hexo-renderer-marked命令直接安装，之后在config.yaml中更改配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">marked:</span></span><br><span class="line">  <span class="attr">prependRoot:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">postAsset:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-2-启动预览服务器"><a href="#3-2-启动预览服务器" class="headerlink" title="3.2 启动预览服务器"></a>3.2 启动预览服务器</h3><p>博客文章表写好就可以进行发布了，hexo提供了本地预览服务器，上一步预览效果的时候已经启动过服务器，以下是相关的命令解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 清除缓存文件，在某些情况（尤其是更换主题后），如果对站点的更改无论如何也不生效可能用到</span><br><span class="line"># hexo clean</span><br><span class="line"></span><br><span class="line"># 将md和配置等源文件生成网页静态文件，存储到public目录，简写成hexo g</span><br><span class="line">hexo generate </span><br><span class="line"></span><br><span class="line"># 启动服务器 默认访问地址： http://localhost:4000/</span><br><span class="line">hexo server</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>可以将指令编写到批处理文件，省去每次输入命令:<br>在项目根目录创建start_server.bat文件，添加以下内容并保存，之后通过双击运行来启动服务器。<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> Stopping Hexo server...</span><br><span class="line"><span class="built_in">taskkill</span> /IM &quot;node.exe&quot; /F</span><br><span class="line"><span class="built_in">echo</span> Hexo server stopped.</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Starting Hexo server...</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo server </span><br><span class="line"><span class="built_in">echo</span> Hexo server started.</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-部署到服务器"><a href="#3-3-部署到服务器" class="headerlink" title="3.3 部署到服务器"></a>3.3 部署到服务器</h3><p>以上只是本地预览，想要别人访问得到这个博客，还需要部署到服务器上自己的服务器上或者GitHub Pages等托管服务。<br>以下以发布到Github Pages为例：</p><ol><li>创建github仓库</li></ol><p>填写仓库名，名称为”username.github.io”，username是你的Github用户名，仓库属性为public  </p><p>如果你的 GitHub 仓库命名为 username.github.io，GitHub Pages 将会默认将站点托管在 username.github.io 这个域名下，否则会托管在username.github.io&#x2F;仓库名 这个路径下</p><ol start="2"><li>Hexo 提供了一键部署功能，首先使用以下命令安装插件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装插件用于将生成的静态网站文件（通常位于 public 目录）部署到 GitHub</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>修改网站配置文件<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xxxx/xxxx.github.io.git</span> <span class="comment"># 仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span>  <span class="comment"># 分支</span></span><br></pre></td></tr></table></figure></li><li>运行部署命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 一键部署</span><br><span class="line">hexo deploy </span><br><span class="line"></span><br><span class="line"># 生成静态文件并部署</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>为了方便发布，我们将上面的启动服务器脚本修改一下，移除本地预览并在生成后同时部署，新建deploy.bat文件（如果使用git bash则将文件后缀改成.sh，运行时执行”.&#x2F;deploy.sh”），使用文本编辑器增加以下内容:<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Starting Hexo deploy...</span><br><span class="line">hexo clean &amp;&amp; hexo g -d</span><br><span class="line"><span class="built_in">echo</span> Hexo deploy success !</span><br></pre></td></tr></table></figure>，<br>双击运行deploy.bat，待终端输出“INFO  Deploy done: git”字样说明网页已经提到到Github，在浏览器访问 <code>https://username.github.io/</code>，部署成功，这就是你的个人博客了，Congratulations！</li></ol><h2 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4 更换主题"></a>4 更换主题</h2><p>以上我们通过Hexo和Github搭建了一个简单的博客，但是这个博客页面样式还很简陋，很多功能如访问统计、评论功能也没有，下面就开始我们博客的美（折）化（腾）之旅。</p><p>Hexo提供了非常多的主题供选择，可以在github 搜索”hexo theme”可以根据star看到比较受欢迎的主题。</p><p>下面以butterfly为例子</p><h3 id="4-1-下载butterfly"><a href="#4-1-下载butterfly" class="headerlink" title="4.1 下载butterfly"></a>4.1 下载butterfly</h3><p>通过git clone 或者直接下载zip包并复制到项目theme目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-2-应用主题"><a href="#4-2-应用主题" class="headerlink" title="4.2 应用主题"></a>4.2 应用主题</h3><ul><li>修改 Hexo 根目录下的 _config.yml，把主題改为 butterfly<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-安装渲染器插件"><a href="#4-3-安装渲染器插件" class="headerlink" title="4.3 安装渲染器插件"></a>4.3 安装渲染器插件</h3><p> 如果你沒有 pug 以及 stylus 的渲染器，可能报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug block content include ./includes/mixins/post-ui.pug #recent-posts.recent-posts +postUI include includes/pagination.pug</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 安装渲染器插件</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>双击start_server.bat 重新启动服务器，可以看到主题效果生效了</p><p><img src="/images/article01/70521.png" alt="butterfly主题预览效果"></p><h3 id="4-4-butterfly-主题配置"><a href="#4-4-butterfly-主题配置" class="headerlink" title="4.4 butterfly 主题配置"></a>4.4 butterfly 主题配置</h3><p>butterfly的配置文件在butterfly文件夹下的_config.yml，更多配置内容参考<a href="https://butterfly.js.org/">butterfly官方教程</a><br>butterfly升级主题可能会覆盖主题下的_config.yml配置文件，官方建议将butterfly主题下的配置文件重名并复制到项目根目录，在项目根目录进行配置</p><p>以下是一些比较常用的配置</p><h4 id="4-4-1-配置导航栏"><a href="#4-4-1-配置导航栏" class="headerlink" title="4.4.1 配置导航栏"></a>4.4.1 配置导航栏</h4><p>butterfly 提供了默认的导航栏tab，只需要将menu字段下的tab去掉前面的#注释即可，形式是”名称：链接地址 || 图标(<a href="https://fontawesome.com/">Font Awesome</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">   <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">   <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">   <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">   <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="comment"># List||fas fa-list:</span></span><br><span class="line">  <span class="comment">#   Music: /music/ || fas fa-music</span></span><br><span class="line">  <span class="comment">#   Movie: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="comment"># Link: /link/ || fas fa-link</span></span><br><span class="line">   <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><h4 id="4-4-2-添加子页面"><a href="#4-4-2-添加子页面" class="headerlink" title="4.4.2 添加子页面"></a>4.4.2 添加子页面</h4><p>刷新页面，发现导航栏已经展示出来了，但是点击其中tab，发现报错了，这是因为还没添加页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot GET /about/</span><br></pre></td></tr></table></figure><h5 id="关于页"><a href="#关于页" class="headerlink" title="关于页"></a>关于页</h5><p>在项目根目录使用cmd命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><p>使用该命令后会生成&#x2F;source&#x2F;about&#x2F;index.md文件，打开并添加layout: about属性以及更多正文信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020-02-23 19:20:33</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">about</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="string">这里写关于页的正文我是xxx，支持</span> <span class="string">Markdown,</span> <span class="string">HTML</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h5><p>其他子页面同理，分类页创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>同样在source&#x2F;categories&#x2F;index.md 这个文件添加属性type: “categories”</p><h5 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>在 source&#x2F;tags&#x2F;index.md 中添加标签属性type: “tags”</p><h5 id="使用标签"><a href="#使用标签" class="headerlink" title="使用标签"></a>使用标签</h5><p>在文章的开头的Front-matter区域，添加以下字段即可新增分类或者标签：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span> <span class="string">技术</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Hexo</span></span><br></pre></td></tr></table></figure><h4 id="4-4-3-头像"><a href="#4-4-3-头像" class="headerlink" title="4.4.3 头像"></a>4.4.3 头像</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span> <span class="comment"># 头像图片</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span> <span class="comment"># 头像动效</span></span><br></pre></td></tr></table></figure><h4 id="4-4-4-顶部图"><a href="#4-4-4-顶部图" class="headerlink" title="4.4.4 顶部图"></a>4.4.4 顶部图</h4><ul><li>如果不需要显示顶部图，可直接配置 disable_top_img: true</li><li>显示优先级：文章的front-matter的top_img属性 &gt;ront-matter的 cover属性 &gt; 配置文件的 default_top_img属性</li><li>主页顶部图高度：index_top_img_height:  # 例如 300px&#x2F;300em&#x2F;300rem</li></ul><h4 id="4-4-5-评论功能"><a href="#4-4-5-评论功能" class="headerlink" title="4.4.5 评论功能"></a>4.4.5 评论功能</h4><p>一般的主题都支持多个评论插件，如disqus、gitalk、valine、 waline、twikoo等</p><h5 id="以Valine为例"><a href="#以Valine为例" class="headerlink" title="以Valine为例"></a>以Valine为例</h5><ol><li><p>Valine需要LeanCloud支持，登录或注册 LeanCloud，如果是国内版需要实名，国际版不需要实名认证，然而国际版共享域名不再向中国大陆提供服务（国区IP用户无法评论），需要使用自定义域名。进入控制台后点击左下角创建应用</p></li><li><p>应用创建好以后，进入刚刚创建的应用，选择左下角的设置&gt;应用Key，复制APP ID、APP Key和serverURLs，由于国际版通用域名失效了，所以现在serverUrl也是要填的</p></li><li><p>在主题配置文件的comments字段下的user设置为Valine,valine填写以下内容，重新部署刷新页面即可看到评论区</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Valine</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="comment"># your appId</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="comment"># your appKey</span></span><br><span class="line">  <span class="attr">serverURLs:</span>          </span><br></pre></td></tr></table></figure></li><li><p>LeanCloud 使用自定义域名（可选）<br>这里请配合下文的绑定域名使用，可以先跳过。如果自己申请了域名，可以为LeanCloud绑定api域名。</p></li></ol><ul><li>在应用控制台 &gt; 设置 &gt; 域名绑定 &gt; API 访问域名 绑定 API 域名，填入自定义的二级域名例如<code>api.kdsunset.top </code>，勾选ssl和强制https，点击绑定后会生成一条推荐 DNS 配置</li><li>在域名管理后台新增一条CNAME记录，将刚才生成推荐 DNS 配置填入</li></ul><table><thead><tr><th>HOSTNAME</th><th>TYPE</th><th>ADDRESS</th></tr></thead><tbody><tr><td>api</td><td>CNAME</td><td>username.github.io</td></tr></tbody></table><ul><li>最后将serverURLs的值修改成自定义域名。</li></ul><p> butterfly 支持双评论系统，我们再配置一个Gitalk：</p><h5 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h5><ol><li>创建 Github 应用：登录Github，打开Settings-&gt;Developer Settings-&gt;OAuth Apps-&gt;New OAuth Apps，填写以下信息，创建成功后会生成Client ID和Client Secret<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Application name：应用名，方便起见直接填github用户名</span><br><span class="line">Homepage URL：网站地址</span><br><span class="line">Application description：应用描述</span><br><span class="line">Authorization callback URL：网站地址</span><br></pre></td></tr></table></figure></li><li>修改butterfly的主题配置<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">comments:</span><br><span class="line">  #开启双评论</span><br><span class="line">  use: Valine,Gitalk</span><br><span class="line"></span><br><span class="line"># https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  client_id: # 上一步创建的Github 应用的Client ID</span><br><span class="line">  client_secret: # 上一步创建的Github 应用的Client Secret</span><br><span class="line">  repo: # 关联的Github Pages的仓库名（本文3.3小节部署服务器）</span><br><span class="line">  owner: # 你的Github 用户名</span><br><span class="line">  admin: # 你的Github 用户名</span><br><span class="line">  option:</span><br></pre></td></tr></table></figure></li><li>重新部署，在文章下的评论区即可看到gitalk评论功能。如果提示“未找到相关Issue进行评论”，则点击下方的“使用GitHub登录”，然后刷新一下页面即可，缺点就是每篇文章发布后都需要手动初始化以下，或者使用自动初始化脚本</li></ol><h4 id="4-4-6-访问人数和阅读统计"><a href="#4-4-6-访问人数和阅读统计" class="headerlink" title="4.4.6 访问人数和阅读统计"></a>4.4.6 访问人数和阅读统计</h4><p>butterfly的默认调用busuanzi的进行统计，设置以下字段，刷新页面后在侧边栏的网站资讯看到本站访客数和本站总访问量。文章标题后面带有阅读量次数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-7-字数统计"><a href="#4-4-7-字数统计" class="headerlink" title="4.4.7 字数统计"></a>4.4.7 字数统计</h4><p>安装插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wordcount字数统计插件</span><br><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>配置以下字段</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="4-4-8-分析统计"><a href="#4-4-8-分析统计" class="headerlink" title="4.4.8 分析统计"></a>4.4.8 分析统计</h4><ul><li>以百度统计为例</li><li>登录百度统计官网管理后台，使用设置-&gt;账户设置-&gt;网站列表-&gt;新增网站</li><li>复制应用的统计代码中的key到配置中的baidu_analytics字段<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填写百度统计代码的key（形如“  hm.src = &quot;https://hm.baidu.com/hm.js?28e4ea7748d7403e4bf35f897a5e67e0&quot;;）</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-4-9-中文字和半形的英文、数字、符号之间插入空白"><a href="#4-4-9-中文字和半形的英文、数字、符号之间插入空白" class="headerlink" title="4.4.9 中文字和半形的英文、数字、符号之间插入空白"></a>4.4.9 中文字和半形的英文、数字、符号之间插入空白</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># https://github.com/vinta/pangu.js</span><br><span class="line"># Insert a space between Chinese character and English character (中英文之間添加空格)</span><br><span class="line">pangu:</span><br><span class="line">  enable: false</span><br><span class="line">  field: post # site/post</span><br></pre></td></tr></table></figure><h4 id="4-4-10-图片压缩"><a href="#4-4-10-图片压缩" class="headerlink" title="4.4.10 图片压缩"></a>4.4.10 图片压缩</h4><p>Butterfly主题需要使用到很多图片。如果图片太大，会严重拖慢网站的加载速度，以下是常用压缩工具</p><ul><li><a href="https://tinypng.com/">tinypng</a></li><li>caesium</li></ul><h2 id="5-其他优化"><a href="#5-其他优化" class="headerlink" title="5 其他优化"></a>5 其他优化</h2><p>一通操作下来，相信你的博客样式已经变得称心如意了，但是优化还远不止如此，如果觉得username.github.io格调不够高可以绑定自己的域名；如果想在搜索引擎更容易搜索到自己的博客需要做SEO优化；如果图片越来越多需要优化加载速度就需要使用图床来管理图片。</p><h3 id="5-1-绑定域名"><a href="#5-1-绑定域名" class="headerlink" title="5.1 绑定域名"></a>5.1 绑定域名</h3><p>域名注册商国内有阿里云、腾讯等，国外有GoDaddy、namesilo等，我选的是namesilo，国外的服务不需要备案，namesilo也支持支付宝，下面以namesilo为例  </p><ol><li>注册namesilo或者其他服务商，购买一个你钟意的域名。注册和购买域名不是本文重点就不展开了，网站有很多教程。</li><li>配置DNS，在namesilo点击个人头像进入Domain Manager页面,点击你的刚注册的域名，找到DNS Records，点击update，</li></ol><ul><li><p>添加以下A记录，A记录是将域名解析到ip地址，即将域名指向你的username.github.io的ip地址，注意这里<strong>不要用ping</strong> 的方式获取username.github.io的ip，因为这个ip是动态的，而是使用Github 官方文档<a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">管理 GitHub Pages 站点的自定义域</a>提供的ip。</p></li><li><p>添加CNAME记录，将你的域名解析到另一个域名，即username.github.io域名</p></li></ul><table><thead><tr><th>HOSTNAME</th><th>TYPE</th><th>ADDRESS</th></tr></thead><tbody><tr><td></td><td>A</td><td>185.199.108.153</td></tr><tr><td></td><td>A</td><td>185.199.109.153</td></tr><tr><td></td><td>A</td><td>185.199.110.153</td></tr><tr><td></td><td>A</td><td>185.199.111.153</td></tr><tr><td>www</td><td>CNAME</td><td>username.github.io</td></tr></tbody></table><ol start="4"><li>设置的CNAME文件<br>在source文件夹中下创名为”CNAME”的文件（删除后缀名），使用文本编辑器该文件，内容就是你的域名,例如<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxx.com</span><br></pre></td></tr></table></figure></li><li>设置Github仓库<br>Github支持自定义域的HTTPS，打开Github 仓库，点击Settings-&gt;Pages-&gt;GitHub Pages，你会发现已经指向你的自定义域名了，勾选Enforce HTTPS ，使用Github Page自带的证书，稍等片刻（DNS生效需要时间），就可以使用HTTPS协议访问你的域名了。</li></ol><h3 id="5-2-CDN加速"><a href="#5-2-CDN加速" class="headerlink" title="5.2 CDN加速"></a>5.2 CDN加速</h3><p>由于Github在国内的访问速度是比较慢的，为了优化访问网站的速度，可以使用Github pages+国内托管平台，如gitee、coding，双线部署的方式，这两个都需要实名备案，另一种方式是使用cdn加速，目前cloudfare有免费的服务，对国内用户来说访问速度应该好于直接访问Github （吧）。</p><p>1 登录（注册）<a href="%22https://cloudflare.com/%22">cloudflare</a>，<br>2. 添加站点。进入控制台，点击”添加站点”填写你的域名（不需要www），下一步选择个人免费版，等待系统扫描DNS记录，然后会分配 Cloudflare 名称服务器，根据提示将原来dns服务器替换成Cloudflare 名称服务器<br>3. 更改DNS服务器<br>登录注册博客的域名的服务商管理后台，本例是namesilo，打开namesilo管理后台，点击NameServer Manager，备份一下原来的dns服务器，以免cloudfare免费版不可用了时方便还原回去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NS1.DNSOWL.COM</span><br><span class="line">NS2.DNSOWL.COM</span><br><span class="line">NS3.DNSOWL.COM</span><br></pre></td></tr></table></figure><p>然后全部删除，替换成Cloudflare提供的 名称服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kristina.ns.cloudflare.com</span><br><span class="line">mario.ns.cloudflare.com</span><br></pre></td></tr></table></figure><p>4.等待激活<br>修改DNS的解析后，需要一个生效时间，回到Cloudflare平台查看更新状态，激活后会发送电子邮件到注册Cloudflare的邮箱。<br>如果激活以后访问博客首页出现“重定向次数过多的”错误，则需要将cloudflare管理后台的SSL&#x2F;TLS设置成“完全”模式。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是使用hexo + GitHub Pages 的搭建博客网站的教程，<br>seo优化的内容和图床的配置篇幅比较多，将在新文章中展开。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1]. Hexo : <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a><br>[2]. Butterfly : <a href="https://butterfly.js.org/">https://butterfly.js.org/</a><br>[3]. Valine : <a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
